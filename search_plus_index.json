{"./":{"url":"./","title":"简介","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Introduction - 简介 NotesEveryDay（每日学习笔记） Development（开发） WeLife（生活） Introduction - 简介 作者博客地址：iHTCboy's blog 网页在线阅读：iHTCboy 学习笔记 有趣思维导图：OneMindMap - GitHub NotesEveryDay（每日学习笔记） Record daily notes and knowledge, for dev and life ，every something... 记录每天学习笔记和知识，主要是开发和生活，每一件的某事... 每天开发学习工作生活中，都会遇到形形色色各种各样的问题，当问题解决后，一般情况下就不了了之，往后余生，某一天，可能就直接踩坑啦！或者，想起之前遇到过某个问题，但是想不起是什么事情了！ 好记性不如烂笔头！ 这正是本书的初心~ Development（开发） 记录了某个知识点，可以快速的了解，还希望能扩展的学习。 WeLife（生活） 记录生活的一些不寻常的“常识”，当然工作也是生活的一部分。 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-09-13 21:46:34 更新 "},"Development/":{"url":"Development/","title":"Development（开发）","keywords":"","body":"Development（开发） 记录了某个知识点，可以快速的了解，还希望能扩展的学习。 Android Algorithm Assembly Bash C & C++ C# Cross Platform DataBase DataStructure DesignPatterns Game Git Go iOS Jailbreak Java Linux macOS MultiMedia Network Perl PHP Python R RegularExpression Ruby Security The-Back-End The-Front-End 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-11 12:00:46 更新 "},"Development/Learn_Study.html":{"url":"Development/Learn_Study.html","title":"Learn_Study","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Learn & Study（学与习） 掌握一个知识点 优秀工程师习惯 书籍推荐 程序员网站 快速阅读的秘诀 精通一个领域 Learn & Study（学与习） 学习学习，学完就要练习！ 坚持学完再习，一定滴水穿石！ 一定不要忽视坚持每天学习的威力，这就是 学与习 的力量！ 掌握一个知识点 为什么需要 XXX 什么是 XXX 怎么使用 XXX 使用 XXX 时注意的问题 XXX 的应用领域 XXX 的优缺点 XXX 触类旁通 这个理论是在郝斌老师所录制的计算机(编程)教学视频里提到的，很适合初学者，有兴趣的大家可以自行搜索。 为什么这个很受用？ 因为简单的套用一下，你就知道自己是否掌握了一个知识点?！ 举例： 为什么需要 单例模式 什么是 单例模式 怎么使用 单例模式 使用 单例模式 时注意的问题 单例模式 的应用领域 单例模式 的优缺点 单例模式 触类旁通 如果你能自己回答以上问题，说明你对 单例模式 有了全面的了解，以后接触到相似概念时，一定能更快的掌握，这就是知识模型和体系的力量！ 注：更多知识可参考：如何建立你自己的开发知识体系 | iHTCboy's blog 优秀工程师习惯 花三分之一时间思考实现方案 与他人讨论你的实现方案 用整洁的代码实现 在脑海中运行你的代码 用边界条件验证健壮性 用真机(真实环境)测试 在多个系统多台设备上验证兼容性 修复静态代码走查和内存泄露 找人 CodeReview 提交前再次阅读你的代码 书籍推荐 后端 编程语言 操作系统 数据结构 网络原理 软件工程 数据库 《C++ Primer》（第5版）：作为久负盛名的C++经典教程，丰富的教学辅助内容、精心组织的编程示范，无论是初学者入门，或是中、高级程序员提升，都是不容置疑的首选。科学计算、分布式应用、嵌入式行业、智能控制、算法研究，乃至学术讨论和上机考试都会有一种语言的身影，那就是大名鼎鼎的C++语言。 《算法导论》（第3版）：是基础算法方面最权威、最详细的著作之一，在很多国际著名大学被用于算法课的教材。诸多算法方面的论文将其列入参考文献当中。 该书详细的介绍了诸多常见的算法及数据结构，并用严谨的证明来论证其正确性。每个章节均有例题，适合学习者深入理解。（Introduction to Algorithms） 《深入理解计算机系统》（第3版）：和第2版相比，内容上巨大的变化是：从以IA32和x86-64为基础转变为完全以x86-64为基础。主要更新：基于x86-64，1.大量地重写代码，首次介绍对处理浮点数据的程序的机器级支持。2.处理器体系结构修改为支持64位字和操作的设计。3.引入更多的功能单元和更复杂的控制逻辑，使基于程序数据流表示的程序性能模型预测更加可靠。4.扩充关于用GOT和PLT创建与位置无关代码的讨论，描述了更加强大的链接技术（比如库打桩）。5.增加了对信号处理程序更细致的描述，包括异步信号安全的函数等。6.采用新函数，更新了与协议无关和线程安全的网络编程。（Computer Systems: A Programmer's Perspective） 《软件工程: 实践者的研究方法》（第5版）：本书是20多年来一直在软件工程的教学、科研和应用中享有盛誉的经典著作，全面介绍了软件工程学科的概念和方法。本书从软件工程的概要介绍开始，进而介绍了管理软件项目、传统软件工程方法、面向对象软件工程方法以及软件工程的高级课题，包括传统的分析、设计、测试和度量，面向对象的分析、设计、测试和度量，形式化方法、净室软件工程、基于构件的方法、客户/服务器软件工程、Web工程、再工程和CASE等。最后，还对软件工程学科的未来发展做了预测和展望。 本书是计算机及相关专业本科生和研究生的理想教材，同时也是软件工程领域技术人员的优秀参考资料。(Software Engineering: A Practitioner Approach) 《TCP/IP详解 卷1：协议》：是一本完整而详细的TCP/IP协议指南。描述了属于每一层的各个协议以及它们如何在不同操作系统中运行。作者W.Richard Stevens用Lawrence Berkeley实验室的tcpdump程序来捕获不同操作系统和TCP/IP实现之间传输的不同分组。对tcpdump输出的研究可以帮助理解不同协议如何工作。（TCP/IP ILLustrated Volume 1: The Protocols） 《UNIX网络编程 - 第1卷:套接口联网API》（第3版）：第1版和第2版由已故UNIX网络专家W. Richard Stevens 博士独自编写。第3版是由世界著名网络专家Bill Fenner和Andrew M. Rudoff执笔，根据近几年网络技术的发展，对上一版进行全面修订，增添了IPv6的更新过的信息、SCTP协议和密钥管理套接口的内容，删除了X/Open传输接口的内容。本书全面深入地介绍了如何使用套接口API进行网络编程。全书从对套接口API的综合讨论开始，论述了基本编程内容后，即转入高级套接口编程的相关主题，包括IPv4与IPv6的互操作性、UNIX域协议、非阻塞I/O、路由套接口、广播、多播、线程、原始套接口、数据链路访问等，对于客户/服务器程序的各种设计方法也作了完整的探讨，最后还对流这种设备驱动机制作了深入分析。（Unix Network Programming, Volume 1: The Sockets Networking API） 《UNIX环境高级编程》（第3版）：在本书第2版出版后的8年中，UNIX行业发生了巨大的变化，特别是影响UNIX编程接口的有关标准变化很大。本书在保持前一版风格的基础上，根据最新的标准对内容进行了修订和增补，反映了最新的技术发展。书中除了介绍UNIX文件和目录、标准I/O库、系统数据文件和信息、进程环境、进程控制、进程关系、信号、线程、线程控制、守护进程、各种I/O、进程间通信、网络IPC、伪终端等方面的内容，还在此基础上介绍了众多应用实例，包括如何创建数据库函数库以及如何与网络打印机通信等。（Advanced Programming in the UNIX Environment, Third Edition） 《数据库系统概念》（第6版）：本书是数据库系统方面的经典教材之一，其内容由浅入深，既包含数据库系统基本概念，又反映数据库技术新进展。它被国际上许多著名大学所采用，包括斯坦福大学、耶鲁大学、得克萨斯大学、康奈尔大学、伊利诺伊大学等。第6版保持了前5版的总体风格，同时对内容进行了扩充，对结构进行了调整，以更好地符合数据库教学的需求和反映数据库设计、管理与使用方式的发展和变化。（Database System Concepts） 程序员网站 公共 网站 链接 GitHub https://github.com Google https://www.google.com Stack Overflow https://stackoverflow.com 前端 网站 链接 Web端 W3Schools https://www.w3schools.com React https://reactjs.org Vue.js https://vuejs.org AngularJS https://angularjs.org TypeScript https://www.typescriptlang.org jQuery https://jquery.com Bootstrap https://getbootstrap.com 移动端 Apple Developer https://developer.apple.com Android Developers https://developer.android.com Google Developers https://developers.google.com iOS Ray Wenderlich https://www.raywenderlich.com objc.io https://www.objc.io objc 中国 https://www.objccn.io NSHipster https://nshipster.com NSHipster 中国 https://nshipster.cn Swift.org https://swift.org SwiftDoc.org https://swiftdoc.org We ❤ Swift https://www.weheartswift.com Swifter.tips https://swifter.tips 大前端 Dart https://dart.dev Flutter https://flutter.dev React Native https://reactnative.dev WEEX https://weex.apache.org 微信开放者 https://developers.weixin.qq.com/doc 后端 网站 链接 NGINX https://nginx.org Docker https://www.docker.com Node.js https://nodejs.org OpenSSH https://www.openssh.com OpenSSL https://www.openssl.org 操作系统 Linux https://www.linux.org Linux Kernel https://www.kernel.org Debian https://www.debian.org Ubuntu https://ubuntu.com CentOS https://www.centos.org RedHat https://www.redhat.com FreeBSD https://www.freebsd.org OpenBSD https://www.openbsd.org GNU https://www.gnu.org 编程语言 C - 非官网 https://zh.cppreference.com/w/c/language C++ https://www.cplusplus.com Go https://golang.org Java https://www.java.com Rust https://www.rust-lang.org PHP https://www.php.net Lua https://www.lua.org Ruby https://www.ruby-lang.org 数据库 Redis https://redis.io MySQL https://www.mysql.com MongoDB https://www.mongodb.com PostgreSQL https://www.postgresql.org SQLite https://www.sqlite.org Python Python https://www.python.org NumPy https://numpy.org Django https://www.djangoproject.com Flask https://flask.palletsprojects.com 更多网站：iHTCboy/HelloWorld 快速阅读的秘诀 有引导 抓重点 要默读，不要朗读 阅读时，视线应与读物成垂直线 要聚精会神地阅读 运用要领记忆，有目的地去记 精通一个领域 Chunk it up（切碎知识点） Deliberate Practicing（刻意练习） Feedback（反馈） 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-14 21:45:26 更新 "},"Development/Android.html":{"url":"Development/Android.html","title":"Android","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Android Studio Android Studio 真机测试 项目结构 AVD（Android Virtual Device） Android Hook Android Runtime (运行时) JVM Dalvik ART Android 开发 Android 保持屏幕常亮 Android获取和设置屏幕亮度 安卓角标数字 Android 获取手机厂商、系统版本等信息 隐藏Android模拟器的虚拟按键 安卓App上架 apk签名 [TOC] Android Studio Android Studio 真机测试 第一步：打开手机USB调试   首先，打开手机”设置->>我的设备->>全部参数->>MIUI版本”，连续点击7次，进入开发者模式。   其次，”设置->>更多设置->>开发者选项”，打开“USB调试”和“USB安装”. 第二步：设置Android studio   打开Android studio工程，”Run->>Edit configurations”如下图位置，选择“Open Select Deployment Target Dialog”,这个是每次在调试时弹出设备选择框。注意：如果直接选择“USB Device”的话，可能调试时会找到不到手机设备. (Mac)Android studio真机测试 项目结构 Project模式下目录： .gradle 和 .idea 主要放置的都是 Android studio 自动生成的一些文件。 app 项目的代码资源等内容都在这个目录 gradle 包含 gradle wrapper 的配置文件 .gitignore 用来将指定的目录或文件排除在版本控制之外的 build.gradle 这是项目全局的 gradle 构建脚本。 gradle.properties 这个文件是全局的gradle的配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。 gradlew 和 gradlew.bat 这两个文件是用来在命令行中执行 gradle 命令的，其中 gradlew 是在 Linux 和 macOS 系统中使用，而 gradlew.bat 是在Windows 系统中使用。 local.properties 用来指定本机中的 Android sdk 路径，通常内容都是自动生成，我们并不需要修改。 settings.gradle 用于指定项目中所有引入的模块，通常情况下模块的引入都是自动完成的,需要我们手动去修改的这个文件的场景可能比较少。 .iml .iml文件是所有 IntelliJ IDEA 项目都会自动生成的一个文件，用于标识这是一个IntelliJ IDEA项目，我们不需要修改这个文件中的任何内容。 App目录下的结构： build 主要是包含了一些在编译中自动生成的文件。 libs 如果你的项目中使用了第三方jar包,就需要把这些jar包都放在libs目录下,放在这个目录下的jar包都会被自动添加到构建路径里去。 src子目录: androidTest 用来编写 Android Test 测试用例的，可以对项目进行一些自动化测试。 java 放置java代码的地方 res 为 resource 的缩写，界面 UI 相关资源，也就是非程序代码的资源，如 layout、图像与文本。 AndroidManifest.xml 整个 Android 项目的配置文件，在程序中自定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限声明。 test 用来编写 Unit Test测试用例的，是对项目进行自动化测试的另一种方式。 .gitignore 用来将指定的目录或文件排除在版本控制之外的。 build.gradle 这是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置。 proguard-rules.pro 这个文件用于指定项目代码的混淆规则，当代码开发完成后打开安装包文件，如果不希望代码被别人破解，通常会将代码进行混淆，从而让破解者难以阅读。 AVD（Android Virtual Device） 安装 apk 时报错： The APK failed to install. Error: INSTALL_FAILED_NO_MATCHING_ABIS The APK failed to install. Error: Could not parse error string 产生原因： 为了让AVD获取最佳运行速度，AS在安装AVD时往往会建议使用与你的pc机相同的cpu架构，即默认为x86架构，而apk使用的是ARM架构，这就造成了不兼容。 解决方法： 在AS中安装一个ARM架构的AVD。 编译成apk时，可以在选项中将程序修改为x86。 Android Hook 盘点Android常用Hook技术 - 知乎 Android Runtime (运行时) JVM Java Virtual Machine，缩写为JVM，Java虚拟机，一种能够运行Java字节码的虚拟机。 Dalvik Dalvik 是 Android 移动设备平台的核心组成部分之一。它可以支持已转换为 .dex（dex, Dalvik Executable）格式的Java应用程序的运行。.dex 格式是专为 Dalvik 设计的一种压缩格式，适合内存和处理器速度有限的系统。 在app安装到手机之后，系统运行dexopt程序对dex进行优化，将dex的依赖库文件和一些辅助数据打包成odex文件。存放在 cache/dalvik_cache 目录下。保存格式为 apk路径 @ apk名 @ classes.dex。这样以空间换时间大大缩短读取/加载dex文件的过程。 ART Android Runtime（缩写为ART），是一种在 Android 操作系统上的运行环境，由 Google 公司研发，并在2013年作为 Android 4.4 系统中的一项测试功能正式对外发布，在 Android 5.0 及后续Android版本中作为正式的运行时库取代了以往的Dalvik虚拟机。ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的虚拟机。 Android 运行时 | loody's blog Android 开发 Android 保持屏幕常亮 Java: getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON); Kotlin: window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON) 使设备保持唤醒状态 | Android Developers Android获取和设置屏幕亮度 在Androidmanifast.xml中添加如下权限： 获取屏幕亮度的 Kotlin 代码： var screenBrightness: Float = window.attributes.screenBrightness 设置屏幕亮度的 Kotlin 代码： private fun changeSystemBrightness(brightness: Float) { if (hasPermissionsToWriteSettings(this)) { //已获取权限 val lp = window.attributes lp.screenBrightness = brightness window.attributes = lp } else { //拒绝了权限 val intent = with(Intent(Settings.ACTION_MANAGE_WRITE_SETTINGS)) { data = Uri.parse(\"package:$packageName\") this } startActivityForResult(intent, 100) } } private fun hasPermissionsToWriteSettings(context: Activity): Boolean { return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { Settings.System.canWrite(context) } else { ContextCompat.checkSelfPermission(context, Manifest.permission.WRITE_SETTINGS) == PackageManager.PERMISSION_GRANTED } } 安卓角标数字 安卓应用的角标是由Launcher支持的，而原生的Android系统Launcher并没有提供角标支持，所以各大手机厂商只能自己定制Launcher来实现，然后提供接口给外部使用。 Android 8.0 及之后的版本Google官方API支持通过发送系统通知的方式设置应用角标，但是不支持显示数量，而是一个小圆点。 安卓应用角标那些事儿 - 简书 2020年android 最新的角标适配方案_炭烤葫芦娃的博客-CSDN博客_android 角标适配 leolin310148/ShortcutBadger: An Android library supports badge notification Android 获取手机厂商、系统版本等信息 private fun getAppVersionCode(): Long { val versionCodde: Long = // avoid huge version numbers and you will be ok if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) { packageManager.getPackageInfo(packageName, 0).longVersionCode } else { packageManager.getPackageInfo(packageName, 0).versionCode.toLong() } return versionCodde } 获取手机名称: String phoneName = android.os.Build.MODEL; 获取系统SDK版本号: int phoneSDK = Build.VERSION.SDK_INT; 获取手机系统版本号: String phoneVersion = android.os.Build.VERSION.RELEASE; android.os.Build.BOARD：获取设备基板名称 android.os.Build.BOOTLOADER：获取设备引导程序版本号 android.os.Build.BRAND：获取设备品牌 android.os.Build.CPU_ABI：获取设备指令集名称（CPU的类型） android.os.Build.CPU_ABI2：获取第二个指令集名称 android.os.Build.DEVICE：获取设备驱动名称 android.os.Build.DISPLAY：获取设备显示的版本包（在系统设置中显示为版本号）和ID一样 android.os.Build.FINGERPRINT：设备的唯一标识。由设备的多个信息拼接合成。 android.os.Build.HARDWARE：设备硬件名称,一般和基板名称一样（BOARD） android.os.Build.HOST：设备主机地址 android.os.Build.ID：设备版本号。 android.os.Build.MODEL ：获取手机的型号 设备名称。 android.os.Build.MANUFACTURER：获取设备制造商 android:os.Build.PRODUCT：整个产品的名称 android:os.Build.RADIO：无线电固件版本号，通常是不可用的 显示unknown android.os.Build.TAGS：设备标签。如release-keys 或测试的 test-keys android.os.Build.TIME：时间 android.os.Build.TYPE：设备版本类型 主要为\"user\" 或\"eng\". android.os.Build.USER：设备用户名 基本上都为android-build android.os.Build.VERSION.RELEASE：获取系统版本字符串。如4.1.2 或2.2 或2.3等 android.os.Build.VERSION.CODENAME：设备当前的系统开发代号，一般使用REL代替 android.os.Build.VERSION.INCREMENTAL：系统源代码控制值，一个数字或者git hash值 android.os.Build.VERSION.SDK：(已弃用)系统的API级别，请使用 SDK_INT 来查看 android.os.Build.VERSION.SDK_INT：系统的API级别 数字表示 隐藏Android模拟器的虚拟按键 原理 修改system下的build.prop文件内的参数 修改方法 1.找到指定的AVD模拟器的配置文件，一般路径如下： [用户根目录]/.android/avd/ [模拟器名字].avd/config.ini 2.将下面两个属性改为yes即可 hw.dPad = yes hw.mainKeys = yes 隐藏导航栏 | Android Developers 安卓App上架 市场 开放平台官网 审核条款 审核要求 费用要求 App Store https://developer.apple.com App Store 审核指南 - Apple Developer 不需要《计算机软件著作权》 每年年费￥688元 Google Play https://play.google.com/apps/publish/?hl=zh-CN 政策中心 - Play 管理中心帮助 不需要《计算机软件著作权》 一次性支付 25 美元的注册费 应用宝 http://open.qq.com/ 应用上架规则 - 腾讯开放平台 必须《计算机软件著作权》 无 百度手机助手 http://app.baidu.com/ 审核规范 - 百度移动应用平台 注册不成功，原因：网站bug 无 360 手机助手 http://dev.360.cn/ 应用发布规则 - 360移动开放平台 未知 未知 vivo 应用商店 https://dev.vivo.com.cn/ - 不接受个人开发者注册 未知 OPPO 软件商店（一加） http://open.oppomobile.com/ OPPO开放平台 不接受个人开发者发布应用 未知 小米应用商店 https://dev.mi.com/ 应用审核规范 不需要《计算机软件著作权》。但应用不得是简单的网站页面打包或套用模板、内容聚合或罗列链接，参考小米应用商店审核规范 无 华为应用市场 http://developer.huawei.com/consumer/cn/ 华为应用市场审核指南 不需要《计算机软件著作权》 无 阿里应用分发平台（豌豆荚） http://open.uc.cn/ - 当前市场已存在大量相似的此类应用，如需收录，请补充提交《计算机软件著作权》。 无 搜狗手机助手 http://zhushou.sogou.com/open/ - 未知 未知 锤子应用商店 http://dev.smartisan.com/ - 未知 无 魅族应用商店 http://open.flyme.cn/ 审核规范 - 魅族开放平台 不需要《计算机软件著作权》 无 金立软件商店 http://open.appgionee.com/ - 未知 无 安智市场 http://dev.anzhi.com/ - 2020年2月起，安智市场不再免费收录软件（包括新软件/下架重新上架），软件必须付费上架或CPD推广且软件需要符合上架审核标准。 无 酷安市场 https://developer.coolapk.com - 不需要《计算机软件著作权》 无 联想乐商店 http://open.lenovo.com/ - 未知 未知 三星应用开发者平台 http://support-cn.samsung.com/App/DeveloperChina/Home/Index - 未知 未知 注：不得不佩服国内的安卓市场，除了华为应用市场被拒后能回复和申诉，其它市场就是一个消息通知，真的一言难尽！ apk签名 用指定的 keystore 签名apk： jarsigner -verbose -keystore xxx.jks -signedjar xxx_signed.apk xxx.apk alias_key 注：最后一个参数是 keyalias，也就是该签名文件的别名。 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-03-13 14:11:48 更新 "},"Development/Algorithm.html":{"url":"Development/Algorithm.html","title":"Algorithm","keywords":"","body":"[TOC] Algorithm（算法）/ˈælɡərɪðəm/ General Coding In-order / Pre-order / Post-order traversal（前序、中序、后序遍历） Greedy（贪婪） Recursion / Backtrace（递归、回溯） Breadth-first search（广度优先搜索） Depth-first search（深度优先搜索） Divide and Conquer（分而治之） Dynamic Programming（动态规划） Binary Search（二分查找） Graph（图） 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-11 12:12:33 更新 "},"Development/Assembly.html":{"url":"Development/Assembly.html","title":"Assembly","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Assembly（汇编） X86 gcc x86 Assembly Quick Reference (\"Cheat Sheet\") Instructions（指令） Stack Frame（栈帧） Constants, Registers, Memory（常量，寄存器，内存） Registers（寄存器） Common Errors（常见错误） Linux Linux 进程内存布局 [TOC] Assembly（汇编） X86 gcc x86 Assembly Quick Reference (\"Cheat Sheet\") gcc x86 Assembly Security-Course/PC-Assembly-Language.pdf Instructions（指令） Mnemonic（助记符） Purpose（用途） Examples（示例） mov src,dest Move data between registers, load immediate data into registers, move data between registers and memory. mov $4,%eax # Load constant into eax mov %eax,%ebx # Copy eax into ebx mov %ebx,123 # Copy ebx to memory address 123 push src Insert a value onto the stack. Useful for passing arguments, saving registers, etc. push %ebp pop dest Remove topmost value from the stack. Equivalent to \"mov (%esp),dest; add $4,%esp\" pop %ebp call func Push the address of the next instruction and start executing func. call print_int ret Pop the return program counter, and jump there. Ends a subroutine. ret add src,dest dest=dest+src add %ebx,%eax # Add ebx to eax mul src Multiply eax and src as unsigned integers, and put the result in eax. High 32 bits of product go into eax. mul %ebx #Multiply eax by ebx jmp label Goto the instruction label:. Skips anything else in the way. jmp post_mem mov %eax,0 # Write to NULL! post_mem: # OK here... cmp a,b Compare two values. Sets flags that are used by the conditional jumps (below). WARNING: compare is relative to last argument, so jl jumps if b cmp $10,%eax jl label Goto label if previous comparison came out as less-than. Other conditionals available are: jle (je (==), jge (>=), jg (>), jne (!=), and many others. jl loop_start # Jump if eax Stack Frame（栈帧） (example without %ebp or local variables) Contents off esp caller's variables 12(%esp) Argument 2 8(%esp) Argument 1 4(%esp) Caller Return Address 0(%esp) my_sub: # Returns first argument mov 4(%esp), %eax ret (example when using %ebp and two local variables) Contents off ebp off esp caller's variables 16(%ebp) 24(%esp) Argument 2 12(%ebp) 20(%esp) Argument 1 8(%ebp) 16(%esp) Caller Return Address 4(%ebp) 12(%esp) Saved ebp 0(%ebp) 8(%esp) Local variable 1 -4(%ebp) 4(%esp) Local variable 2 -8(%ebp) 0(%esp) my_sub2: # Returns first argument push %ebp # Prologue mov %esp, %ebp mov 8(%ebp), %eax mov %ebp, %esp # Epilogue pop %ebp ret Constants, Registers, Memory（常量，寄存器，内存） Constants MUST be preceeded with $. $12 means decimal 12; $0xF0 is hex. $some_function is the address of the first instruction of the function. WARNING: a bare \"12\", \"0xF0\", or \"some_function\" dereferences the expression like it was a pointer! Registers MUST be preceeded with %. %eax means register eax. Memory access (use register as pointer): (%esp). Same as C \"esp\". Memory access with offset (use register + offset as pointer): 4(%esp). Same as C \"(esp+4)\". Memory access with scaled index (register + another register scale): (%eax, %ebx, 4). Same as C \"(eax+ebx*4)\". Registers（寄存器） %esp is the stack pointer %ebp is the stack frame pointer Return value in %eax Arguments are on the stack Free for use (no save needed): %eax, %ebx, %ecx, %edx Must be saved: %esp, %ebp, %esi, %edi Common Errors（常见错误） Segfault on innocent-looking code. Do you need to add \"$\" in front of a constant? Did you clean up the stack properly? Linux Linux 进程内存布局 +——————————————+ 0xFFFFFFFF (high address) | kernel space | 1GB/4GB +——————————————+ 0xC0000000 == TASK_SIZE | stack | +——————————————+字节序 little-endian：低字节在前，32比特值B3B2B1B0 +——+——+——+——+ |B0|B1|B2|B3| +——+——+——+——+ low —————> high address 栈帧（stack frame）：函数调用数据结构单元 +———————————————————————-+ caller’s stack pointer (old %esp) | arguments | | +———————————————————————-+ | | return address | (old %eip) v +———————————————————————-+ caller’s sf (old %ebp) +———————————————————————-+ | local variables | +————————————————————————+ | | caller调用者；callee被调用者，即子函数 arguments：子函数参数，调用前入栈 return address： 子函数调用前将待执行下一条指令地址保存在返回地址中，待函数调用结束后，返回到调用者继续执行 eip 指令指针指向下一条指令地址 stack frame pointer 栈帧指针指向调用者的栈帧基址ebp ebp 基址指针指向栈帧底（高地址） esp 栈指针指向栈顶（低地址） e 表示32位，% 表示寄存器 caller（调用者）规则： 子函数参数入栈，从右向左 call指令，将下一条指令地址入栈（push %eip），并无条件跳转 子函数返回，返回值在eax中 callee（被调用者）规则： 保存caller的栈基址，设定callee新的栈基址为当前栈指针（push %ebp; mov %esp, %ebp） 为局部变量分配栈空间（sub 123,%esp） 执行函数，结果保存在eax中 执行leave复合指令，清除当前栈帧，恢复到调用者栈帧（mov %ebp, %esp; pop %ebp） 执行ret指令（pop %eip） Security-Course/buffer-overflow-1.md - 缓冲区溢出：原理与实验 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-21 22:59:44 更新 "},"Development/Bash.html":{"url":"Development/Bash.html","title":"Bash","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 sh 生成可执行文件 Shell遍历目录及其子目录中的所有文件 获得当前目录，上级目录，文件夹名 循环计算2-100的偶数和 判断文件后缀 cmd命令里的路径包含空格的解决方法 在一行执行多条命令 使用sed替换字符串中的多个字符 将命令的结果作为下一个命令的参数 find 命令使用技巧 SSH 连接、远程上传下载文件 脚本遍历文件夹把md转成html 遍历带空格的文件名 判断文件后缀名 shell获取时间字符串 EOF 的用法 tee 命令 grep 和 find 忽略大小写 grep 命令 terminal 终端删除历史命令记录 curl 获取请求链接的 code curl 获取网页内容 vim 撤销和恢复撤销快捷键 figlet [TOC] sh 生成可执行文件 在终端为文件添加可执行权限： chmod +x file_sh Shell遍历目录及其子目录中的所有文件 新建一个shell文件 $ vi traveDir.sh 输入以下代码 #! /bin/bash function read_dir(){ for file in `ls $1` #注意此处这是两个反引号，表示运行系统命令 do if [ -d $1\"/\"$file ] #注意此处之间一定要加上空格，否则会报错 then read_dir $1\"/\"$file else #在此处处理文件即可 file_path=\"$1/$file\" echo ${file_path} fi done } #读取第一个参数 read_dir $1 执行指令 $ sh traveDir.sh DIR_NAME 获得当前目录，上级目录，文件夹名 #当前目录，或用 `pwd` $PWD #上级目录 dname=$(dirname \"$PWD\") #当前文件(夹)名 basename '$PWD' 循环计算2-100的偶数和 使用for循环和 let #!/bin/sh SUM=0 for (( i=0; i 注意:使用let命令可以执行一个或者多个算术表达式，其中的变量名无需使用$符号。如果表达式中含有空格或者其他特殊字符，则必须将其引用起来。 使用for循环和 $((…))运算 #!/bin/sh SUM=0 for (( i=0; i 注意:使用$((…))这种形式进行算术写法比较自由，无需对运算符和括号进行转义处理，可以使用松散或者紧凑的格式来书写。 使用带有步长的for循环 #!/bin/sh SUM=0 for i in {0..100..2} do SUM=$(( $SUM + i )) done echo $SUM 使用while循环 #!/bin/sh #定义初始化变量 SUM=0 i=0 # 开始while循环 while [[ \"$i\" -le 100 ]] do SUM=$(( $SUM + i )) i=$((i+2)) done echo $SUM Shell脚本计算2-100的偶数和 - Learning - CSDN博客 判断文件后缀 file_suffix=${file_path##*.} if [ ${file_suffix} = 'gif' ] then echo 'gif' else echo 'other' fi cmd命令里的路径包含空格的解决方法 解决方法很简单：将路径加上双引号 \"/user/iHTC boy/bash/\" 在一行执行多条命令 分三种情况： 1、&& 举例： lpr /tmp/t2 && rm /tmp/t2 第2条命令只有在第1条命令成功执行之后才执行。当 && 前的命令 lpr /tmp/t2 成功执行后 rm /tmp/t2 才执行，根据命令产生的退出码判断是否执行成功（0成功，非0失败）。 2、|| 举例： cp /tmp/t2 /tmp/t2.bak || rm /tmp/t2 只有||前的命令cp /tmp/t2 /tmp/t2.bak执行不成功（产生了一个非0的退出码）时，才执行后面的命令。 3、; 举例： cp /tmp/t2 /tmp/t2.bak; echo \"hello world\" 顺序执行多条命令，当;号前的命令执行完（不管是否执行成功），才执行;后的命令。 shell学习笔记（1）Linux下在一行执行多条命令 - KoreaSeal - 博客园 使用sed替换字符串中的多个字符 // 管道： sed 's/a/A/g' test.txt | sed 's/1/23/g' > test2.txt // -e选项: sed -e 's/a/A/g' -e 's/l/23/g' test.txt > test2.txt // ;分号： sed 's/a/A/g; s/1/23/g' test.txt > test2.txt 如果想在原文件直接替换字符，则需要用 -i 参数辅助： sed -i '' 's/a/A/g; s/1/23/g' test.txt > test2.txt 将命令的结果作为下一个命令的参数 符号：```` 名称：反引号，上分隔符 位置：反引号（`）这个字符一般在键盘的左上角，数字1的左边，不要将其同单引号（’）混淆 作用：反引号括起来的字符串被shell解释为命令行，在执行时，shell首先执行该命令行，并以它的标准输出结果取代整个反引号（包括两个反引号）部分 使用：可以用于把结果作为多个参数之一的需求 举例： $ echo `date` 2019年10月18日 星期五 18时04分08秒 CST $() 效果同: ```` 命令：xargs xargs 是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。它把一个数据流分割为一些足够小的块，以方便过滤器和命令进行处理。通常情况下，xargs从管道或者stdin中读取数据，但是它也能够从文件的输出中读取数据。 xargs的默认命令是echo，这意味着通过管道传递给xargs的输入将会包含换行和空白，不过通过xargs的处理，换行和空白将被空格取代。 $ date | xargs echo Thu Mar 7 21:47:12 CST 2013 管道与xargs的区别： 管道是实现“将前面的标准输出作为后面的标准输入” xargs是实现“将标准输入作为命令的参数” find命令的 -exec 参数 xargs：通过缓冲方式并以前面命令行的输出作为参数，随后的命令调用该参数 若忽略 xargs 的 options 来看的话, cm1 | xargs cm2 可以单纯看成: cm2 cm1 因此, find .... | xargs rm 也可作 rm find ... 来处理. 然而, 若 find 的结果太多, 可能会超过rm 可能接受的最大argument数量而失败. xargs优点：由于是批处理的，所以执行效率比较高（通过缓冲方式） xargs缺点：有可能由于参数数量过多（成千上万），导致后面的命令执行失败 若换成 find .... -exec rm {} \\; 的话, 因为rm 是\" 逐个 \" item 去处理的, 则无此忧虑 将Linux命令的结果作为下一个命令的参数 - permike的专栏 - CSDN博客 find 命令使用技巧 利用 find 命令找到当前目录下所有.m文件，并且把文件名作为参数，使用genstrings生成本地化语言内容 find . -name \\*.m | xargs genstrings -o en.lproj 查找/Users/iHTCboy/Documents目录下所有 .md 文件内容含有 https://ihtcboy.com 的文件输出文件的全路径： find /Users/iHTCboy/Documents -type f -name \"*.md\" -exec grep -l \"https://ihtcboy.com\" {} \\; 因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令 -exec ./text.sh {} \\; 当然，也可以用 xargs 命令并接： find /Users/iHTCboy/Documents -type f -name \"*.md\" | xargs grep -l \"https://ihtcboy.com\" 搜索文件夹下文件并替换字符串： find /Users/iHTCboy/Documents -type f -name \"*.md\" -exec sed -i '' 's/htc/iHTCboy/g; s/ihtc.cc/iHTCboy.com/g' {} \\; 注：sed 替换如果含反斜杠（/），可以改为冒号（:）是分隔符，而不是使用默认的反斜杠（/）。示例：'s:htc:iHTCboy:g; s:ihtc.cc:iHTCboy.com:g' find命令_Linux find 命令用法详解：在指定目录下查找文件 SSH 连接、远程上传下载文件 安装 SSH(Secure Shell) 服务以提供远程管理服务： sudo apt-get install ssh SSH 远程登入 Ubuntu 机 ： $ssh username@192.168.0.1 将 文件/文件夹 从远程 Ubuntu 机拷至本地(scp) ： scp @: $scp root@127.0.0.1:~/test.txt ~/Desktop/test.txt 将 文件/文件夹 从本地拷至远程 Ubuntu 机(scp) ： scp @: $scp -r localfile.txt username@192.168.0.1:/home/username/ 注：文件夹操作 上传/下载文件夹操作与文件操作类似，只需加入参数 -r。 使用SSH传输文件/文件夹 - bedisdover的博客 - CSDN博客 脚本遍历文件夹把md转成html #!/bin/bash function show() { cd $1 for i in `ls` do if [ -d \"$i\" ] then show \"$1/$i\" else filename=$(basename \"$1/$i\") #文件全名 extension=\"${filename##*.}\" #文件的后缀 filename1=\"${filename%.*}\" #不带后缀的文件名 if [ \"$extension\" = \"md\" ] then mv \"$1/$i\" \"$1/${filename1}.md\" fi fi done cd .. } show $1 exit 0 linux shell脚本遍历文件夹把md转成html - zergling9999 - 博客园 find 命令： IFS=$'\\n' for n in `find . -name \"*.md\" -o -name \"*.css\" -o -name \"*.css\" -o -name \"*.js\"`; do something done 遍历带空格的文件名 shell的域分隔符即(IFS)，默认是空格回车和tab，所以这里需要指定IFS，并在循环执行前解析 方法1：IFS=$'\\n' OLDIFS=\"$IFS\" IFS=$'\\n' something IFS=\"$OLDIFS\" 方法2： 使用read命令 find \"$path\" -type f -name \"*.html\" | while read i do echo \"$i\" done 方法3： 替换空格执行后，在还原空格： for f in `ls ./ | tr \" \" \"\\?\"` 在变量里面了可以直接替换回来 f=`tr \"\\?\" \" \" Linux shell脚本 遍历带空格的文件名 - google4y - 博客园 嵌套for in循环组合cat方式文件中包含空格问题 - 陈浩然201 - 博客园 判断文件后缀名 如果文件是 .css文件 或 .js文件，则进行处理： file=$1 if [ \"${file##*.}\"x = \"css\"x ]||[ \"${file##*.}\"x = \"js\"x ];then do something fi 注意： 1> 提取文件后缀名： ${file##*.}，##是贪婪操作符，从左至右匹配，匹配到最右边的.号，移除包含.号的左边内容。 2> 是=，而且其两边有空格，如果没有空格，会报错 3> 多加了x，是为了防止字符串为空时报错。 shell提取文件后缀名，并判断其是否为特定字符串 - Hellovictoria的专栏 shell获取时间字符串 In bash ( # put current date as yyyy-mm-dd in $date date=$(date '+%Y-%m-%d') # put current date as yyyy-mm-dd HH:MM:SS in $date date=$(date '+%Y-%m-%d %H:%M:%S') # print current date directly echo $(date '+%Y-%m-%d') bash - YYYY-MM-DD format date in shell script - Stack Overflow EOF 的用法 EOF是（END Of File）的缩写，表示自定义终止符。既然自定义，那么EOF就不是固定的，可以随意设置别名。 用法： 几个特殊符号: ：输入重定向 > ：输出重定向 >> ：输出重定向,进行追加,不会覆盖之前内容 ：标准输入来自命令行的一对分隔号的中间内容 macOS 终端： ➜ ~ cat test heredoc> hello heredoc> EOF test hello 的作用是在命令执行过程中用户自定义输入，它类似于起到一个临时文件的作用，只是比使用文件更方便灵活。 示例： #!/bin/bash cat shell基础之EOF的用法weixin_30666943的博客-CSDN博客警告:立即文档在第 3 行被文件结束符分隔 (需要 `-eof tee 命令 tee命令用于将数据重定向到文件，另一方面还可以提供一份重定向数据的副本作为后续命令的stdin。简单的说就是把数据重定向到给定文件和屏幕上。 tee (选项)(参数) -a：向文件中重定向时使用追加模式； -i：忽略中断（interrupt）信号。 注：存在缓存机制，每1024个字节将输出一次。若从管道接收输入数据，应该是缓冲区满，才将数据转存到指定的文件中。若文件内容不到1024个字节，则接收完从标准输入设备读入的数据后，将刷新一次缓冲区，并转存数据到指定文件。 示例： # ls | tee out.txt | cat -n 1 1.sh 2 1.txt 3 2.txt grep 和 find 忽略大小写 grep 使用 -i 参数来忽略大小写 grep -i 'xxxXXX' filePath find 使用 -iname参数来忽略大小写： find filesPath -iname 'xxxXXX' grep 命令 从文件内容查找匹配指定字符串的行： $ grep \"查找的字符串\" 文件名 从文件内容查找与正则表达式匹配的行： $ grep –e \"正则表达式\" 文件名 查找时不区分大小写： $ grep –i \"查找的字符串\" 文件名 查找匹配的行数： $ grep -c \"查找的字符串\" 文件名 从文件内容查找不匹配指定字符串的行： $ grep –v \"查找的字符串\" 文件名 查找所有扩展名为.md的文本文件，并找出包含\"iHTCboy\"的行 find / -type f -name \"*.md\" | xargs grep \"iHTCboy\" terminal 终端删除历史命令记录 $history -c $rm ~/.bash_history curl 获取请求链接的 code 获取 header： # -I, --head Show document info only curl -I https://www.iHTCboy.com # -i, --include Include protocol response headers in the output curl -i https://www.iHTCboy.com 示例： ➜ ~ curl -I https://www.iHTCboy.com HTTP/2 301 server: GitHub.com content-type: text/html location: https://ihtcboy.com/ x-github-request-id: 3DC6:4F98:13138DC:178B238:5F1AB9DF accept-ranges: bytes date: Fri, 24 Jul 2020 10:37:38 GMT via: 1.1 varnish age: 19 x-served-by: cache-hkg17929-HKG x-cache: HIT x-cache-hits: 1 x-timer: S1595587059.754877,VS0,VE0 vary: Accept-Encoding x-fastly-request-id: a08a1f5dfc941ccebbe9e3fe05497c34d91470c0 content-length: 162 只获取 code： # -L, --location Follow redirects curl -s -o /dev/null -LI -w \"%{http_code}\\n\" http://www.iHTCboy.com curl -LI http://www.iHTCboy.com -o /dev/null -w '%{http_code}\\n' -s 示例： ➜ ~ curl -s -o /dev/null -LI -w \"%{http_code}\\n\" http://www.iHTCboy.com 200 Getting curl to output HTTP status code? - Super User -I -I参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。 -L -L参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。 -o -o参数将服务器的回应保存成文件，等同于wget命令。 -s -s参数将不输出错误和进度信息。 curl 的用法指南 - 阮一峰的网络日志 curl 获取网页内容 curl -sL http://www.iHTCboy.com 2>&1 | grep -Eoi '(.+?)' How to grep the output of cURL? vim 撤销和恢复撤销快捷键 u 是撤销刚才做的动作 ctrl+r 是恢复刚才撤销的动作 figlet brew instal figlet or npm install -g figlet-cli FIGlet初识 | Aotu.io「凹凸实验室」 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-30 23:49:48 更新 "},"Development/C_C++.html":{"url":"Development/C_C++.html","title":"C_C++","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 函数属性 attribute((constructor))和attribute((destructor)) DBL_EPSILON 和 FLT_EPSILON [TOC] 函数属性 attribute((constructor))和attribute((destructor)) 1）函数属性功能 __attribute__ ((constructor))：会使函数在 main()函数之前执行 __attribute__ ((destructor))：会使函数在 main()函数之后执行 2）功能范围 函数属性__attribute__((constructor))和__attribute__((destructor))在可执行文件或者库文件里都可以生效 3）与全局变量比较 全局变量对象的构造函数和析构函数分别在__attribute__((constructor))和__attribute__((destructor))标志的函数之前调用。 4）PRIORITY 优先级 __attribute__((constructor(PRIORITY))) __attribute__((destructor(PRIORITY))) __attribute__((constructor)) 按照优先级小到大执行， __attribute__((destructor(PRIORITY))) 则是从大到小执行。 注意： 1、可执行程序或库文件都可以使用此属性修饰函数 2、同一个可执行程序或库文件允许多个函数被修饰，执行顺序由代码编写顺序或编译链接顺序有关 函数属性attribute((constructor))和attribute((destructor)) - tianmo2010的专栏 DBL_EPSILON 和 FLT_EPSILON 主要用于单精度和双精度的比较当中： double a = 0.5; if (a == 0.5) { //正确 x++; } double b = sin(M_PI / 6.0); if (b == 0.5) { //可能错误 x++; } 第一个比较正确，第二个可能正确也可能错误，b==0.5的结果取决于处理器、编译器的版本和设置。比如 Visual C++ 2010 编译器编译后运行b的值为0.49999999999999994 一种正确的比较方法应该是这样的： double b = sin(M_PI / 6.0); if (fabs(b - 0.5) EPSILON 是最小误差。如果整数值减去浮点数值误差低于DBL_EPSILON，则说明该数可以近似看成整数，否则则是浮点数。（ fabs()函数是一个求绝对值的函数） 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-08-08 18:31:22 更新 "},"Development/C-Sharp.html":{"url":"Development/C-Sharp.html","title":"C#","keywords":"","body":"[TOC] C 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-09-08 21:58:02 更新 "},"Development/ComputerBasics.html":{"url":"Development/ComputerBasics.html","title":"ComputerBasics","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Binary（二进制） 为什么 0.1 + 0.2 = 0.300000004 字符编码 字节顺序（大小端序） Binary（二进制） 为什么 0.1 + 0.2 = 0.300000004 // 加法 0.1 + 0.2 = 0.30000000000000004 0.1 + 0.7 = 0.7999999999999999 0.2 + 0.4 = 0.6000000000000001 // 减法 0.3 - 0.2 = 0.09999999999999998 1.5 - 1.2 = 0.30000000000000004 // 乘法 0.8 * 3 = 2.4000000000000004 19.9 * 100 = 1989.9999999999998 // 除法 0.3 / 0.1 = 2.9999999999999996 0.69 / 10 = 0.06899999999999999 // 比较 0.1 + 0.2 === 0.3 // false (0.3 - 0.2) === (0.2 - 0.1) // false 十进制到二进制的转换导致的精度问题！C/C++,Java,Javascript中，准确的说：“使用了IEEE 754浮点数格式”来存储浮点类型(float 32, double 64)的任何编程语言都有这个问题！ console.log('0.1 的二进制是：' + 0.1.toString(2)); console.log('0.2 的二进制是：' + 0.2.toString(2)); \"0.1 的二进制是：0.0001100110011001100110011001100110011001100110011001101\" \"0.2 的二进制是：0.001100110011001100110011001100110011001100110011001101\" 两者相加： 0.01001100110011001100110011001100110011001100110011001100 转换成10进制之后得到： 0.30000000000000004 为什么 0.1 + 0.2 = 0.300000004 - 面向信仰编程 解决JS浮点数运算结果不精确的Bug 抓住数据的小尾巴 - JS浮点数陷阱及解法 - 知乎 一个函数让你看懂 'Why 0.1+0.2!=0.3' 字符编码 字符编码笔记：ASCII，Unicode 和 UTF-8 - 阮一峰的网络日志 了解ASCII、gb系列、Unicode、UTF-8的区别 InputField 限制字数_yangchunnoodles的博客-CSDN博客 字节顺序（大小端序） 字节顺序，又称端序或尾序（英语：Endianness），在计算机科学领域中，指电脑内存中或在数字通信链路中，组成多字节的字的字节的排列顺序。 例如假设上述变量x类型为int，位于地址0x100处，它的值为0x01234567，地址范围为0x100~0x103字节，其内部排列顺序依赖于机器的类型。 大端法从首位开始将是：0x100: 0x01, 0x101: 0x23,..。 而小端法将是：0x100: 0x67, 0x101: 0x45,.. 字节顺序 - 维基百科 字节序 - FantasticLBP/knowledge-kit 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-04-10 23:10:33 更新 "},"Development/Cross-Platform.html":{"url":"Development/Cross-Platform.html","title":"Cross-Platform","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Flutter 安装 更新 Create a Flutter app 运行 进阶资料 Dart React Native（RN） 资源 Font（字体） [TOC] Flutter Flutter - Beautiful native apps in record time Flutter 中文社区 安装 Install - Flutter macOS install git clone https://github.com/flutter/flutter.git 根据需要切换选择分支，比如用下面的参数获得稳定版本： git clone https://github.com/flutter/flutter.git -b stable --depth 1 配置 flutter 的 PATH 环境变量： 修改 .bash_profile (如果安装了oh-my-zsh就添加到 .zshrc) export PATH=[克隆项目的目录]/flutter/bin:$PATH 注：验证 flutter 命令是否可用，可以执行下面的命令检测：which flutter 开发二进制文件预下载（可选操作）: flutter 命令行工具会下载不同平台的开发二进制文件，如果需要一个封闭式的构建环境，或在网络可用性不稳定的情况下使用等情况，你可能需要通过下面这个命令预先下载 iOS 和 Android 的开发二进制文件： flutter precache 注：或者只预下载某个平台 flutter precache --ios，更多使用方式，请使用 flutter help precache 命令查看。 运行Flutter的环境检查： 查看当前环境是否需要安装其他的依赖（如果想查看更详细的输出，增加一个 -v 参数即可）： flutter doctor Android 环境： 1、下载并安装 Android Studio。 2、运行 Android Studio，并进入 Android Studio Setup Wizard(Android Studio 设置向导)，这会安装最新的 Android SDK， Android SDK Platform-Tools 以及 Android SDK Build-Tools，这些都是在开发 Android Flutter 应用时所需要的。 brew cask install android-platform-tools 注意： flutter 工具使用了 Google Analytics 来对基本使用情况和崩溃报告进行匿名的统计。这些数据用来帮助改善 Flutter 工具。 在第一次运行或者任何涉及到 flutter config 的信息都不会进行发送，所以你可以在发送分析数据之前选择禁止分析数据的统计。要禁用这一功能，只需要输入 flutter config --no-analytics 即可，想要查看当前设置使用命令 flutter config。如果你禁用了统计信息发送，这次的禁用行为会被记录发送，其他任何信息，以及未来都不会再有任何数据会被记录。 自 1.19.0 dev 版开始，dart 命令就直接包含在 Flutter SDK 里了，这样可以更轻松的运行 Dart 命令行应用。 在 macOS、Linux 和 chromeOS 的命令可以帮助你查看你的 flutter 和 dart 命令是否位于同一目录以确保兼容。部分 Windows 系统也支持类似 where 的命令： $ which flutter dart /path-to-flutter-sdk/bin/flutter /path-to-flutter-sdk/bin/dart 注：了解更多关于 dart 命令的内容，可以在命令行运行 dart -h，或者在 Dart 文档查看 dart tool 了解更多。 更新 Upgrading Flutter - Flutter 升级你的 Flutter 版本 flutter upgrade Create a Flutter app flutter create myApp 运行 flutter run Release: flutter run --release 其它命令 切换到官方master开发主分支： flutter channel master 发布 Android apk flutter build apk flutter build appbundle 方法二：打开 Android Studio 项目并选择 Build > Generate Signed Bundle or APK 打包并发布 Android 应用 - Flutter 中文文档 发布应用 | Android 开发者 iOS ipa flutter build ipa 方法二：打开 Xcode 项目并选择 Product > Archive 打包并发布 iOS 应用 - Flutter 中文文档 - Flutter 中文资源 国际化 Flutter Intl - Visual Studio Marketplace Internationalizing Flutter apps - Flutter Flutter 应用里的国际化 - Flutter 中文文档 常见问题 键盘弹起时遮挡输入框 1、在TextFiled外面加Padding MediaQuery.of(context).viewInsets.bottom是键盘弹起时、获取到的键盘高度： Padding( padding: EdgeInsets.only( bottom: MediaQuery.of(context).viewInsets.bottom ), child: TextField( controller: _controller, ) ) 2、在 main widget 外加 SingleChildScrollView 及其属性 reverse: true body 和 SingleChildScrollView 之间的代码作用是：键盘弹出时，点击页面空白部分、键盘会收起： body: GestureDetector( behavior: HitTestBehavior.translucent, onTap: () { FocusScope.of(context).requestFocus(FocusNode()); }, child: SingleChildScrollView( reverse: true, child: ...... ) ) 3、在Scaffold 里添加属性 resizeToAvoidBottomInset: false return Scaffold( resizeToAvoidBottomInset: false, ..... ) 常见错误 问题： Dart Error: Can't load Kernel binary: Invalid kernel binary format version. 原因: flutter 和 engine 版本不一致 解决方案: 删除 flutter 目录下的 bin/cache 文件夹 然后运行 flutter doctor 或 flutter upgrade 运行后在重启 问题：cp: flutter/bin/cache/artifacts/engine/ios/Flutter.podspec: No such file or directory 解决方案：flutter build ios 问题：Android Studio 运行flutter卡在: Running Gradle task 'assembleDebug'... 原因: Gradle的Maven仓库在国外，下载更新速度非常慢 解决方案：使用阿里云的镜像地址 flutter项目中的 android/build.gradle 文件： buildscript { ext.kotlin_version = '1.3.50' repositories { // 这里做了修改，使用国内阿里的代理 // google() // jcenter() maven { url 'https://maven.aliyun.com/repository/google' } maven { url 'https://maven.aliyun.com/repository/jcenter' } maven { url 'http://maven.aliyun.com/nexus/content/groups/public' } } dependencies { classpath 'com.android.tools.build:gradle:4.1.0' classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\" } } allprojects { repositories { //修改的地方 //google() //jcenter() maven { url 'https://maven.aliyun.com/repository/google' } maven { url 'https://maven.aliyun.com/repository/jcenter' } maven { url 'http://maven.aliyun.com/nexus/content/groups/public' } } } 修改本地flutter安装目录中的flutter.gradle文件 flutter\\packages\\flutter_tools\\gradle\\flutter.gradle ： buildscript { repositories { // 这里做了修改，使用国内阿里的代理 // google() // jcenter() maven { url 'https://maven.aliyun.com/repository/google' } maven { url 'https://maven.aliyun.com/repository/jcenter' } maven { url 'http://maven.aliyun.com/nexus/content/groups/public' } } dependencies { classpath 'com.android.tools.build:gradle:4.1.0' } } 问题：Exception in thread \"main\" java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlSchema 解决方案：执行 flutter doctor --android-licenses 时报错。更改为 sudo flutter doctor --android-licenses 即可。 进阶资料 flutter/samples: A collection of Flutter examples and demos. flutter/gallery: Flutter Gallery is a resource to help developers evaluate and use Flutter iOS Developer Learning Flutter Flutter实战 | 杜文 Flutter实战入门 | 老孟 Dart Dart programming language | Dart Dart 中文文档 | Dart Dart packages React Native（RN） 资源 Font（字体） Fonts - Google Fonts Iconfont - 阿里巴巴矢量图标库 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-07-11 23:24:43 更新 "},"Development/DataBase.html":{"url":"Development/DataBase.html","title":"DataBase","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 SQL (Structured Query Language，结构化查询语言) ACID 什么是WAL？ MySQL macOS 终端执行 MySQL 命令时，提示 command not found SQLite 修改 sqlite 表的某个列名 常用语法 Redis mac上安装使用 Redis SQL (Structured Query Language，结构化查询语言) ACID ACID，是指数据库管理系统在写入或更新资料的过程中，为保证事务是正确可靠的，所必须具备的四个特性：原子性、一致性、隔离性、持久性。 在数据库系统中，一个事务是指：由一系列数据库操作组成的一个完整的逻辑过程。 维基百科 例如银行转帐，从原账户扣除金额，以及向目标账户添加金额，这两个数据库操作的总和，构成一个完整的逻辑过程，不可拆分。这个过程被称为一个事务，具有ACID特性。 Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。 Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。 Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括未提交读（Read uncommitted）、提交读（read committed）、可重复读（repeatable read）和串行化（Serializable）。 Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。 什么是WAL？ \"In computer science, Write-ahead logging (WAL) is a family of techniques for providing atomicity and durability (two of the ACID properties) in database systems.\" —— 维基百科 在计算机领域，WAL（Write-ahead logging，预写式日志）是数据库系统提供原子性和持久化的一系列技术。 维基百科：在计算机科学中，预写式日志是关系数据库系统中用于提供原子性和持久性的一系列技术。在使用WAL的系统中，所有的修改在提交之前都要先写入log文件中。 log文件中通常包括redo和undo信息。这样做的目的可以通过一个例子来说明，假设一个程序在执行某些操作的过程中机器掉电了。那么在机器掉电重启之后系统需要知道操作是成功了，还是只有部分成功或者是失败了（为了恢复状态）。如果使用了WAL，程序就可以检查log文件，并对突然掉电时计划执行的操作内容跟实际上执行的操作内容进行比较。在这个比较的基础上，程序就可以决定是撤销已做的操作还是继续完成已做的操作，或者是保持原样。 redo log 称为重做日志，每当有操作时，在数据变更之前将操作写入redo log，这样当发生掉电之类的情况时系统可以在重启后继续操作。 undo log 称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态。 MySQL MySQL 原本是一个开放源码的关系数据库管理系统，原开发者为瑞典的MySQL AB公司，该公司于2008年被Sun收购。2009年，甲骨文公司收购Sun公司，MySQL成为Oracle旗下产品。 维基百科 MySQL Home Page macOS 终端执行 MySQL 命令时，提示 command not found 由于 macOS 默认只能识别处在 /usr/local/bin 路径中的mysql命令。而安装的 mysql 在 macOS 安装的mysql的命令路径是在 /usr/local/mysql/bin/ 里面（可以使用命令查看某个命令所在路径，例如：which mysql），所以 mysql 相关的命令，默认只能在 /usr/local/mysql/bin/ 路径下生效。 如果直接使用连接mysql数据库的命令 mysql -u root -p，就会报： mysql: command not found的错误；或者想直接使用导出数据库的命令 mysqldump xxx的话，就会报mysqldump: command not found 的错误。 解决： 使用 ln -fs 软链接命令，将连接mysql数据库的路径映射到 /usr/local/bin 中： sudo ln -fs /usr/local/mysql/bin/mysql /usr/local/bin sudo ln -fs /usr/local/mysql/bin/mysqldump /usr/local/bin 当然，如果不想全局链接，/usr/local/mysql/bin/mysql -u root -p 直接执行也可以，就是麻烦吧了。 使用ln -fs命令，解决mac终端命令行 操作mysql时，提示command not found的问题 - 简书 SQLite SQLite 是遵守ACID的关系数据库管理系统，它包含在一个相对小的C程序库中。与许多其它数据库管理系统不同，SQLite不是一个客户端/服务器结构的数据库引擎，而是被集成在用户程序中。 SQLite遵守ACID，实现了大多数SQL标准。它使用动态的、弱类型的SQL语法。 维基百科 SQLite Home Page 漫谈 SQLite | 张不坏的博客 修改 sqlite 表的某个列名 ALTER TABLE \"MyTable\" RENAME COLUMN \"OldColumn\" TO \"NewColumn\"; How do I rename a column in a SQLite database table? - Stack Overflow 常用语法 1.修改表名称 ALTER TABLE 旧表名 RENAME TO 新表名 2.添加字段 ALTER TABLE 表名 ADD COLUMN 列名 数据类型 3.查询表结构 PRAGMA TABLE_INFO (表名) 4.更新列值 UPDATE \"表名\" SET \"列名\" = \"新值\"; 5.设置类型 VARCHAR(500); // 没有Bool值，用 INT 0 和 表示 INTEGER DEFAULT 0 Sqlite的使用 - 简书 Redis Redis是一个使用ANSI C编写的开源、支持网络、基于内存、分布式、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。在2013年5月之前，其开发由VMware赞助。 维基百科 Redis Home Page mac上安装使用 Redis 通过homebrew安装redis: $ brew install redis redis默认的配置文件redis.conf位于： /usr/local/etc 通过以下命令启动redis： $ redis-server /usr/local/etc/redis.conf 检测redis服务器是否启动： $ redis-cli ping pong #说明服务器运作正常。 关闭redis： 方法1 $ redis-cli ping Could not connect to Redis at 127.0.0.1:6379: Connection refused #说明确实已关闭 方法2 $ redis-cli shutdown 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-03-26 23:56:40 更新 "},"Development/DataStructure.html":{"url":"Development/DataStructure.html","title":"DataStructure","keywords":"","body":"[TOC] Data Structure（数据结构） /ˈstɹʌktʃɚ/ Array（数组） Stack / Queue （栈、队列） PriorityQueue (heap)（优先队列（堆）） LinkedList (single / double)（单链表、双链表） Tree / Binary Tree（树、二叉树） Binary Search Tree（二叉查找树） HashTable（哈希表） Disjoint Set（分离集，并查集） Trie（前缀树/字典树/单词查找树）/ˈtriː/ BloomFilter（布隆过滤器） LRU Cache（Least Recently Used，最近最少使用缓存机制） 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-11 21:59:00 更新 "},"Development/DesignPatterns.html":{"url":"Development/DesignPatterns.html","title":"DesignPatterns","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Design Patterns（设计模式） System（系统理论） CAP 理论 语言抽象 Programming（编程） 编程语言的抽象 数据的容器 数据的加工 加工流程的控制 流程的重用 OOP（Object-Oriented Programming，面向对象程序设计） [TOC] Design Patterns（设计模式） System（系统理论） CAP 理论 2000年7月，来自加州大学伯克利分校的 Eric Brewer 教授注 在 ACM PODC（Principles of Distributed Computing）会议上，首次提出了著名的CAP猜想注 。2年后，来自麻省理工学院的 Seth Gilbert 和 Nancy Lynch 从理论上证明了 Brewer教授 CAP 猜想的可行性注 ，从此，CAP 理论正式在学术上成为了分布式计算领域的公认定理，并深深地影响了分布式计算的发展。 CAP理论告诉我们，一个分布式系统不可能同时满足： 一致性（C：Consistency） 可用性（A：Availability） 分区容错性（P：Partition tolerance） 这三个基本需求，最多只能同时满足其中的两项。 分布式系统（distributed system）正变得越来越重要，大型网站几乎都是分布式的。分布式系统的最大难点，就是各个节点的状态如何保持一致。CAP理论是在设计分布式系统的过程中，处理数据一致性问题时必须考虑的理论。 CAP theorem - Wikipedia 分布式CAP定理，为什么不能同时满足三个特性？- CSDN博客 通俗易懂的理解CAP和BASE理论知识-CSDN博客 CAP 定理的含义 - 阮一峰的网络日志 CAP理论 | 一叶知秋 语言抽象 解放生产力的根源 - 抽象 抽象的层次 ⌃ | | FP 时代 | 程序员思考如何描述问题 | | OO 时代 | 程序员开始思考如何把问题抽象成对象和关系 | | GC/ARC 时代 | 程序员专注思考实现逻辑的步骤 | | C 时代 | 程序员需要思考如何管理内存 | | 汇编时代 | 程序员需要思考如何利用有限的寄存器 | ppts_for_idev2016/（王文槿）函数式的设计模式.pdf Programming（编程） 编程语言的抽象 计算机语言：描述了数据加工的流程 数据的容器 数据类型 变量和常量 多个(种)的数据：数组、Map、对象 数据的加工 赋值（将数据放入容器） 数学运算（加减乘除、取余） 逻辑运算（&&、||、!） 位运算（二进制处理的根本） 加工流程的控制 顺序执行：语句分隔符 分支执行：条件、循环语句 流程的重用 通过函数（方法）重用 通过类和对象重用 通过包（库）和扩展模块重用 OOP（Object-Oriented Programming，面向对象程序设计） 维基百科：面向对象程序设计是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。它可能包含数据、属性、代码与方法。对象则指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。 封装（Encapsulation） 继承（Inheritance） 多态（Polymorphism） 抽象（Abstraction） 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-07 15:34:43 更新 "},"Development/Game.html":{"url":"Development/Game.html","title":"Game","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Game 缩写 Game Engine Unity3D iOS 与 Unity 的交互 Unreal Engine (虚幻引擎) Cocos2d Game 缩写 缩写 全称 中文 ACT Action Game 动作游戏 AVG Adventure Game 冒险游戏 A-AVG/AAG Action Adventure Game 动作冒险游戏 ARG Alternate Reality Game 侵入式虚拟现实互动游戏 CAG Card Game 卡片类游戏 EDU Education Game 养成类游戏 FLY Fly Game 模拟飞行 FTG Fighting Game 格斗游戏 GAL Galgame 美少女游戏 LVG LoVe Game 恋爱养成游戏 MIX Mix Game 合成类游戏 MUD Multiple User Domain 多用户虚拟空间游戏，文字网络游戏的统称 PUZ Puzzle Game 益智类游戏 RAC Race Game 赛车类游戏 RTS Real-Time Strategy Game 即时战略游戏 RPG Role-playing Game 角色扮演游戏 A-RPG/ARPG Action Role-playing Game 动作角色扮演游戏 MMO-RPG Massively Multiplayer Online Role Playing Game 大型多人在线角色扮演游戏 S-RPG Strategy Role-playing Game 战略角色扮演游戏 SIM Simulation Game 模拟(经营)游戏 SLG Strategy Game 策略(战棋)游戏 SPG Sport Game 运动游戏 STG Shooting Game 射击游戏 TPS Third-Person Shooting Game 第三人称射击类 FPS First-Personal Shooting Game 第一人称视角射击游戏 TAB Table Game 桌面类游戏 TBS Turn-Based Strategy Game 回合制战略游戏 TBT Turn-Based Tactics 回合制战术游戏 TCG Trading Card Game 集换式卡牌游戏 Game Engine Unity3D iOS 与 Unity 的交互 iOS 与 Unity 的交互 - 掘金 之参数传递 - 简书 之界面跳转 - 简书 iOS与unity3D交互整合的那些事 - 简书 iOS与Unity3d交互 - 简书 iOS作为plugin集成到Unity - 知乎 Unreal Engine (虚幻引擎) Cocos2d 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-09-15 23:12:19 更新 "},"Development/Git.html":{"url":"Development/Git.html","title":"Git","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Github 上传超过100M的大文件 Git 默认不区分文件名大小写的坑 git 撤销本地所有未提交的更改 git 撤销本地已提交(commit)，或已推送远端(push)的更改 一步提交git变更 Git仓库完整迁移（含历史记录log） Sourcetree 更新git账号密码 git flow Alpha、Beta、RC、GA 版本的区别 git cherry-pick 使用 Adding an SSH key to your GitLab account .gitignore 规则 git子模块 fork后如何同步源的新更新内容？ [TOC] Github 上传超过100M的大文件 官方示例： Homebrew: brew install git-lfs git lfs install git lfs track \"*.psd\" git add .gitattributes There is no step three. Just commit and push to GitHub as you normally would. 使用示例： git add file.psd git commit -m \"Add design file\" git push origin master 注：.gitattributes文件是 git lfs用于记录那些文件要通过lfs上传的配置文件。 另： This repository is over its data quota. Purchase more data packs to restore access. 意思就是\"仓库超出限额，需要配置更多的额度\"，这个可以在自己GitHub个人设置里查看，默认只有1G的空间，更多空间需要按月收费。。。 Git Large File Storage Git 默认不区分文件名大小写的坑 配置 Git 使其对文件名大小写敏感 git config core.ignorecase false 本地大小写敏感，但是远端并不是，会造成远端有大写和小定的2个文件，详见： 解决 Git 默认不区分文件名大小写的问题 - 简书 git 撤销本地所有未提交的更改 git checkout . 后面有.点，表示全部文件撤销 git 撤销本地已提交(commit)，或已推送远端(push)的更改 如果你只想为之前的commit增加更多的改动，或者改变之前的提交信息，你应该使用： git reset --soft HEAD~ 会将你的改动保留在暂存区内(只是改变了HEAD的指向，本地代码不会变化)。或使用 git reset HEAD~ 回退上一次提交前，并且强制清除修改的内容： git reset --hard HEAD^ 如果已经提交到远程，就需要用本地覆盖远程，通过： git push origin master --force 强制提交当前版本号，以达到撤销版本号的目的。必须添加参数force进行强制提交，否则会提交失败，并报错（原因：本地项目版本号低于远端仓库版本号。）。 [译] 在Git中如何撤销上一次的commit(s)？ - 简书 一步提交git变更 function lazygit() { git add . git commit -a -m \"$1\" git push } git add, commit and push commands in one? - Stack Overflow Git仓库完整迁移（含历史记录log） 1). 从原地址克隆一份裸版本库。 git clone --bare git://github.com/username/project.git 2). 然后到新的 Git 服务器上创建一个新项目。 3). 以镜像推送的方式上传代码到新的 Git 服务器上。 cd project.git git push --mirror git@gitcafe.com/username/newproject.git 4). 删除本地代码 cd .. rm -rf project.git 5). 到新服务器上找到 Clone 地址，直接 Clone 到本地就可以了。 git clone git@gitcafe.com/username/newproject.git 这种方式可以保留原版本库中的所有内容。 第二种切换remote_url的方法更直接，直接更改.git/conf配置文件里的ip地址就行。但是需要一个一个分支push。 Git仓库迁移而不丢失log的方法 - fantaxy的空间_前庭 - ITeye博客 Sourcetree 更新git账号密码 删除Sourcetree 缓存文件(只需要删密码文件)，文件位置： Mac： ~/Library/Application Support/SourceTree Windows： C:\\Users\\USERNAME\\AppData\\Local\\Atlassian\\SourceTree 删除对应账号的文件后，重启Sourcetree，然后push或者pull代码的时候，就会自动弹框让重新输入账号和密码 Sourcetree 更新git账号密码 - u011562187的专栏 - CSDN博客 git flow install macOS: brew install git-flow-avh linux: apt-get install git-flow init git flow init feature git flow feature help git flow feature start xxx git flow feature finish xxx git flow feature publish xxx git flow feature pull origin xxx releases git flow release start 1.1.5 git flow release finish 1.1.5 git flow release publish 1.1.5 git flow release pull origin 1.1.5 hotfix git flow hotfix start xxx git flow hotfix finish xxx git-flow 备忘清单 git-flow 的工作流程 Alpha、Beta、RC、GA 版本的区别 Alpha：Alpha是内部测试版，一般不向外部发布，会有很多Bug，一般只有测试人员使用。除非你也是测试人员，否则不建议使用。alpha 是希腊字母的第一位，表示最初级的版本，alpha 就是α，beta 就是β，alpha 版就是比 beta 还早的测试版，一般都是内部测试的版本。 Beta：也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出，该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一些缺陷，需要经过多次测试来进一步修复。 RC：Release　Candidate 顾名思义! Candidate是候选人的意思，用在软件上就是候选版本。RC 就是发行候选版本。和Beta版最大的差别在于，Beta阶段会一直加入新的功能，但是到了RC版本，几乎就不会加入新的功能了，而主要着重于除错！RC版本是最终发放给用户的最接近正式版的版本，发行后改正bug就是正式版了，就是正式版之前的最后一个测试版。 GA：General Availability（一般可用性）正式发布的版本，在国外都是用GA来说明release 版本的。比如：Apache Struts 2 GA 就是 Apache Struts 2 首次发行稳定的版本，也就是官方开始推荐广泛使用的版本。 Release: 该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(R)。 RTM：Release to Manufacture 是给工厂大量压片的版本，内容跟正式版是一样的，不过 RTM 版也有出限制、评估版的。但是和正式版本的主要程序代码都是一样的。 OEM：是给计算机厂商随着计算机贩卖的，也就是随机版。只能随机器出货，不能零售。只能全新安装，不能从旧有操作系统升级。包装不像零售版精美，通常只有一面CD和说明书(授权书)。 RVL：号称是正式版，其实RVL根本不是版本的名称。它是中文版/英文版文档破解出来的。 EVAL：而流通在网络上的EVAL版，与“评估版”类似，功能上和零售版没有区别。 RTL：Retail(零售版) 是真正的正式版，正式上架零售版。在安装盘的i386文件夹里有一个eula.txt，最后有一行EULAID，就是你的版本。比如简体中文正式版是EULAID:WX.4_PRO_RTL_CN，繁体中文正式版是WX.4_PRO_RTL_TW。其中：如果是WX.开头是正式版，WB.开头是测试版。_PRE，代表家庭版；_PRO，代表专业版。 α、β、λ常用来表示软件测试过程中的三个阶段，α是第一阶段，一般只供内部测试使用；β是第二个阶段，已经消除了软件中大部分的不完善之处，但仍有可能还存在缺陷和漏洞，一般只提供给特定的用户群来测试使用；λ是第三个阶段，此时产品已经相当成熟，只需在个别地方再做进一步的优化处理即可上市发行。 Alpha、Beta、RC、GA版本的区别 - Rex - BlogJava 关于BETA、RC、ALPHA、Release、GA等版本号的意义 - 我的人生不甘于平庸！ - ITeye博客 git cherry-pick 使用 选择某一个分支中的一个或几个commit(s)来进行操作。 git cherry-pick :单独合并一个提交 git cherry-pick -x ：同上，不同点：保留原提交者信息。 Git从1.7.2版本开始支持批量cherry-pick，就是一次可以cherry-pick一个区间的commit。 git cherry-pick .. git cherry-pick ^.. git cherry-pick 使用指南 - 简书 Adding an SSH key to your GitLab account Generate ssh key use RSA:ssh-keygen -o -t rsa -b 4096 -C \"email@example.com\" 注：此命令会提示您输入存储密钥的位置和文件名。只需按enter使用默认值就可以。 成功后： The key's randomart image is: +---[RSA 4096]----+ | .o+ | |. +.o | | + = . | |o + * | |+. + o .S | |.+ o o.o | | * *.oo . | | o %oO .o | |..*+%*E= | +----[SHA256]-----+ Copy ssh public key macOS:pbcopy WSL / GNU/Linux (requires the xclip package): xclip -sel clip Git Bash on Windows: cat ~/.ssh/id_rsa.pub | clip Q&A 拉取代码时，报错： ```sh Cloning into 'htcproject'... /Users/iHTCboy/.ssh/config line 4: garbage at end of line; \"Enterprise\". fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 原因是 `config` 中包含非法的字符，可能是之前配置或者多个账号配置，Sourcetree生成等，可以直接清空内容或者删除文件即可。 ```sh ➜ git clone git@172.16.1.88:ios/iHTCboy/ftproject.git Cloning into 'ftproject'... The authenticity of host '172.16.1.88 (172.16.1.88)' can't be established. RSA key fingerprint is SHA256:aRCcbTE77qYN9jWV9vns6BG1yUs. Are you sure you want to continue connecting (yes/no)? 在第一次使用 SSH 连接 GitLab 的时候会有一个RSA密码指纹确认，输入yes接受即可，以后再连接也不会出现确认提示了。 .gitignore 规则 # 表示此为注释,将被Git忽略 *.a 表示忽略所有 .a 结尾的文件 !lib.a 表示但lib.a除外 /TODO 表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO build/ 表示忽略 build/目录下的所有文件，过滤整个build文件夹； doc/*.txt 表示会忽略doc/notes.txt但不包括 doc/server/arch.txt bin/: 表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件 /bin: 表示忽略根目录下的bin文件 /*.c: 表示忽略cat.c，不忽略 build/cat.c debug/*.obj: 表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj **/foo: 表示忽略/foo,a/foo,a/b/foo等 a/**/b: 表示忽略a/b, a/x/b,a/x/y/b等 !/bin/run.sh 表示不忽略bin目录下的run.sh文件 *.log: 表示忽略所有 .log 文件 config.php: 表示忽略当前路径的 config.php 文件 /mtk/ 表示过滤整个文件夹 *.zip 表示过滤所有.zip文件 /mtk/do.c 表示过滤某个具体文件 被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。 需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下： !*.zip !/mtk/one.txt 唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？ 想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：： /mtk/* !/mtk/one.txt 假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！ 注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！ ---------------------------------------------------------------------------------- 还有一些规则如下： fd1/* 说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略； /fd1/* 说明：忽略根目录下的 /fd1/ 目录的全部内容； /* !.gitignore !/fw/ /fw/* !/fw/bin/ !/fw/sf/ 说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。 git子模块 添加子模块 $ git submodule add https://github.com/ihtcboy/submodule.git submodule 查看子模块 $ git submodule (status) 更新项目内子模块到最新版本 $ git submodule update 更新子模块为远程项目的最新版本 $ git submodule update --remote 克隆包含子模块的项目 ```shell //初始化子模块 $ git submodule init //更新子模块 $ git submodule update * 递归克隆整个项目 * ```git git clone https://github.com/ihtcboy/submodule.git submodule --recursive 删除子模块 删除子模块文件夹： $ git rm --cached submodule $ rm -rf submodule 删除.gitmodules文件中相关子模块信息： [submodule \"submodule\"] path = submodule url = https://github.com/ihtcboy/submodule.git 删除.git/config中的相关子模块信息： [submodule \"submodule\"]： url = https://github.com/ihtcboy/submodule.git 删除.git文件夹中的相关子模块文件： $ rm -rf .git/modules/submodule fork后如何同步源的新更新内容？ 1.首先将别人的仓库添加到你的上游远程，通常命名为upstream（这个名字可以随意改，不要使用 `origin`）. ```git git remote add upstream url(表示原作者仓库) 2.用 git remote -v 可以看到一个origin是自己的，另外一个upstream原作者。 3.更新代码： git fetch upstream //去拉去原作者的仓库更新 git checkout master //切换到自己的master git merge upstream/master //merge或者rebase到你的master Git 只获取部分目录或文件的内容（稀疏检出） $ git init $ cd $ git remote add origin ssh://@ $ git config core.sparsecheckout true $ echo \"path1/\" >> .git/info/sparse-checkout $ echo \"path2/\" >> .git/info/sparse-checkout $ git pull origin master sparse-checkout 文件设置 子目录的匹配：如果目录名称前带斜杠，如/docs/，将只匹配项目根目录下的docs目录，如果目录名称前不带斜杠，如docs/，其他目录下如果也有这个名称的目录，如test/docs/也能被匹配。而如果写了多级目录，如docs/01/，则不管前面是否带有斜杠，都只匹配项目根目录下的目录，如test/docs/01/不能被匹配。 通配符 ““ (星号)，在 sparse-checkout 文件中，支持通配符 ““ 排除项 “!” (感叹号)在 sparse-checkout 文件中，也支持排除项 “!” 增加或删除 sparse-checkout 配置 $ git checkout master 或执行以下命令： $ git read-tree -mu HEAD 注：如果想关闭 sparse checkout，需要用一个”*“号替代其中的内容，然后执行 checkout 或 read-tree 命令。 Git只获取部分目录的内容（稀疏检出） git push 时出现错误：“remote: fatal: early EOF” 修改 .git 的本地 config 文件，在 core 中加入： compression = -1 或者直接执行： git config --add core.compression -1 core.compression An integer -1..9, indicating a default compression level. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If set, this provides a default to other compression variables, such as core.loosecompression and pack.compression. - From Git Manpage compression 是压缩的意思，从 clone 的终端输出就知道，服务器会压缩目标文件，然后传输到客户端，客户端再解压。取值为 [-1, 9]，-1 以 zlib 为默认压缩库，0 表示不进行压缩，1..9 是压缩速度与最终获得文件大小的不同程度的权衡，数字越大，压缩越慢，当然得到的文件会越小。 git-config(1) git错误：fatal: The remote end hung up unexpectedly fatal: The remote end hung up unexpectedly 提交多文件或大文件导致http postbuffer溢出，将postbuffer改大就可以了 git config http.postBuffer 524288000 Git --force & --force-with-lease --force : 使用本地分支的提交覆盖远端推送分支的提交。也就是说，如果其他人在相同的分支推送了新的提交，你的这一举动将“删除”他的那些提交！就算在强制推送之前先 fetch 并且 merge 或 rebase 了也是不安全的，因为这些操作到推送之间依然存在时间差，别人的提交可能发生在这个时间差之内。 --force-with-lease : 如果远端有其他人推送了新的提交，那么推送将被拒绝，这种拒绝和没有加 --force 参数时的拒绝是一样的。 Git 更安全的强制推送，--force-with-lease_walterlv - 吕毅-CSDN博客 Git error: RPC failed; 现象： 克隆项目时，如果项目很大，可能会出现错误： error: RPC failed; curl 56 Recv failure: Operation timed out fatal: The remote end hung up unexpectedly fatal: early EOF fatal: index-pack failed 原因： http缓存不够或者网络不稳定等。 解决方法： 查看当前配置命令 git config -l httpBuffer 缓冲区加大 git config --global http.postBuffer 524288000 git config --global https.postBuffer 524288000 设置压缩 git config --global core.compression -1 Git error: tag already exists Updates were rejected because the tag already exists in the remote. 解决： git pull --tags 覆盖本地存在的标签冲突: git pull --tags -f Travis CI 在项目的根目录中创建一个名为 .travis.yml 的文件: language: objective-c osx_image: xcode12.2 xcode_xcworkspace: iWuBi.xcworkspace xcode_scheme: iWuBi xcode_sdk: iphonesimulator14.0 podfile: Podfile Objective-c 或 Swift 项目，都是指定 objective-c 值，因为 Travis 也只使用 Xcode 命令行工具 xcodebuild 进行构建。 如果项目是 .xcodeproj 使用 xcode_project 来指定 Xcode 项目文件；如果使用 .xcworkspace 构建项目（CocoaPods 的项目），则需要将 xcode_project 参数替换为 xcode_workspace 并使用 .xcworkspace 文件作为值。 Travis CI - Test and Deploy with Confidence Building an Objective-C or Swift Project - Travis CI Travis CI - 项目持续集成好伴侣 - SwiftCafe 享受代码的乐趣 ObjC 中国 - 为 iOS 建立 Travis CI Travis CI 教程：入门 - 简书 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2022-09-12 10:55:50 更新 "},"Development/Go.html":{"url":"Development/Go.html","title":"Go","keywords":"","body":"[TOC] Go / Golang 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-09-08 21:58:39 更新 "},"Development/iOS.html":{"url":"Development/iOS.html","title":"iOS","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 CocoaPods Cocoapods 报错问题 Cocoapods 配置问题 SDWebImage SDWebImage 占位图是GIF处理 Xcode Xcode10 打SDK库失败 Xcode10：library not found for -lstdc++.6.0.9 临时解决 真机运行库 模拟器运行库 下一步 在UILabel的NSAttributedText中创建可点击的“链接”？ Link With Standard Libraries > YES Xcode 自定义快捷键 LLDB Xcode xip 快速解压缩安装 iOS iOS 处理器指令集架构 WKWebView如何清除缓存 Home Indicator 问题 iOS证书&签名 从App里用代码读取证书信息 通过Safari获取iOS设备真实UDID 自定义 iOS Web Clip 图标 genstrings命令与字符串本地化 Deferred Deep Linking in iOS App Groups 和 Keychain Access Groups copy 和 mutableCopy 返回的对象是执行的深拷贝还是浅拷贝呢？ “const”和“static” 符号区别与联系 获取 iOS 设备上安装的应用列表(非越狱) Umbrella Framework CFAbsoluteTimeGetCurrent() 和 CACurrentMediaTime() 区别 Block 的 Weak-Strong Dance 宏定义 逻辑分辨率和物理分辨率（Physical Resolution vs Logical Resolution） SDK 库相关命令 DFU 和 Recovery 模式 NSArray 和 NSMutableArray Toll-Free Bridging __IPHONE_OS_VERSION_MAX_ALLOWED 、 __IPHONE_OS_VERSION_MIN_REQUIRED 和 __IPHONE_xx_x Apple Worldwide Developer Relations Certification Authority iOS 崩溃 iOS Swift5 获取某时间段内的所有日期 黑科技 刷单、苹果36技术 虚拟定位功能 黄金比例，黄金螺旋线(即斐波那契螺旋线) [TOC] CocoaPods Cocoapods 报错问题 - ERROR | [iOS] unknown: Encountered an unknown error (Could not find a `ios` simulator (valid values: ). Ensure that Xcode -> Window -> Devices has at least one `ios` simulator listed or otherwise add one.) during validation. 需要在Xcode中创建模板器 Cocoapods 配置问题 Xcode 编辑器之关于Other Linker Flags相关问题 - 梁飞宇 - 博客园 细聊 Cocoapods 与 Xcode 工程配置 SDWebImage SDWebImage 占位图是GIF处理 [cell.ImageView sd_setImageWithURL:[NSURL URLWithString:ImageUrl] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType, NSURL *imageURL) { if (image == nil) { UIImage *img = [UIImage sd_animatedGIFNamed:@\"xxx.gif\"]; cell.goodImgV.image = img; } }]; Xcode Xcode10 打SDK库失败 解决方法，在脚本增加 -UseModernBuildSystem=NO ，原因是Xcode10使用新build系统，导致 xcodebuild 只会编译一个 相似的反馈：https://github.com/facebook/react-native/issues/19573 好像新build系统速度提升很好，了解更多新build系统： https://medium.com/xcblog/xcode-new-build-system-for-speedy-swift-builds-c39ea6596e17 Xcode10：library not found for -lstdc++.6.0.9 临时解决 Xcode 10中将libstdc++.6.0.9库文件删除，SDK依赖 libstdc++.6.0.9 的会在Xcode 10无法运行，解决方案： https://blog.csdn.net/ZuoWeiXiaoDuZuoZuo/article/details/82756116?utm_source=copy 真机运行库 在终端输入以下命令打开Xcode的lib库目录（此目录位安装的默认目录） open /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/usr/lib 把刚刚下载的zip文件解压获取到的 真机的 libstdc++.6.0.9.tbd 文件，扔进去 模拟器运行库 在终端输入以下命令打开Xcode的lib库目录（此目录位安装的默认目录） open /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/lib 把刚刚下载的zip文件解压获取到的 模拟器的 libstdc++.6.0.9.tbd 文件，扔进去 下一步 重启Xcode 在UILabel的NSAttributedText中创建可点击的“链接”？ How to Create Multiple Tappable Links in a UILabel ios - Create tap-able \"links\" in the NSAttributedString of a UILabel? - Stack Overflow Link With Standard Libraries > YES 默认是YES，编译器在链接时会自动使用标准库的链接器； 看官方的文档，如果设置为NO，需要配置 Other Linker Flags 来指定链接器。 Xcode Build System Guide - Apple Developer Xcode 自定义快捷键 复制文件： /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Versions/A/Resources/IDETextKeyBindingSet.plist 增加自定义配置： Customized HTC Duplicate Current Line selectLine:, copy:, moveToEndOfLine:, insertNewline:, paste:, deleteBackward: HTC Delete Current Line moveToEndOfLine:, deleteToBeginningOfLine:, deleteBackward:, moveDown:, moveToEndOfLine: HTC Move Current Line Up selectLine:, cut:, moveUp:, moveToBeginningOfLine:, insertNewLine:, paste:, moveBackward: HTC Move Current Line Down selectLine:, cut:, moveDown:, moveToBeginningOfLine:, insertNewLine:, paste:, moveBackward: HTC Insert Line Above moveUp:, moveToEndOfLine:, insertNewline: HTC Insert Line Below moveToEndOfLine:, insertNewline: 替换原来文件，重新打开Xcode，就可以搜索查看和定义快捷键 Xcode 自定义快捷键 - 简书 LLDB LLDB 通用结构的形式如下： [ [...]] [-options [option-value]] [argument [argument...]] 指令 全称 作用 apropos 帮助命令，通过 apropos + xxx 命令可以找到xxx所有相关的命令信息。 p print 输出原生类型（boolean、integer、float、etc）的信息 po print object 输出objective-c中对象（objects）的信息. (为 e -o 的别名) e expression 可以执行表达式。expression 其实就是 p/print/call、expression -o 就是 po 。 b breakpoint 设置断点. (可在运行过程中添加) br li breakpoint list 列出所有断点 breakpoint delete 删除所有断点（可跟组号删除指定组） breakpoint disable/enable 禁用、启用指定断点 breakpoint set -r some 遍历整个项目中包含 some 这个字符的所有方法并设置断点 c continue 单步调试 n thread step-over/next 当前线程下一步（以一个完整子函数为一步） ni thread step-inst-over 当前线程下一步（以一个汇编函数为一步） s thread step-in/step 当前线程下一步（遇到子函数就进入并且继续单步执行） si thread step-inst-over 当前线程下一步（遇到汇编函数就进入并且继续单步执行汇编指令） finish thread step-out 退出当前帧栈 image 可用于寻址，有多个组合命令。常用于寻找栈地址对应的代码位置, 用于查错(能定位出错误代码行数)。 image lookup image lookup --address 0x1af8：在可执行文件或任何共享库中查找原始地址信息。 image lookup -v --address 0x1af8：查找完整的源代码行信息。 image lookup --type NSString：根据名称查找对应（NSString）类型的信息。 register read 显示当前线程的通用寄存器。 register write register write rax 123：将一个新的十进制值“123”写入当前线程寄存器“rax”。 memory read memory read --size 4 --format x --count 4 0xbffff3c0：从地址0xbffff3c0读取内存，并显示4个十六进制uint32_t值。 bt thread backtrace 打印调用堆栈 thread backtrace all 列出所有线程的堆栈 thread list 列出所有线程 thread return 可用来控制程序流程, 伪造返回值 frame variable 获取全部变量值 watchpoint 监听某个实例的变化. (等同于在Xcode调试变量窗口—>右键某个变量—>Watch xx) 注意: watchpoint是分类型的，包括read，write或者read_write类型. 通过Xcode右键添加的只能是write类型. GDB to LLDB command map — The LLDB Debugger Tutorial — The LLDB Debugger LLDB 知多少 - 掘金 Xcode xip 快速解压缩安装 如果你确定下载来源很安全的话（不安全的来源有出过事，见 XcodeGhost 事件），可以用指令跳过验证，就会快一些： xip -x Xcode_12.4.xip 具体，执行命令后，没有图形界面，就是等： xip -x /Users/iHTCboy/Downloads/Xcode_12.5_beta.xip xip: signing certificate was \"Development Update\" (validation not attempted) 安裝 Xcode 的正確姿勢 iOS iOS 处理器指令集架构 2018 A12芯片arm64e ： iphone XS、 iphone XS Max、 iphoneXR 2017 A11芯片arm64： iPhone 8, iPhone 8 Plus, and iPhone X 2016 A10芯片arm64：iPhone 7 , 7 Plus, iPad (2018) 2015 A9芯片arm64： iPhone 6S , 6S Plus 2014 A8芯片arm64： iPhone 6 , iPhone 6 Plus 2013 A7芯片arm64： iPhone 5S armv7s：iPhone5｜iPhone5C｜iPad4(iPad with Retina Display) armv7：iPhone4｜iPhone4S｜iPad｜iPad2｜iPad3(The New iPad)｜iPad mini｜iPod Touch 3G｜iPod Touch4 | iPod Touch5 ARMv6：iPhone, iPhone 3G, iPod 1G/2G 模拟器32位处理器测试需要i386架构， 模拟器64位处理器测试需要x86_64架构， 真机32位处理器需要armv7,或者armv7s架构， 真机64位处理器需要arm64架构。 iPhone CPU架构 - 掘金 iOS 指令集架构 armv6、armv7、armv7s、arm64、arm64e、x86_64、i386 - Belinda_sl - 博客园 关于Xcode “Build Setting”中的Architectures详解 - 崩月姐姐之家 ios - Xcode arm64 Vs arm64e - Stack Overflow Armv8-A: 2016 additions - Processors blog - Processors - Arm Community WKWebView如何清除缓存 - (void)deleteWebCache { //allWebsiteDataTypes清除所有缓存 if (@available(iOS 9.0, *)) { NSSet *websiteDataTypes = [WKWebsiteDataStore allWebsiteDataTypes]; NSDate *dateFrom = [NSDate dateWithTimeIntervalSince1970:0]; [[WKWebsiteDataStore defaultDataStore] removeDataOfTypes:websiteDataTypes modifiedSince:dateFrom completionHandler:^{ NSLog(@\"[Web log]: deleteWebCache completion~\"); }]; } } Home Indicator 问题 iPhoneX适配之Home-Indicator | 凌云的博客 关于iPhone X下Home键的隐藏和延迟响应 - 掘金 iOS证书&签名 iOS App 签名的原理 « bang’s blog iOS开发者证书以及代码签名学习笔记 | Enki's Notes 漫谈iOS程序的证书和签名机制 从App里用代码读取证书信息 //取出embedded.mobileprovision这个描述文件的内容进行判断 NSString *mobileProvisionPath = [[NSBundle mainBundle] pathForResource:@\"embedded\" ofType:@\"mobileprovision\"]; NSData *rawData = [NSData dataWithContentsOfFile:mobileProvisionPath]; NSString *rawDataString = [[NSString alloc] initWithData:rawData encoding:NSASCIIStringEncoding]; NSRange plistStartRange = [rawDataString rangeOfString:@\"\"]; if (plistStartRange.location != NSNotFound && plistEndRange.location != NSNotFound) { NSString *tempPlistString = [rawDataString substringWithRange:NSMakeRange(plistStartRange.location, NSMaxRange(plistEndRange))]; NSData *tempPlistData = [tempPlistString dataUsingEncoding:NSUTF8StringEncoding]; NSDictionary *plistDic = [NSPropertyListSerialization propertyListWithData:tempPlistData options:NSPropertyListImmutable format:nil error:nil]; NSLog(@\"plistDic: %@\", plistDic); } iOS-如何判断安装的APP被第三方企业证书重新签名 iOS重签名了解一下 通过Safari获取iOS设备真实UDID Configuration Profile Examples 通过Safari浏览器获取iOS设备UDID(设备唯一标识符) - FengHongSeXiaoXiang的博客 - CSDN博客 shaojiankui/iOS-UDID-Safari: iOS-UDID-Safari,（不能上架Appstore！！！）通过Safari获取iOS设备真实UDID，use safari and mobileconfig get ios device real udid 自定义 iOS Web Clip 图标 使用 Apple Configurator 2 自定义 iOS Web Clip 图标 - 少数派 genstrings命令与字符串本地化 #define NSLocalizedString(key, comment) \\ [NSBundle.mainBundle localizedStringForKey:(key) value:@\"\" table:nil] #define NSLocalizedStringFromTable(key, tbl, comment) \\ [NSBundle.mainBundle localizedStringForKey:(key) value:@\"\" table:(tbl)] #define NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \\ [bundle localizedStringForKey:(key) value:@\"\" table:(tbl)] #define NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \\ [bundle localizedStringForKey:(key) value:(val) table:(tbl)] 方法: NSLocalizedString(@\"key\", @\"My comment\") /* My comment */ \"key\" = \"value\"; 扫描当前文件夹下所有.m文件的宏，生成Localizable.strings文件并放到en.lproj文件夹下: $ find . -name \\*.m | xargs genstrings -o en.lproj 指定的输出目录下生成 TableName.strings 文件，然后添加记录和注释: NSLocalizedStringFromTable(@\"key\", @\"TableName\", @\"My comment\") 下面三句的作用是一样的，都是读取苹果指定名字为 Localizable.strings 的内容，其中第三种简化后就是苹果对 NSLocalizedString 宏的定义： NSLocalizedString(@\"key\", @\"My comment\"); NSLocalizedStringFromTable(@\"key\", @\"Localizable\", @\"My comment\"); NSLocalizedStringFromTable(@\"key\", nil, @\"My comment\"); Deferred Deep Linking in iOS iOS Deferred Deep Link 延遲深度連結實作(Swift) - ZRealm Dev. - Medium iOS App与浏览器深度链接 - 简书 Deferred Deep Linking in iOS Swift 3.0 with Universal Link | InnovationM Blog Deferred Deep Linking in iOS Promoting Apps with Smart App Banners iOS10 SFSafariViewController not working when alpha is set to 0 App Groups 和 Keychain Access Groups 在多个app之间共享钥匙串项（Sharing Access to Keychain Items Among a Collection of Apps） copy 和 mutableCopy 返回的对象是执行的深拷贝还是浅拷贝呢？ 系统的非容器类对象，如: NSString、NSMutableString、NSNumber 等。 系统的容器类对象，如: NSArray、NSMutableArray、NSDictionary、NSMutableDictionary 等。 对于系统的非容器类对象，如果对一不可变对象(如 NSString)复制，copy 是指针复制(浅拷贝)和 mutableCopy 就是对象复制(深拷贝); 如果是对可变对象(如 NSMutableString)复制，copy 和 mutableCopy 都是深拷贝，但是 copy 返回的对象是不可变的。 对于系统的容器类对象，对不可变对象(如 NSArray)进行复制，copy 是指针复制(浅拷贝)， mutableCopy 是对象复制(深拷贝), 但是不管是 copy 还是 mutableCopy, 且不论容器内对象是可变还是不可变，返回的容器内对象都是指针复制(浅拷贝)。 对于系统的容器类对象，对可变对象(如 NSMutableArray)进行复制时，copy 和 mutableCopy 都是对象复制(深拷贝)，但是不管是 copy 还是 mutableCopy，且不论容器内对象是可变还是不可变，返回的容器内对象都是指针复制(浅拷贝)。 iOS理解NSCopying协议 - 刘茂华的博客 “const”和“static” 符号区别与联系 static NSString const * kUserName = @\"iHTCboy\"; static const NSString * kUserName = @\"iHTCboy\"; static NSString * const kUserName = @\"iHTCboy\"; const 修饰的是他右边的部分，也就是说： static NSString const * kUserName = static NSString const (* kUserName ) static NSString * const kUserName = static NSString * const (kUserName) 当const修饰的是(userName)的时候，不可变的是userName；星号在C语言中表示 指针指向符，也就是说这个时候userName指向的内存块地址不可变，而内存保存的内容是可变的。 一定要同时使用static和const来定义你的变量 上面已经说了const是用来定义一个常量。而static在C语言中（OC中延用）则表明此变量只在改变量的输出文件中可用(.m文件)，如果你不加“static”符号，那么编译器就会对该变量创建一个“外部符号”，后果是什么呢？ 两个目标文件(.0文件是.m文件编译后的输出文件)有一个重复的符号。(OC中没有类似C++中的名字空间的概念)，所以当你在你自己的.m文件中需要声明一个只有你自己可见的局部变量(k开头)的变量的时候一定要同时使用“static”和“const”两个符号。 定义工程中的全局变量 在”constants.h”文件中，声明常量： extern NSString *const XUserName; 然后在“constants.m”中定义他： NSString *const XUserName = @\"iHTCboy\"; 这样做的优势是保持常量绝对不会被修改，并且一定初始化还带有类型信息。 iOS 不要用宏来定义你的常量 - 简书 ios - static NSString usage vs. inline NSString constants - Stack Overflow 获取 iOS 设备上安装的应用列表(非越狱) 私有API的使用 | Mark Miao 获取 iOS 设备上安装的应用列表 - Octree Retriever: 在未越狱的 iOS 设备上查看 app 的 InfoPlist - 知乎 IOS 获取安装的app_骑着蜗牛找马儿-CSDN博客 iOS11/iOS12上通过LSApplicationWorkspace获取应用列表(只能获取带有 plugin 的app) - iOSRE Umbrella Framework Introduction to Framework Programming Guide iOS - Umbrella Header在framework中的应用 | Startry Blog OC和Swift混编Frameowork优雅指南 - 简书 用.modulemap实现模块化 - 简书 CFAbsoluteTimeGetCurrent() 和 CACurrentMediaTime() 区别 #import #import CFTimeInterval currentTime = CACurrentMediaTime(); CFAbsoluteTime absoluteTime = CFAbsoluteTimeGetCurrent(); NSLog(@\"currentTime: %f, absoluteTime: %f\", currentTime, absoluteTime); currentTime: 697112.258945, absoluteTime: 612415143.769868 CACurrentMediaTime() 方法是QuartzCore框架里的，相对来说比较原子量，比较精确，可以用来测量程序的时间效率。获取到的时间是手机开机后的秒数，在模拟器上运行数值不必计较，算时间差就好。 CFAbsoluteTimeGetCurrent() 方法是 CoreFoundation 框架中的，是获取2001年1月1日 00:00 GMT 开始的秒数。相当于上面的NSDate方法 [NSDate timeIntervalSinceReferenceDate] 一样。 CACurrentMediaTime() | Apple Developer Documentation CFAbsoluteTimeGetCurrent() | Apple Developer Documentation Block 的 Weak-Strong Dance 为什么 weak strong dance 能够避免循环引用？ 为什么不直接使用 weak？ 使用 weak strong dance 的正确姿势？ weakSelf+strongSelf: __weak typeof(self) weakSelf = self; self.dataBlock = ^(NSString *title) { __strong typeof(self) strongSelf = weakSelf; strongSelf.titleLabel.text = title; }; strongSelf 持有 self 的行为是在 Block 执行的时候进行的，所以多线程中，可能 weakSelf 指向的对象会在 Block 执行前被废弃。 所以，多线程环境下，最好在判断一下 strongSelf 不为 nil 在使用： __weak typeof(self) weakSelf = self; self.dataBlock = ^(NSString *title) { __strong typeof(self) strongSelf = weakSelf; if(strongSelf) { strongSelf.titleLabel.text = title; } }; weakify + strongify: weakify(self); self.dataBlock = ^(NSString *title) { strongify(self); self.titleLabel.text = title; }; weakify + strongify 定义： #define weakify(var) __weak typeof(var) XYWeak_##var = var; #define strongify(var) \\ _Pragma(\"clang diagnostic push\") \\ _Pragma(\"clang diagnostic ignored \\\"-Wshadow\\\"\") \\ __strong typeof(var) var = XYWeak_##var; \\ _Pragma(\"clang diagnostic pop\") Why could weak-strong dance break retain cycle? Objective-C Advancements In-Depth - WWDC 2011 - Videos - Apple Developer 对 Strong-Weak Dance的思考 iOS的weakSelf与strongSelf - 简书 Swift中的Weak Strong Dance - 戴伟来的博客|DavidDay's Blog ARC与非ARC下的Weak-Strong Dance - okeyang's blog 你真的懂 weak strong dance 吗？ | 冬天的冰激凌 ios - Objective-C ARC: strong vs retain and weak vs assign - Stack Overflow Weak-Strong-Dance真的安全吗？ - 简书 宏定义 宏定义的黑魔法 - 宏菜鸟起飞手册 逻辑分辨率和物理分辨率（Physical Resolution vs Logical Resolution） 分辨率（Resolution） 分辨率又称显示分辨率、屏幕分率。确定手机屏幕上显示多少信息的设置，以水平和垂直像素（pixel）来衡量。 inch（英寸） 1 inch= 2.54cm = 25.4mm 屏幕尺寸 屏幕大小的物理尺寸，以屏幕对角线的长度（diagonal）来衡量 PPI（像素密度，Pixels Per Inch） 表示沿着设备的对角线，每英寸所拥有的像素（pixel）数目，PPI的数值越高，代表显示屏能够以越高的密度显示图像，即通常所说的分辨率越高，颗粒感越弱，图像更清晰。 一个像素一个格子，“每英寸像素”，表示一英寸的长度有几个格子。 PPI的计算值 以 iPhone 8 为例，屏幕分辨率：750px X 1334px，屏幕尺寸：4.7 英寸 PPI = \\frac{\\sqrt{750^{2}+1334^{2}}}{4.7} = 325.6 ≈ 326 DPI（每英寸点数，Dots Per Inch） 用于打印机，“每英寸墨点”。 为什么不用宽高（width/height）各能容纳下多少颗像素？ 因为用每英寸能容纳下多少颗像素，就可以在不同尺寸的屏幕用 PPI 来比较了。 13寸的屏幕，屏幕的分辨率是1280*720，如果物理分辨率改成了2560*1440的分辨率，相当于每个像素点的尺寸减少了4倍，原来在1280*720的一个像素内容，在2560*1440上则填充了4个像素，因此虽然内容显示还是一样多，但是屏幕精细度高了2倍，像素倍率是2，这下再也看不出颗粒感了 一粒像素有多大？ 像素在脱离了屏幕尺寸之后是没有大小可言的 你可以将 1920 * 1080 颗像素放到一台 40 寸的电视里面，也可以将同样多的像素全部塞到一台 5.5 寸的 iPhone7 Plus 手机里面去，那么对于 40 寸的电视而言，每个像素颗粒当然会大于 5.5 寸的手机的像素。 所以光看屏幕的分辨率对于设计师来说是不具备多少实际意义的，通过分辨率计算得出的像素密度（PPI）才是设计师要关心的问题，我们通过屏幕分辨率和屏幕尺寸就能计算出屏幕的像素密度的。 Scale Factor（缩放因子） 为了方便开发人员开发，iOS 中统一使用点（Point）对界面元素的大小进行描述。 早期的iPhone3GS的屏幕屏幕分辨率是320 * 480,iOS绘制图形（CGPoint/CGSize/CGRect）均已point为单位。 1 point = scale*pixel 注：在iPhone4~6中，缩放因子scale=2；在iPhone6 plus中，缩放因子scale=3 Designer's guide to DPI The Ultimate Guide To iPhone Resolutions iPhone 6 Screens Demystified 逻辑分辨率和物理分辨率到底是什么呀？ - 知乎 DPI 和 PPI 的区别是什么？ - 知乎 iOS UI设计 - 分辨率 屏幕尺寸 与 像素密度 iPhone屏幕尺寸、分辨率及适配 iOS 屏幕尺寸、逻辑分辨率、物理分辨率之间的相互关系 SDK 库相关命令 查看.a库文件所包含的架构库命令: lipo -info XXXXX.a 合并多个架构： lipo -create 真机路径 模拟器路径 -output 真机路径 从fat文件里面分离出来各个架构的库： lipo -thin armv7 XXXXX.a -output XXXXX-armv7.a 查看库中所包含的文件列表： ar -t armv7.a 从每个架构的.a文件中删除与其他sdk冲突的.o文件： ar -d -sv XXXXX-armv7.a XXXX.o 注意：把每个架构的.a文件单独放一个文件夹进行解压命令,因为同一个sdk的不同架构库解压出来的.o文件同名会覆盖掉 目录下所有.o文件(用*.o)打包成.a文件： ar -r *.o libxxx.a 使用 Xcode libtool 合并多个静态库: xcrun -r libtool -no_warning_for_no_symbols -static -o output.a 1.a 2.a 3.a 4.a -no_warning_for_no_symbols 不输出 has no symbols 的警告 -static 链接的类型为静态库 -o 指定合并后的文件路径 xcrun -r libtool： 使用 Xcode Toolchain 里的 libtool，直接运行 libtool 会使用 $PATH 的路径的 DFU 和 Recovery 模式 Recovery模式 恢复模式，也称 iBoot 模式，常用的使用场景就是手机需要刷机或者升降级的情况。操作该模式时，手机上会显示iTunes连接数据线的图标。 DFU模式 全称是 Device Firmware Upgrade，意思为固件的强制升降级模式，也叫开发者模式。 DFU模式一般是在手机无法使用Recovery模式（例如无法正常开机或者iTunes无法正常识别）的情况下使用，常见的场景就是我们在升级iOS系统手机出现白苹果或者黑屏的情况。 进入Recovery模式 方法一：直接连接iTunes，点击iTunes页面上的更新（升级最新版系统）或者【恢复iPhone】（刷机）； 方法二：给手机进行升降级，刷入已下载的iOS 固件版本：连接iTunes，在电脑上按住【shift】键，同时点击iTunes上的【更新】，然后选择提前下载好的iOS 固件版本进行升降级； 进入DFU模式 把手机接到电脑上。 把手机关机。 按住电源键3秒。 不松开电源键，按住Home键10秒。（无实体 Home 键的用音量减小键） 松开电源键但保持按住Home键。（无实体 Home 键的用音量减小键） 5秒钟后松开松开Home键，直到屏幕保持黑屏。（如果屏幕显示“请连接iTunes”，说明你按的时间太长了，需要重新做一遍） 退出模式 同时按住电源键和 Home键（音量减小键），将设备重启即可退出恢复模式或者DFU模式。 注意：操作时，建议将手机数据提前进行备份哦！ 如果您无法更新或恢复 iPhone、iPad 或 iPod touch - Apple 支持 NSArray 和 NSMutableArray Exposing NSMutableArray – Bartosz Ciechanowski Array 实现 CFArray | Garan no dou CFArray 的历史渊源及实现原理 Toll-Free Bridging There are a number of data types in the Core Foundation framework and the Foundation framework that can be used interchangeably. Core Foundation 框架和 Foundation 框架中有许多数据类型可以互换使用。 可以方便和谐的使用Core Foundation类型的对象和Objective-C类型的对象。 NSCFString 是 NSString 的私有子类，实现了 NSString 的所有方法。为什么要有CFString 呢？ CFString provides a suite of efficient string-manipulation and string-conversion functions. It offers seamless Unicode support and facilitates the sharing of data between Cocoa and C-based programs CFString提供了一套高效的字符串处理和字符串转换功能。它提供无缝的Unicode支持，并促进可可和基于C的程序之间的数据共享。 __bridge（修饰符） __bridge_retained（修饰符）和 CFBridgingRetain（函数） __bridge_transfer（修饰符） 和 CFBridgingRelease（函数） __bridge 类型转换时并不改变内存管理方式。只是声明类型转变，但是不做内存管理规则的转变。 CFStringRef s1 = (__bridge CFStringRef) [[NSString alloc] initWithFormat:@\"Hello, %@!\", name]; __bridge_retained（修饰符） or CFBridgingRetain（函数） 通过 __bridge_retained，在 bridge 的时候，编译器会 retain Core Foundation 端的对象，之后由开发者负责手动管理内存，这样即使 Foundation 的变量被释放，也不会影响 Core Foundation 的变量的使用。 NSString *s1 = [[NSString alloc] initWithFormat:@\"Hello, %@!\", name]; CFStringRef s2 = (__bridge_retained CFStringRef)s1; // do something with s2 //... CFRelease(s2); // 注意要在使用结束后加这个 等同函数： NSString *s1 = [[NSString alloc] initWithFormat:@\"Hello, %@!\", name]; CFStringRef s2 = (CFStringRef)CFBridgingRetain(s1); // do something with s2 //... CFRelease(s2); // 注意要在使用结束后加这个 __bridge_transfer（修饰符） or CFBridgingRelease（函数） 当从 Core Foundation 类型转换为 Foundation 类型时，编译器转移了对象的所有权，开发者不再需要负责 Core Foundation 端对象的内存管理。 CFStringRef result = CFURLCreateStringByAddingPercentEscapes(. . .); NSString *s = (__bridge_transfer NSString *)result; //or NSString *s = (NSString *)CFBridgingRelease(result); // CFStringRef result 不用手动释放了 这里用 __bridge_transfer 将result的管理责任交给了ARC来处理，所以就不需要再显式地调用 CFRelease() 释放了。 Toll-Free Bridging CFString | Apple Developer Documentation 深入理解Toll-Free Bridging_Leo的专栏-CSDN博客 iOS开发ARC内存管理技术要点 - 不忘初“辛” - 博客园 __IPHONE_OS_VERSION_MAX_ALLOWED 、 __IPHONE_OS_VERSION_MIN_REQUIRED 和 __IPHONE_xx_x __IPHONE_OS_VERSION_MAX_ALLOWED ：当前Xcode的系统SDK版本 __IPHONE_OS_VERSION_MIN_REQUIRED ： 当前项目支持的最低支持的版本 作用：根据不同的开发环境编译不同的代码 #if __IPHONE_OS_VERSION_MAX_ALLOWED >= 80000 //you can use iOS 8 APIs here because the SDK supports them //but the code may still crash if run on an iOS 7 device #else //this code can’t use iOS 8 APIs as the SDK version doesn’t support them #endif #if __IPHONE_OS_VERSION_MIN_REQUIRED >= 80000 //minimum deployment target is 8.0, so it’s safe to use iOS 8-only code #else //you can use iOS8 APIs, but the code will need to be backwards // compatible it will crash when run after or on an iOS 7 device #endif #if defined(__IPHONE_OS_VERSION_MAX_ALLOWED) && __IPHONE_OS_VERSION_MAX_ALLOWED >= 70000 if ([NSURLSession class] && [NSURLSessionConfiguration respondsToSelector:@selector(backgroundSessionConfigurationWithIdentifier:)]) { // ... } #endif 可以使用 __IPHONE_8_0、__IPHONE_14_3 代替了数字。在 iOS SDK 目录下：usr/include/AvailabilityVersions.h #define __IPHONE_13_0 130000 #define __IPHONE_13_1 130100 #define __IPHONE_13_2 130200 #define __IPHONE_13_3 130300 #define __IPHONE_13_4 130400 #define __IPHONE_13_5 130500 #define __IPHONE_13_6 130600 #define __IPHONE_13_7 130700 #define __IPHONE_14_0 140000 #define __IPHONE_14_1 140100 #define __IPHONE_14_2 140200 #define __IPHONE_14_3 140300 AvailabilityInternal.h AvailabilityVersions.h AvailabilityVersions - Open Source Swift System Version Checking - NSHipster Swift System Version Checking - NSHipster - 中文 Efficient iOS Version Checking | Inside PSPDFKit iOS开发之多系统版本兼容 Apple Worldwide Developer Relations Certification Authority Apple Root Certificate Authority Apple Worldwide Developer Relations Certification Authority Apple Worldwide Developer Relations Certification Authority 的证书虽苹果颁发给iOS开发者的证书的根证书。而 Apple Worldwide Developer Relations Certification Authority 的证书的根证书是 Apple Root Certificate Authority 证书。 AppleWWDRCA.cer 就是开发者证书的根证书。它在安装Xcode的时候自动安装了。如果发现它失效了，需要到苹果公司官网下载并进行安装。 CSR文件： CSR(Certificate Signing Request) 是一个规范 Apple Worldwide Developer Relations Intermediate Certificate - Support - Apple Developer Certificates - Support - Apple Developer WWDR Intermediate Certificate Expiration - Support - Apple Developer iOS证书 iOS 崩溃 iOS奔溃日志分析 - shenfh iOS Swift5 获取某时间段内的所有日期 func getDaysDate(startDate: String, endDate: String, dateFormat: String = \"yyyy-MM-dd HH:mm:ss\", outDateFormat: String = \"yyyy/MM/dd\") -> [String] { let formatter = DateFormatter() formatter.dateFormat = dateFormat let startTime = formatter.date(from: startDate)! // first date let endTime = formatter.date(from: startDate)! // last date let fmt = DateFormatter() fmt.dateFormat = \"yyyy/MM/dd\" var dayArray = [String]() var date = startTime var result = date.compare(endTime) while result != .orderedDescending { let day = fmt.string(from: date) dayArray.append(day) date = Calendar.current.date(byAdding: .day, value: 1, to: date)! result = date.compare(startTime) } return dayArray } 黑科技 刷单、苹果36技术 蘋果充值常見的刷單手段和防范方法 - 开发者知识库 苹果支付漏洞纵容“免费”充值？-新华网 虚拟定位功能 苹果iPhone不越狱虚拟定位（多种方式，驱动更新至13.0） – Aneeo Blog iOS实现虚拟定位的多种玩法 - 掘金 iOS虚拟定位：无需越狱，支持iPhone XS Max，支持12.2 - Flyzy's Blog 黄金比例，黄金螺旋线(即斐波那契螺旋线) iOS 7 的圆角图标是怎样一个图形？ - 知乎 黄金比例在设计中的运用 | 设计驱动力 苹果产品设计中的黄金比例运用 - Anzhongliu - 博客园 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-12-26 17:27:56 更新 "},"Development/Java.html":{"url":"Development/Java.html","title":"Java","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Java Java快速入门教程 [TOC] Java Java快速入门教程 Java快速入门教程 1、开篇：Java的优势和特点 - Ken的杂谈 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-02-07 11:33:49 更新 "},"Development/Linux.html":{"url":"Development/Linux.html","title":"Linux","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 crontab时间 开启SSH服务远程登录 linux账号用户切换 1.sudo 命令 2. sudo -i 3.使用root用户 4.退出root 用户 5.一些说明 linux修改用户名 Systemd 命令 服务器命令操作 常用命令 进程相关 nginx 命令 部署指令 基于uWSGI和nginx部署Django 错误处理 linux 文件夹作用 [TOC] crontab时间 # .---------------- minute (0 - 59) # | .------------- hour (0 - 23) # | | .---------- day of month (1 - 31) # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... # | | | | .---- day of week (0 - 6) Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat # | | | | | # * * * * * command to be executed minute：代表一小时内的第几分，范围 0-59。 hour：代表一天中的第几小时，范围 0-23。 mday：代表一个月中的第几天，范围 1-31。 month：代表一年中第几个月，范围 1-12。 wday：代表星期几，范围 0-7 (0及7都是星期天)。 who：要使用什么身份执行该指令，当您使用 crontab -e 时，不必加此字段。 command：所要执行的指令。 Linux之crontab定时任务 - 简书 开启SSH服务远程登录 Linux 默认只安装ssh-client服务，查看当前的ubuntu是否安装了ssh-server服务。 dpkg -l | grep ssh 安装ssh-server服务: sudo apt-get install openssh-server 确认ssh-server是否启动了： ps -e | grep ssh 如果没有开启，可以执行： sudo service ssh start 用 ifconfig 查看本机 ip 地址，如果提示无此命令，需要安装 net-tools： sudo apt-get install net-tools 连接： ssh username@ip 错误： The fingerprint for the ECDSA key sent by the remote host is SHA256:xxxx. Please contact your system administrator. Add correct host key in /Users/iHTCboy/.ssh/known_hosts to get rid of this message. Offending ECDSA key in /Users/iHTCboy/.ssh/known_hosts:4 ECDSA host key for 172.16.0.1 has changed and you have requested strict checking. Host key verification failed. 说明本地/Users/iHTCboy/.ssh/known_hosts文件已经保存了远程主机 ECDSA key 值不相同导致，删除重新连接就可以。 ubuntu开启SSH服务远程登录 - jackghq的博客 - CSDN博客 linux账号用户切换 1.sudo 命令 $ sudo 输入当前用户密码就可以得到超级用户的权限。但默认的情况下5分钟root权限就失效了。 2. sudo -i $ sudo -i 通过这种方法输入当前用户密码就可以进到root用户。 3.使用root用户 如果你是第一次使用root账户，那我们首先要重设置root用户的密码： $ sudo passwd root 之后系统会让你输入两遍root账户的密码，确认后密码即设置完毕，接下来就可以切换到root用户了。切换用户的命令是su，su是(switch user)切换用户的缩写。 $ su 或者 $ su root 或者 $ su - root 区别： su 只能切换到管理员用户权限,不使用管理员的登陆脚本和搜索路径 su - 不但能切换到管理员权限而且使用管理员登陆脚本和搜索路径 4.退出root 用户 # exit 5.一些说明 比如当前路径： root@htc:~# root：代表的当前用户的用户名 htc：是主机的名称（这个也是可以改的） ～：代表当前目录 $：是普通用户的意思 ＃：root用户 linux修改用户名 假设旧用户名为 parallers，想要修改为新用户名 ihtcboy 1.进入终端，输入：su -回车，接着输入密码，获取root权限 2.输入：usermod -l ihtcboy -d /home/ihtcboy -m test 回车。 3.输入：groupmod -n ihtcboy test 回车。 4.重启电脑，用户名已经修改完成。 5.终端输入：id ihtcboy，查看当前用户信息 Systemd 命令 systemctl enable 命令用于在上面两个目录之间，建立符号链接关系。 $ sudo systemctl enable clamd@scan.service # 等同于 $ sudo ln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service' systemctl enable 命令相当于激活开机启动。 与之对应的，systemctl disable 命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。 $ sudo systemctl disable clamd@scan.service 注：配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。 systemctl cat 命令可以查看配置文件的内容。 Systemd 入门教程：命令篇 - 阮一峰的网络日志 服务器命令操作 常用命令 基本命令 //进入网站根目录 cd /data/wwwroot/default //重启服务器 reboot //下载url对应的文件 wget url //解压xx.zip文件到当前目录 unzip xx.zip 修改文件权限 //LAMP环境下修改用户和用户组 chown -R apache.apache /data/wwwroot/default //分别修改文件和文件夹的读、写、执行权限 find /data/wwwroot/default -type f -exec chmod 640 {} \\; find /data/wwwroot/default -type d -exec chmod 750 {} \\; Web服务启停 修改环境后，需要运行如下命令进行服务重启后方可生效 Apache： systemctl restart httpd Nginx： systemctl restart nginx //重启nginx systemctl restart php-fpm //重启php-fpm 升级 ~# yum update -y //升级所有包同时也升级软件和系统内核,-y当安装过程提示选择全部为\"yes\" ~# yum upgrade -y //只升级所有包，不升级软件和系统内核,-y当安装过程提示选择全部为\"yes\" ctrl + z 可以将一个正在前台执行的命令放到后台，并且处于暂停状态。 ctrl+c 终止前台命令。 进程相关 查看运行的后台进程 （1）jobs -l jobs命令只看当前终端生效的，关闭终端后，在另一个终端jobs已经无法看到后台跑得程序了，此时利用ps（进程查看命令） （2）ps -ef 或 ps -aux a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分 注： 　　用ps -def | grep 查找进程很方便，最后一行总是会grep自己 　　用grep -v参数可以将grep命令排除掉 　```　 ps -aux|grep chat.js| grep -v grep ``` 再用awk提取一下进程ID　 ps -aux|grep chat.js| grep -v grep | awk '{print $2}' 如果某个进程起不来，可能是某个端口被占用 查看使用某端口的进程 lsof -i:8090 netstat -ap|grep 8090 查看到进程id之后，使用netstat命令查看其占用的端口 netstat -nap|grep 7779 终止后台运行的进程 使用kill杀掉进程 kill -9 进程号 nohup和&后台运行，进程查看及终止 - jenyzhang的专栏 - CSDN博客 nginx 命令 启动、停止和重启 service nginx start service nginx stop service nginx restart 或 $ nginx $ nginx -s stop $ nginx -s reload init.d目录包含许多系统各种服务的启动和停止脚本： sudo /etc/init.d/nginx start sudo /etc/init.d/nginx stop sudo /etc/init.d/nginx restart killall -9 nginx #停止nginx killall -9 uwsgi #停止uwsgi uwsgi --ini /data/www/script/uwsgi9090.ini #启动uwsgi脚本 部署指令 基于uWSGI和nginx部署Django 1、原理 Web Client Web Server(nginx) The Socket uWSGI Django 2、安装环境&部署 不安装下面的库，后面的一些安装命令可能会失败。（Debian 及衍生系统，如 Ubuntu，需要先安装 python-dev 或 python3-dev。否则不能正常安装 uwsgi。原因：uWSGI 是一个(巨大的) C 应用，所以你需要一个 C 编译器(比如 gcc 或者 clang)和 Python 开发版头文件。） sudo apt-get install python-dev 注：CentOS 使用 yum命令： yum install gcc python-devel yum groupinstall \"Development Tools\" yum install uwsgi-plugin-python #yum安装的uwsgi，缺少python的plugin 安装python3： sudo apt-get install python3 安装pip： #python2 sudo apt-get install python-pip #python3 sudo apt-get install python3-pip 安装虚拟环境： pip3 install virtualenv 安装 Django： pip3 install django 注： 非必需安装，可以在虚拟环境中再安装 如果安装后找不到django admin命令，可以安装：apt install python-django-common 部署static文件: 在django的setting文件中，添加下面一行内容，然后运行python manage.py collectstatic： STATIC_ROOT = os.path.join(BASE_DIR, \"static/\") 如果是 python3 作为主环境 创建python3软连接: sudo ln -s /usr/bin/python3 /usr/bin/python 注：由于执行CentOS 7的yum命令需要使用自带的python2的版本，所以将/usr/bin/yum 和 /usr/libexec/urlgrabber-ext-down 文件的#! /usr/bin/python 修改为 #! /usr/bin/python2 vim /usr/bin/yum 3、安装uwsgi sudo pip3 install uwsgi --upgrade 验证安装是否成功： uwsgi --http :8000 --wsgi-file /python/test.py 参数含义: http :8000: 使用http协议，8000端口 wsgi-file test.py: 加载指定文件 test.py 在浏览器访问ip: 8000（本机 ip + 端口:8000），可以看到浏览器输出\"Hello World\"。至此，uwsgi安装完成。 test.py： # test.py def application(env, start_response): start_response('200 OK', [('Content-Type','text/html')]) #return [\"Hello World\"] # python2 return [b\"Hello World\"] # python3 配置uwsgi： 如果每次都运行上面命令拉起 django application 确实是麻烦，并且uwsgi有很多参数选项，一条命令就可以很长，例如uwsgi --http 127.0.0.1:8000 --chdir /path/to/project/ --wsgi-file /path/to/wsgi.py --processes 4 --threads 2 --stats 127.0.0.1:8080。所以方法是使用.ini文件能简化工作。创建xxx.ini配置文件来保存启动命令。在你喜欢的位置创建ini文件。我是在 /python/uwsgi.ini.d 下创建的 uwsgi9001.ini，内容如下： # /python/uwsgi.ini.d/uwsgi9001.ini [uwsgi] socket = 127.0.0.1:9001 master = true #主进程 vhosts = true #多站模式 workers = 2 #子进程数 reload-mercy = 10 vacuum = true #退出、重启时清理文件和环境 max-requests = 1000 #respawn processes after serving 1000 requests limit-as = 512 # limit the project to 512 MB buffer-size = 30000 pidfile = /var/run/uwsgi9001.pid #用来启动/停止进程 daemonize = /python/uwsgi.ini.d/uwsgi9001.log #进程后台运行并将日志输到文件 pythonpath = /usr/local/lib/python2.7/dist-packages #python的包环境 stats = 127.0.0.1:9191 #在指定的地址上启用统计信息服务器 参数说明: master = true：除了配置中设置的进程数，还将另外启动一个 master 进程，用来管理其他进程。kill master 进程的 pid，master 将自动重启；kill uWSGI 的其他进程，master 将自动重新启动一个进程。 daemonize：使进程在后台运行，并将日志打到指定的日志文件或者udp服务器。而logto 将日志打到一个指定的文件或者udp服务器。 pythonpath：可用命令查看路径pip show django | grep -i location。1.4 以下 Django 才需要设置。但是使用 python2 环境测试时报错Internal Server Error，需要添加路径才能识别Django（v1.11.25）的正确路径。 最新的最简方式： [uwsgi] socket = 127.0.0.1:9001 #如果是直接访问此 ip 测试，改为 `http` chdir = /var/www/myapp #项目目录,即Django程序目录 wsgi-file = myapp/wsgi.py # wsgi.py目录 env = DJANGO_SETTINGS_MODULE=myapp.settings # python虚拟环境目录 processes = 4 #指定数目的worker/进程 threads = 2 #指定数目的线程 注意： 1.考虑到安全性，uWSGI 文档中提到，不要使用 root 权限来运行 uWSGI，添加 uid 和 gid 选项指定用户和组来降低权限。 2.如果端口被占用，可以使用uwsgi配置文件中设置的pidfile来进行停止 sudo uwsgi --stop /var/run/uwsgi9001.pid 重启 uWSGI： sudo uwsgi --reload /var/run/uwsgi9001.pid 或者杀死全部uwsgi进程： sudo killall -9 uwsgi 或 pkill -f uwsgi 3.配置后的#注释，在使用中记得去掉，否则报错！！No such file or directory 4、安装 Nginx apt-get install nginx 使用Ubuntu的软件包管理器进行安装，安装完毕之后Nginx的配置文件在/etc/nginx/nginx.conf。 验证安装是否成功： 在浏览器访问当前ip: 例如 192.168.199.202，可以看到浏览器显示\"Welcome to nginx!\"。至此，Nginx安装完成。 配置Nginx： 打开nginx的配置文件 /etc/nginx/nginx.conf，查阅http{}模块，很容易发现服务器配置文件应写在 /etc/nginx/conf.d 下，以.conf为后缀： http { ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; } 于是我们在/etc/nginx/conf.d创建一个 mysite.conf 文件，写入如下内容： 也可以用软链接到 /etc/nginx/conf.d： sudo i 注：/etc/nginx/conf.d/ 和 /etc/nginx/sites-enabled/ 都可以 #mysite.conf server { listen 80; server_name 192.168.199.202; location / { include uwsgi_params; uwsgi_pass 127.0.0.1:9001; uwsgi_param UWSGI_CHDIR /python/mysite; uwsgi_param UWSGI_SCRIPT mysite.wsgi; index index.html index.htm; client_max_body_size 35m; } } 其中： server_name 是你的服务器ip（实际生产环境中是域名） uwsgi_params 文件在 /etc/nginx/ 目录中。如果没有，可以从 GitHub 获取，是 nginx 传递给 uwsgi 的对应参数转换。 uwsgi_pass 是nginx接收请求后转交给uwsgi处理经过的端口（nginx把每个请求传递到服务器绑定的端口 9001，并且使用 uwsgi 协议通信。），需要与 uwsgi.ini.d 内设置的端口一致。 UWSGI_CHDIR 是项目的根目录，就是项目所在的全路径目录 UWSGI_SCRIPT 是项目入口文件相对于项目的路径（'.'表示一个层级）。设置完成之后，在 client_max_body_size 最大上传大小。 终端重启nginx以及运行uwsgi： sudo service nginx reload & uwsgi --ini /python/uwsgi.ini.d/uwsgi9001.ini 扩展： 1.nginx.conf 也可能这样的完整形式： # mysite_nginx.conf # the upstream component nginx needs to connect to upstream django { # server unix:///path/to/your/mysite/mysite.sock; # for a file socket server 127.0.0.1:8001; # for a web port socket (we'll use this first) } # configuration of the server server { # the port your site will be served on listen 8000; # the domain name it will serve for server_name .example.com; # substitute your machine's IP address or FQDN charset utf-8; access_log /var/log/nginx/www.test.com.access.log; error_log /var/log/nginx/www.test.com.error.log; # max upload size client_max_body_size 75M; # adjust to taste # Django media location /media { alias /path/to/your/mysite/media; # your Django project's media files - amend as required } location /static { alias /path/to/your/mysite/static; # your Django project's static files - amend as required } # Finally, send all non-media requests to the Django server. location / { uwsgi_pass django; include /path/to/your/mysite/uwsgi_params; # the uwsgi_params file you installed } } 相当于本来直接设置 uwsgi_pass 的值，现在改成了先把值赋给变量 django，再把变量 django 设置到 uwsgi_pass 上。upstream 常用于需要做负载均衡的场景，一个 upstream 里可以配置多个 server。 2.可以用 UNIX socket 取代 TCP port， Nginx 中需要使用 proxy_pass 对 uWSGI 这个地址进行反向代理，是使用 TCP Socket 的运行方式。使用 Unix Sockets 的方式好处是开销低，效率高。 对 nginx.conf 做如下修改： server unix:///path/to/your/mysite/mysite.sock; # for a file socket # server 127.0.0.1:8001; # for a web port socket (we'll use this first) 注：注意，有三条斜线，由 unix:// 和 /path/to/sock.sock 两部分组成。 对 uwsgi.ini 修改： [uwsgi] socket = /path/to/sock.sock chmod-socket = 666 ... 注：生成的 sock 文件可能会缺少执行权限，可以通过设置 chmod-socket = 666 解决。 重启nginx，并在次运行uWSGI： uwsgi --socket mysite.sock --wsgi-file test.py 3.查看 nginx 错误日志文件，默认的错误日志目录： nginx error log(/var/log/nginx/error.log)。如果错误可以查看cat /var/log/nginx/error.log 也可以指定日志文件： access_log /var/log/nginx/www.test.com.access.log; error_log /var/log/nginx/www.test.com.error.log; 4.配置 SSL 证书 如果要配置 SSL 证书，只要修改 Nginx 的配置即可： server{ ssl_certificate crt; ssl_certificate_key key; ... } 更详细的配置可以参考 StackOverflow。可以使用 Let's Encrypt 生成免费的 SSL 证书。欲知使用方法点击这篇文章：《你的网站还没用上 HTTPS 吗》。 5.每次 uWSGI 是不会在系统启动时自动启动的，所以可以添加自定义系统服务启动。 方法有很多种： rc.local 编辑文件/etc/rc.local, 添加下面内容到这行代码之前exit 0: uwsgi --ini /python/uwsgi.ini.d/uwsgi9001.ini 注：ubuntu 16.x 不再使用 inited 管理系统服务，所以去掉了 /etc/rc.local，改用 systemd systemd （1）创建一个自己的系统服务（rc-local.service 或 uwsgi.service都可以） sudo vim /etc/systemd/system/rc-local.service 填写内容： [Unit] Description=/etc/rc.local Compatibility ConditionPathExists=/etc/rc.local After=network.target [Service] Type=forking ExecStart=/etc/rc.local start TimeoutSec=0 RemainAfterExit=yes [Install] WantedBy=multi-user.target 说明 ConditionPathExists：为服务启动时执行的命令，不能用相对路径， 一定要全路径。也可以将命令写到任意的.sh文件。 （2）创建rc.local文件(如果没有的话)： sudo touch /etc/rc.local sudo vim /etc/rc.local 首先第一次添加#!/bin/bash，添加需要启动执行的代码： uwsgi --ini /python/uwsgi.ini.d/uwsgi9001.ini 最后，然后添加执行权限：sudo chmod +x /etc/rc.local （3）启动和关闭服务 启用： sudo systemctl enable rc-local.service 启动服务： sudo systemctl start rc-local.service 可以查看进程，确认一下服务是否启动： ps aux|grep rc-local 最后，可以试试重启服务器看看是不是真生效:sudo reboot 注意：也可以通过 systemctl status rc-local.service and journalctl -xe 查看详细日志 其它，如 进程监控Supervisor、crontab等 sudo apt-get install supervisor 配置Supervisor。 转到Supervisor的配置文件目录： cd /etc/supervisor/conf.d/ 新建并打开一个名为blog.conf的配置文件： touch blog.conf vim blog.conf 配置内容： # 进程的名字，取一个以后自己一眼知道是什么的名字。 [program:blog] # 定义命令。你只要注意后面的目录对就行。特别注意「run:app」的run，这个名字是你网站应用的文件名。我的是run.py，就写run。 command=/home/www/blog/venv/bin/gunicorn run:app -c /home/www/blog/gunicorn.conf # 网站目录 directory=/home/www/blog # 进程所属用户。之前为博客建立过一个小号www，你还记得？ user=www # 自动重启设置。 autostart=true autorestart=true # 日志存放位置。 stdout_logfile=/home/www/blog/logs/gunicorn_supervisor.log # 设置环境变量。这里这行的意思是：设置环境变量MODE的值为UAT。请根据自己的需要配置，如没有需要这行可以删除。 environment = MODE=\"UAT\" 简单配置： [program:blog] command=vapor run --env=production directory=/root/blog # 修改vapor项目目录 autorestart=true user=root # vapor项目所属用户用户名 stdout_logfile=/var/log/supervisor/%(program_name)-stdout.log stderr_logfile=/var/log/supervisor/%(program_name)-stderr.log 加载并生效Supervisor配置： sudo supervisorctl reread sudo supervisorctl update 或 sudo supervisorctl add blog sudo supervisorctl start blog 重启Supervisor： sudo service supervisor stop sudo service supervisor start 错误处理 创建软链接： ln -s /usr/local/python3/bin/python3 /usr/bin/python 第二个参数是目标地址，链到该地址上 如果遇到下面的报错： ln: failed to create symbolic link '/usr/bin/python': File exists 说明已经有链接链到 /usr/bin/python上了，删除即可，使用命令 rm -rf /usr/bin/python 测试 uwsgi 是否正常 ，在终端执行 uwsgi --http :8001 --wsgi-file /data/test.py uwsgi 执行报错，报错内容如下 uwsgi: option '--http' is ambiguous; possibilities: '--http-socket' '--https-socket-modifier2' '--https-socket-modifier1' '--https-socket' '--http11-socket' '--http-socket-modifier2' '--http-socket-modifier1' getopt_long() error 查看uwsgi安装位置,终端执行 ： whereis uwsgi 执行结果为： uwsgi: /usr/sbin/uwsgi /usr/lib64/uwsgi /etc/uwsgi.d /etc/uwsgi.ini 定位原因为： 上面两个uwsgi文件均缺失plugin插件，所以需要自行安装plugin插件：uwsgi-plugin-python 安装 uwsgi-plugin-python 提示：安装之前需要先安装 uwsgi-plugin-common 安装步骤如下： apt install uwsgi-plugin-common centos安装，需要先搜索 yum search vim uwsgi-plugin-python 找到对应版本的 uwsgi-plugin-python，然后在 yum install 一下： yum install -y uwsgi-plugin-pythonXXX 再次执行uwsgi --http :8001 --wsgi-file test.py 依旧报同样错误 修改命令为：uwsgi --http-socket :8001 --wsgi-file test.py执行结果如下： uwsgi: unrecognized option ‘–wsgi-file’ getopt_long() error 这是因为： 需要在上面那些未识别选项前加上 --plugin python 来告诉 uWSGI 在使用 python 插件，对于后面那些选项要用 python 插件去解析 再次修改命令为： uwsgi --http-socket :8001 --plugin python --wsgi-file test.py 执行成功！ 2、运行 uwsgi --ini xxx时报错： chdir() to /var/www/EfunForum_Python/EfunForumSite #项目目录,即Django程序目录 chdir(): No such file or directory [core/uwsgi.c line 2623] 把 #项目目录，即Django程序 这个注释去掉就可以了！！！ 3、uwsgi -- unavailable modifier requested: 0 -- 说明是uwsgi出了问题，启动文件需要增加一个配置项，python36表示当前安装的 python 版本为 3.6： plugins = python36 如果是命令行，则用： --plugin python36 4、uwsgi: unrecognized option '--wsgi-file' open(\"/usr/lib64/uwsgi/python_plugin.so\"): No such file or directory [core/utils.c line 3721] !!! UNABLE to load uWSGI plugin: /usr/lib64/uwsgi/python_plugin.so: cannot open shared object file: No such file or directory !!! uwsgi: unrecognized option '--wsgi-file' 说明 python 插件路径错误！确认 yum install -y uwsgi-plugin-pythonXXX 指定的 python 版本，需要明确当前使用的 python 版本，比如 --plugin python36 5、Could not get lock /var/lib/dpkg/lock 解决 E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarily unavailable) E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is another process using it? 出现这个问题可能是有另外一个程序正在运行，导致资源被锁不可用。而导致资源被锁的原因可能是上次运行安装或更新时没有正常完成，进而出现此状况，解决的办法其实很简单： 在终端中执行： sudo rm /var/cache/apt/archives/lock sudo rm /var/lib/dpkg/lock linux 文件夹作用 目录 说明 /bin 二进制可执行命令 /dev 设备特殊文件 /etc 系统管理和配置文件 /etc/rc.d 启动的配置文件和脚本 /home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示 /lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件 /sbin 系统管理命令，这里存放的是系统管理员使用的管理程序 /tmp 公用的临时文件存储点 /root 系统管理员的主目录（呵呵，特权阶级） /mnt 系统提供这个目录是让用户临时挂载其他的文件系统。 /lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里 /proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。 /var 某些大文件的溢出区，比方说各种服务的日志文件 /usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含以下子目录： /usr/x11r6 存放x window的目录 /usr/bin 众多的应用程序 /usr/sbin 超级用户的一些管理程序 /usr/doc linux文档 /usr/include linux下开发和编译应用程序所需要的头文件 /usr/lib 常用的动态链接库和软件包的配置文件 /usr/man 帮助文档 /usr/src 源代码，linux内核的源代码就放在/usr/src/linux里 /usr/local/bin 本地增加的命令 /usr/local/lib 本地增加的库 /bin目录 /bin目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。这些 命令都是二进制文件的可执行程序(bin是 binary —— 二进制的简称)，多是系统中重要的系统文件。 /sbin目录 /sbin目录类似 /bin，也用于存储二进制文件。因为其中的大部分文件多是系统管理员使 用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般不给普通用户使用。 /etc目录 /etc目录存放着各种系统配置文件，其中包括了用户信息文件 /etc/passwd，系统初始化文 件 /etc/rc 等。linux 正是这些文件才得以正常地运行。 /root目录 /root 目录是超级用户的目录。 /lib目录 /lib 目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文 件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副 本，故可以使得可执行文件变得更小，节省空间。 /lib/modules 目录 /lib/modules 目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新引 导系统所需的模块(例如网络和文件系统驱动)。 /dev目录 /dev 目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用 户可以通过访问 /dev/mouse 来访问鼠标的输入，就像访问其他文件一样。 /tmp目录 /tmp 目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用 /var/tmp 来代替 /tmp ，因为前者可能拥有一个更大的磁盘空间。 /boot目录 /boot 目录存放引导加载器(bootstrap loader)使用的文件，如 lilo，核心映像也经常放在这里，而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，这时使用单独的文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在ide硬盘的前1024柱面内。 /mnt目录 /mnt 目录是系统管理员临时安装(mount)文件系统的安装点。程序并不自动支持安装到 /mnt。/mnt 下面可以分为许多子目录，例如 /mnt/dosa 可能是使用msdos文件系统的软驱， 而 /mnt/exta 可能是使用ext2文件系统的软驱，/mnt/cdrom 光驱等等。 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-21 22:26:34 更新 "},"Development/macOS.html":{"url":"Development/macOS.html","title":"macOS","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 macOS macOS Catalina 10.15 第三方软件文件提示已损坏解决办法 mac安全来源 macOS 终端操作剪切版的内容 macOS 检查MP3、m4a音频或视频文件的比特率 macOS 开启或关闭 SIP Mac 故障排查的方法汇总 macOS Develop macOS 代码打开文件和文件夹 macOS 分享功能 macOS App notarize 公证 iTerm2技巧 Pycharm pycharm for mac 代码编辑区设置自动换行 PyCharm 创建.py自动添加文件头注释 PyCharm for mac 代码区域设置隐藏分隔线 PyCharm 批量查找及替换 QuickTime Player 使用 QuickTime 链接iPhone时, 提示 \"这项操作无法完成\". Sublime Text3 安装install package sublime text3格式化json epub文件 PopClip Finder 在 Finder 标题栏显示完整路径 Apple Configurator 2 Mac 、iPad、 iPhone 电池和充电器问题 Visual Studio Code (VSCode) 快捷键 Kaleidoscope [TOC] macOS macOS Catalina 10.15 第三方软件文件提示已损坏解决办法 sudo xattr -r -d com.apple.quarantine xxx.app quarantine 这个单字就是隔离、封锁的意思。 而com.apple.quarantine这个EA代表的也是差不多意思，表示有此属性的档案是需要确认才可以执行的。一但使用者确认后，此属性就会被取消掉。（跟在系统偏好设置-安全性与隐私-通用-允许从以下位置下载的App:，应该是一样的命令操作。） What should I do about com.apple.quarantine? 无效证书的 App，可能强制自行签名： codesign --force --deep --sign - /Applications/xxx.app mac安全来源 允许任何来源：sudo spctl --master-disable 禁止任何来源：sudo spctl --master-enable macOS 终端操作剪切版的内容 pbcopy : 表示复制到剪切版 pbpaste ：表示粘贴剪切版 统计剪贴板中文本的行数 pbpaste | wc -l 统计剪贴板中文本的单词数 pbpaste | wc -w 对剪贴板中的文本行进行排序后重新写回剪贴板 pbpaste | sort | pbcopy 对剪贴板中的文本行进行倒序后放回剪贴板 pbpaste | rev | pbcopy 移除剪贴板中重复的文本行，然后写回剪贴板 pbpaste | sort | uniq | pbcopy 找出剪贴板中文本中存在的重复行，并复制后写回剪贴板（包含重复行的一行） pbpaste | sort | uniq -d | pbcopy 找出剪贴板中文本中存在的重复行，并复制后写回剪贴板（不包含重复行） pbpaste | sort | uniq -u | pbcopy 对剪贴板中的 HTML 文本进行清理后写回剪贴板 pbpaste | tidy | pbcopy 显示剪贴板中文本的前 5 行 pbpaste | head -n 5 显示剪贴板中文本的最后 5 行 pbpaste | tail -n 5 将剪贴板中文本里存在的 Tab 跳格符号转成空格 pbpaste | expand | pbcopy macOS 检查MP3、m4a音频或视频文件的比特率 afinfo xxx.mp4 示例： ➜ ~ afinfo /Users/HTC/Downloads/1920x886.mp4 File: /Users/HTC/Downloads/1920x886.mp4 File type ID: mp4f Num Tracks: 1 ---- Data format: 2 ch, 44100 Hz, 'aac ' (0x00000000) 0 bits/channel, 0 bytes/packet, 1024 frames/packet, 0 bytes/frame no channel layout. estimated duration: 28.025034 sec audio bytes: 889871 audio packets: 1209 bit rate: 253588 bits per second packet size upper bound: 1019 maximum packet size: 1019 audio data file offset: 294288 optimized audio 1235904 valid frames + 2112 priming + 0 remainder = 1238016 format list: [ 0] format: 2 ch, 44100 Hz, 'aac ' (0x00000000) 0 bits/channel, 0 bytes/packet, 1024 frames/packet, 0 bytes/frame Channel layout: Stereo (L R) 如何从Mac OS X的命令行检查MP3，m4a，音频文件的比特率 | MOS86 macOS 开启或关闭 SIP SIP（System Integrity Protection，系统完整性保护），是 OS X El Capitan（v10.11） 时开始采用的一项安全技术，SIP 将一些文件目录和系统应用保护了起来。但这会影响我们一些使用或设置，比如：更改系统应用图标、终端操作系统目录文件提示「Operation not permitted」、Finder 无法编辑系统目录里的文件、安装一些工具软件需要将文件拷贝到系统限制更改的文件夹。想要继续操作必须关闭 Mac电脑的“系统完整性保护”（SIP）机制 查看SIP状态 在终端输入：csrutil status 关闭SIP csrutil disable 因为 SIP 是系统级的权限操作，我们无法直接关闭它，需要前往「macOS 恢复功能」下进行。具体步骤如下： 1、将 Mac 关机再开机时，立即在键盘上按住 Command ⌘ + R，直到看到 Apple 标志或旋转的地球时松开。 2、屏幕上出现苹果的标志和进度条，进入Recovery模式； 3、在屏幕最上方的工具栏找到实用工具，打开终端，输入：csrutil disable； 4、关掉终端，重启 Mac； 5、重启以后可以在终端中查看状态确认。 开启SIP 与关闭的步骤类似，只是在实用工具，打开终端后输入csrutil enable 注：SIP 是避免软件任意修改或覆盖任意系统文件或应用，日常还是建议保持开启状态的。 macOS 开启或关闭 SIP - 少数派 Mac 故障排查的方法汇总 可以做一些操作进行排除问题： 重置SMC：如何重置 Mac 上的系统管理控制器 (SMC) - Apple 支持(仅适用于搭载 Intel 处理器的 Mac 电脑。) 重置NVRAM： 重置 Mac 上的 NVRAM 或 PRAM - Apple 支持 (仅适用于搭载 Intel 处理器的 Mac 电脑。) 运行Apple诊断看是否有报错：如何在 Mac 上使用“Apple 诊断” 新建测试帐户：如何在 Mac 上使用另一个用户帐户测试问题 - Apple 支持 (了解是不是您用户帐户中的软件导致了这个问题，为此，请设置一个新的用户帐户，然后登录这个帐户，并尝试用这个帐户重现问题。) 进安全模式是否正常：如何在 Mac 上使用安全模式 - Apple 支持 如果问题未解决建议可致电Apple支持协助或预约检测400-666-8800，或选择自助协助 联系Apple支持 或前往 Apple Store 商店 或 Apple 授权服务提供商 处检测。 macOS Develop macOS 代码打开文件和文件夹 #打开文件 [[NSWorkspace sharedWorkspace] openFile:文件路径]; #打开文件夹 [[NSWorkspace sharedWorkspace] selectFile:nil inFileViewerRootedAtPath:文件夹路径]; macOS 分享功能 Share: let picker = NSSharingServicePicker(items: [img]) picker.delegate = self picker.show(relativeTo: .zero, of: sender as! NSView, preferredEdge: .maxX) AirDrop: let service = NSSharingService(named: .sendViaAirDrop)! let items: [NSImage] = [img] if service.canPerform(withItems: items) { service.delegate = self service.perform(withItems: items) } else { print(\"Cannot perform AirDrop!\") } Creating a Custom macOS Sharing Service in Swift - Tristen Miller - Medium macOS Development - NSSharingService & NSSharingServicePicker - 简书 JustinFincher/WebDrop: 💻 Share your Mac's current chrome tab via airdrop airshare with swift | FaiChou's Blog macOS App notarize 公证 macOS app 实现自动化 notarize 脚本 | 落格博客 Notarizing macOS Software Before Distribution | Apple Developer Documentation Resolving Common Notarization Issues | Apple Developer Documentation Signing Mac Software with Developer ID - Apple Developer Upload a macOS app to be notarized - Xcode Help iTerm2技巧 iTerm2新手技巧 Pycharm pycharm for mac 代码编辑区设置自动换行 Editor区域： Perferences -> Editor -> General -> Soft Wraps -> Use soft wraps in editor 2019 更新为： Perferences -> Editor -> General -> Soft Wraps -> Soft wraps files: *.*;*.md; *.txt; *.rst; *.adoc 可选选择要换行的文件类型。 Console区域： Perferences -> Editor -> General -> Console -> Use soft wraps in console PyCharm 创建.py自动添加文件头注释 设置位置： Windows and Linux：File -> Settings -> Editor -> File and Code Templates macOS：PyCharm -> Preferences -> Editor -> File and Code Templates 参考Xcode的模板，写出最终： #!/usr/bin/env python #coding=utf-8 ''' ${NAME}.py ${PROJECT_NAME} Created by iHTCboy at ${DATE} Copyright © ${YEAR} iHTCboy(ihetiancong@gmail.com). All rights reserved. ''' if __name__ == '__main__': pass 官方文档： https://www.jetbrains.com/help/pycharm/2018.1/settings-file-and-code-templates.html?utm_content=2018.1&utm_medium=link&utm_source=product&utm_campaign=PY PyCharm for mac 代码区域设置隐藏分隔线 Preferences -> Editor -> General -> Appearance 口 Show hard wrap guide (configured in Code Style options) PyCharm 批量查找及替换 macOS: Common + R 替换 Common + Shift + F 全局查找 Common + Shift + R 全局替换 Windows： Ctrl + R 替换 Ctrl + Shift + F 全局查找 Ctrl + Shift + R 全局替换 QuickTime Player 使用 QuickTime 链接iPhone时, 提示 \"这项操作无法完成\". 似乎是在录制 iPhone 时强行拔出数据线导致的，重启 iPhone 就可以啦 Sublime Text3 安装install package ctrl + 快捷键 ` 或者 View -> Show Console 菜单打开控制台 输入: import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) 手动安装： Click the Preferences > Browse Packages… menu Browse up a folder and then into the Installed Packages/ folder Download Package Control.sublime-package and copy it into the Installed Packages/ directory Restart Sublime Text sublime text3格式化json 方法1 打开 Sublime，command + shift + p -> Install package(简写pci也可以) 搜索 Pretty JSON，回车安装 方法2： cd ~/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages git clone https://github.com/dzhibas/SublimePrettyJson.git 格式化快捷键 : macOS: command + ctrl + j Windows: ctrl + alt + j dzhibas/SublimePrettyJson 注：安装HTML-CSS-JS Prettify也不错！ epub文件 编辑epub： calibre - E-book management Chrome插件： EpubPress - Read the web offline GitHub - alexadam/save-as-ebook: Save a web page/selection as an eBook (.epub format) - a Chrome/Firefox/Opera Web Extension PopClip 插件目录： ~/Library/Application Support/PopClip/Extensions/ PopClip Extensions： https://pilotmoon.com/popclip/extensions/ Finder 在 Finder 标题栏显示完整路径 defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES;killall Finder 还原 defaults delete com.apple.finder _FXShowPosixPathInTitle;killall Finder Apple Configurator 2 所有设备->选中当前iPhone->添加->应用，找到您想要ipa的那个应用->添加 command+shift+G ~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/ iOS获取App ipa包以及资源文件 - 简书 Mac 、iPad、 iPhone 电池和充电器问题 为 Mac 笔记本电脑找到正确的电源适配器和电源线 - Apple 支持 如果 USB-C 电源适配器无法为 Mac 笔记本电脑充电 - Apple 支持 为 iPhone 快速充电 - Apple 支持 用 iPad 或 Mac 笔记本电脑电源适配器为 iPhone 充电 - Apple 支持 关于 Apple USB-C 至闪电连接线 - Apple 支持 确定 Mac 笔记本电脑的电池循环计数 - Apple 支持 电池 - Apple (中国大陆) 关于 Mac 笔记本电脑电池 - Apple 支持 iPhone 电池更换 - 官方 Apple 支持 Visual Studio Code (VSCode) 快捷键 根据您的当前上下文访问所有可用命令：⇧⌘P 快速打开文件：⌘P 更改语言模式：⌘KM 切换侧边栏：⌘B Visual Studio Code Tips and Tricks Kaleidoscope Kaleidoscope 结合 SourceTree 进行代码对比，配置方式： 点击 Kaleidoscope 菜单 –> Integration –> 把 Kaleidoscope 和 Git 两个 Tab 中的命令行工具都安装好 打开 SourceTree > Preference > Diff ，配置 External Diff / Merge 选项，Diff 和 Merge 的工具都选择 Custom，然后填入如下配置： Diff Command： `/usr/local/bin/ksdiff` Arguments： `--partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"` Merge Command： `/usr/local/bin/ksdiff` Arguments： `--merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot` 可以给 SourceTree 加一个自定义动作，快捷键按自己的喜好设置，参数项填 difftool -y -t sourcetree $SHA 即可。 使用方法 比对任意两个 commit 之间的改动： 按住⌘，选择两个commit，点击刚刚配置的快捷键，即可唤起 Kaleidoscope 查看某个文件的改动：直接右键单击文件，选择 External Diff（也可以对照上面的方法加个快捷键） 解决冲突：右键单击冲突的文件，使用外部工具解决冲突(如下图) 代码比对神器 Kaleidoscope | Punmy 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-12-26 17:27:56 更新 "},"Development/MultiMedia.html":{"url":"Development/MultiMedia.html","title":"MultiMedia","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 什么是 m3u8 什么是 epub epub电子书的内部结构 常见文件格式的文件头 什么是 m3u8 说到 m3u8 就要先说说 HLS（HTTP Live Streaming）。HLS 是 Apple 公司针对 iPhone、iPod、iTouch 等移动设备，而研发的基于 HTTP 协议的流媒体解决方案。在 HLS 技术中，Web 服务器可以向客户端提供接近实时的音视频流，但是它又是使用的标准的 HTTP 协议。所以基本上，比较大型的点播直播类服务，都是基于 HLS 的。 而该技术的原理，就是将视频文件或者视频流，进行切片（ts文件），并建立索引文件（m3u8），它支持的视频流编码为 H.264，音频流编码为 AAC。 简单来说，基于 HLS 的视频流，会将完整的视频，切割成一个个比较小的视频片段（ts 文件），然后根据协议组合成一个 m3u8 文件。这些比较小的 ts 文件，是可以单独播放的。而视频播放器，拿到 m3u8 文件之后，根据对其内 ts 片段的索引，连续播放不同的视频片段，来达到流畅的播放效果。 论如何下载一个在线的m3u8文件到本地成为一个mp4! - 51CTO.COM FFMPEG mp4 from http live streaming m3u8 file? 解密HLS中的AES加密 - newnewfeng的专栏 - CSDN博客 什么是 epub epub 全称为 Electronic Publication 的缩写，意为：电子出版，epub于2007年9月成为国际数位出版论坛（IDPF）的正式标准，以取代旧的开放Open eBook电子书标准。一个 EPUB 就是一个简单 ZIP 格式文件（使用 .epub 扩展名），其中包括按照预先定义的方式排列的文件。 epub电子书的内部结构 epub格式电子书遵循IDPF推出的OCF规范，OCF规范遵循ZIP压缩技术，即epub电子书本身就是一个ZIP文件，我们将epub格式电子书的后缀.epub修改为.zip后，可以通过解压缩软件进行浏览或解压处理。所以这种格式的电子书开放性非常好， 我们可以更改它的源代码。一个未经加密处理的epub电子书以三个部分组成，其文件结构： 1、文件：mimetype 2、目录：META-INF 3、目录：OEBPS 1、文件：mimetype 每一本epub电子书均包含一个名为mimetype的文件，且内容不变，用以说明epub的文件格式。文件内容如下： application/epub+zip 2、目录：META-INF 依据OCF规范，META-INF用于存放容器信息，默认情况下（即加密处理），该目录包含一个文件，即container.xml,文件内容如下： container.xml的主要功能用于告诉阅读器，电子书的根文件（rootfile）的路径和打开放式，一般来讲，该container.xml文件也不需要作任何修改，除非你改变了根文件的路径和文件名称。 除container.xml文件之外，OCF还规定了以下几个文件： 1、[manifest.xml]，文件列表 2、[metadata.xml]，元数据 3、[signatures.xml]，数字签名 4、[encryption.xml]，加密 5、[rights.xml]，权限管理对于epub电子书而言，这些文件都是可选的。 3、目录：OEBPS OEBPS目录用于存放OPS文档、OPF文档、CSS文档、NCX文档， OEBPS这个名字是可变的，可以根据containter.xml进行配置。 OPF文档是epub电子书的核心文件，且是一个标准的XML文件，依据OPF规范，主要由五个部分组成： 1、,元数据信息的组成有两种 (1)dc-metadata和 (2)x-metadata 2、，文件列表，由于列出OEBPS文档及相关的文档，有一个子元素构成， ，该元素由三个属性构成。 3、，脊骨，其主要功能是提供书籍的线性阅读次序。由一个子元素构成：,由一个属性构成：idref:即参照menifest列出的ID。 4、,指南,依次列出电子书的特定页面, 例如封面、目录、序言等, 属性值指向文件保存地址。一般情况下，epub电子书可以不用该元素。 5、,导读。可以根据不同的读者水平或者阅读目的, 按一定次序, 选择电子书中的部分页面组成导读。一般情况下，epub电子书可以不用该元素。 epub电子书 -- 目录结构介绍 - 方方和圆圆 书籍解析器sdk设计（epub） - 简书 常见文件格式的文件头 文件格式 文件头(十六进制) JPEG (jpg) FFD8FF PNG (png) 89504E47 GIF (gif) 47494638 TIFF (tif) 49492A00 Windows Bitmap (bmp) 424D 16色位图(bmp) 424D228C010000000000 24色位图(bmp) 424D8240090000000000 256色位图(bmp) 424D8e1B030000000000 CAD (dwg) 41433130 Adobe Photoshop (psd) 38425053000100000000 Rich Text Format (rtf) 7B5C727466 XML (xml) 3C3F786D6C HTML (html) 68746D6C3E HTML (html) 3C21444F435459504520 HTM (htm) 3C21646F637479706520 css 48544D4C207b0D0A0942 js 696B2E71623D696B2E71 Email (eml) 44656C69766572792D646174653A Outlook Express (dbx) CFAD12FEC5FD746F Outlook (pst) 2142444E MS Word/Excel (xls.or.doc) D0CF11E0 MS Word(.docx) 504b0304140006000800 MS Access (mdb) 5374616E64617264204A WordPerfect (wpd) FF575043 Postscript (eps.or.ps) 252150532D41646F6265 Adobe Acrobat (pdf) 255044462D312E Quicken (qdf) AC9EBD8F Windows Password (pwl) E3828596 ZIP Archive (zip) 504B0304 RAR Archive (rar) 52617221 Wave (wav) 57415645 AVI (avi) 41564920 Real Audio (ram) 2E7261FD Real Media (rm) 2E524D46 MPEG (mpg) 000001BA MPEG (mpg) 000001B3 Quicktime (mov) 6D6F6F76 Windows Media (asf) 3026B2758E66CF11 MIDI (mid) 4D546864 wps D0CF11E0A1B11AE10000 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-09-15 23:12:19 更新 "},"Development/Network.html":{"url":"Development/Network.html","title":"Network","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 OSI 第7层 应用层 第6层 表达层 第5层 会话层 第4层 传输层 第3层 网络层 第2层 数据链接层 第1层 物理层 TCP/IP HTTP/HTTPS Accept-Language 的 q=0.9 q=0.8 是什么意思？ SSL/TLS SSL 证书 VPN [TOC] OSI 开放式系统互联模型（英语：Open System Interconnection Model，缩写：OSI；简称为OSI模型）是一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO/IEC 7498-1。 第7层 应用层 应用层（Application Layer）提供为应用软件而设的接口，以设置与另一应用软件之间的通信。例如: HTTP、HTTPS、FTP、TELNET、SSH、SMTP、POP3、HTML等。 第6层 表达层 表达层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式。 第5层 会话层 会话层（Session Layer）负责在数据传输中设置和维护计算机网络中两台计算机之间的通信连接。 第4层 传输层 传输层（Transport Layer）把传输表头（TH，Transport Header）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。例如:传输控制协议（TCP）等。 第3层 网络层 网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成报文。网络表头包含了网络数据。例如:互联网协议（IP）等。 第2层 数据链接层 数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成信息框（Data Frame）。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。 分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。 第1层 物理层 物理层（Physical Layer）在局部局域网上传送数据帧（Data Frame），它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机接口卡等。 OSI模型 - 维基百科 TCP/IP TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是一个网络通信模型，以及一整个网络传输协议家族，为网际网络的基础通信架构。 HTTP/HTTPS HTTP 请求分为三个部分： 请求行 请求头 消息主体 HTTP 请求方法: GET POST HEAD OPTIONS PUT DELETE TRACE CONNECT Content-Type: application/x-www-form-urlencoded multipart/form-data application/json text/xml text/html text/plain 四种常见的 POST 提交数据方式 | JerryQu 的小站 Accept-Language 的 q=0.9 q=0.8 是什么意思？ Accept-Language：zh-CN,zh;q=0.9,en;q=0.8 表示：“我更喜欢简体中文，但会接受中文(繁体)和其他类型的英语。 这被称为相对品质因子。它从0到1的范围指定用户喜欢的语言，每个语言可以被赋予一个相关的质量值，该质量值表示用户对该范围指定的语言的偏好的估计。质量值的默认为“q=1”。 HTTP/1.1: Header Field Definitions SSL/TLS SSL与TLS在传输层与应用层之间对网络连接进行加密。 SSL：安全套接字协议(Secure Sockets Layer)，及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。 TLS：传输层安全性协议(Transport Layer Security)，用于在两个通信应用程序之间提供保密性和数据完整性。 SSL 证书 SSL 证书分为三大类，他们的安全性是递增的，当然价格和安全系数成正比。 DV（Domain Validation Certificate）：DV证书适合个人网站使用，申请证书时，CA 只验证域名信息。几分钟之内就能签发。 OV（ Organization Validation Certificate）：OV证书需要认证公司的信息。1-2天签发。 EV（ Extended Validation Certificate）：EV证书的认证最为严格，一般会要求提供纸质材料。签发时间也较久。 VPN VPN （Virtual Private Network, 虚拟专用网）发展至今已经不在是一个单纯的经过加密的访问隧道，它已经融合了访问控制、传输管理、加密、路由选择、可用性管理等多种功能，并在全球的信息安全体系中发挥着重要的作用。 主流的VPN协议有 PPTP、L2TP、IPSec、OpenVPN 和 SSTP 等。 PPTP、L2TP、IPSec、OpenVPN和SSTP的区别 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-12-26 17:27:56 更新 "},"Development/Perl.html":{"url":"Development/Perl.html","title":"Perl","keywords":"","body":"[TOC] Perl 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-09-08 21:58:58 更新 "},"Development/PHP.html":{"url":"Development/PHP.html","title":"PHP","keywords":"","body":"[TOC] PHP 维基百科：PHP是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入HTML中使用。PHP的语法借鉴吸收C语言、Java和Perl等流行计算机语言的特点，易于一般程序员学习。PHP的主要目标是允许网络开发人员快速编写动态页面，但PHP也被用于其他很多领域。 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-07 15:38:23 更新 "},"Development/Python.html":{"url":"Development/Python.html","title":"Python","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Python Python实现Zip文件的暴力破解 自动生成和安装requirements.txt依赖 python数组list中的字典的某个key排序 python比较时间大小 python 时间日期格式化符号 Python:os.path.join()产生的斜杠在Windows和Linux下的不同表现和解决方法 Python-OpenCV python判断字符串是否纯数字 PIL获取PNG图像的alpha值 Python json Python json dumps 非标准类型 Python 解析iOS的 p12、mobileprovision文件内容 Python异常之后输出异常信息（行号） Python常见的异常类型 openpyxl怎么将文本单元格变成超链接？ POP3收取邮件 python 获取邮件的所有收件人 python 时间对象多加一天、一小时、一分钟 Python 保存web页面的方法 Python中保留两位小数的方法 保留两位小数，并做四舍五入处理 仅保留两位小数，无需四舍五入 python下载文件 python 更新 requirements.txt 版本号 python3 open()函数文件操作模式 APScheduler Django Django: 使用 Q 对象构建复杂的查询语句 Django 使用jquery提交post请求 Django下载文件时，中文文件名问题 Django 使用HttpResponse返回图片、使用流响应处理视频 Django 数据库 ORM 常用查询筛选方法总结 django log日志的配置 Django 国际化和本地化 Django Server Error: port is already in use（Django 启动服务失败，端口已被占用） DateTime compare in django template Django User 模型 扩展 Django User 模型 Django Model set Null or None Django 不区分大小写的用户名允许登录 设置 Django ModelAdmin 为只读 Django version Django REST framework 关闭 Debug 后，静态资源无法显示问题 Django设置时区USE_TZ问题 Django外键（ForeignKey）related_name 的作用 Django 数据库查询结果去重 Django 数据模型 ForeignKey 的 on_delete 属性 Django 模板 Django 重定向 Django 模型多个属性设置为唯一 Django class view 增加权限判断 Django 中 url 和 path 的区别 Django logging 日志 matplotlib macOS 系统 matplotlib 无法显示中文的问题 Excel openpyxl获取excel中函数公式的结果值 爬虫 Python Selenium 元素text获取不到内容 项目部署 Fabric uWSGI 和 Nginx [TOC] Python Python实现Zip文件的暴力破解 #!/usr/bin/python # coding=utf-8 import zipfile if __name__ == '__main__': z = zipfile.ZipFile('/Users/HTC/Downloads/abc.zip') #跑的字典为当前目录下的dictionary.txt for password in range(653060, 100000000) : print password try: z.extractall(path='/Users/HTC/Downloads/', pwd=str(password)) print 'password is:', password break except Exception, e: print(e) pass 自动生成和安装requirements.txt依赖 生成requirements.txt文件 pip freeze > requirements.txt 安装requirements.txt依赖 pip install -r requirements.txt python数组list中的字典的某个key排序 from operator import itemgetter rows = [ {'fname': 'Brian', 'lname': 'Jones', 'uid': 1003}, {'fname': 'David', 'lname': 'Beazley', 'uid': 1002}, {'fname': 'John', 'lname': 'Cleese', 'uid': 1001}, {'fname': 'Big', 'lname': 'Jones', 'uid': 1004} ] rows_by_fname = sorted(rows, key=itemgetter('fname')) #Log [{'fname': 'Big', 'uid': 1004, 'lname': 'Jones'}, {'fname': 'Brian', 'uid': 1003, 'lname': 'Jones'}, {'fname': 'David', 'uid': 1002, 'lname': 'Beazley'}, {'fname': 'John', 'uid': 1001, 'lname': 'Cleese'}] itemgetter()有时候也可以用 lambda 表达式代替: rows_by_fname = sorted(rows, key=lambda r: r['fname']) 但是，使用 itemgetter() 方式会运行的稍微快点。因此，如果你对性能要求比较高的话就使用 itemgetter() 方式。 1.13 通过某个关键字排序一个字典列表 — python3-cookbook 3.0.0 文档 python字典排序、按照list中的字典的某个key排序 - 一步一步 - CSDN博客 python比较时间大小 a = '2017-10-18 22:17:46' b = '2017-10-19 22:17:40' print a > b # 结果False 解释：python中字符串的大小比较，是按照字符顺序，从前往后依次比较字符的ASCII数值，例如‘abc’要小于‘abd’。因此，时间字符串也可以直接比大小。 python 时间日期格式化符号 %y 两位数的年份表示（00-99） %Y 四位数的年份表示（000-9999） %m 月份（01-12） %d 月内中的一天（0-31） %H 24小时制小时数（0-23） %I 12小时制小时数（01-12） %M 分钟数（00=59） %S 秒（00-59） %a 本地简化星期名称 %A 本地完整星期名称 %b 本地简化的月份名称 %B 本地完整的月份名称 %c 本地相应的日期表示和时间表示 %j 年内的一天（001-366） %p 本地A.M.或P.M.的等价符 %U 一年中的星期数（00-53）星期天为星期的开始 %w 星期（0-6），星期天为星期的开始 %W 一年中的星期数（00-53）星期一为星期的开始 %x 本地相应的日期表示 %X 本地相应的时间表示 %Z 当前时区的名称 %% %号本身 Python:os.path.join()产生的斜杠在Windows和Linux下的不同表现和解决方法 import os.path from pathlib import Path result = os.path.join('a', 'b', 'c') print(result) result = Path(result).as_posix() print(result) #or result = result.replace('\\\\', '/') print(result) Python:os.path.join()产生的斜杠在Windows和Linux下的不同表现和解决方法 - Penguin Python-OpenCV 给深度学习入门者的Python快速教程 - 番外篇之Python-OpenCV - 知乎 opencv python 从摄像头获取视频/从文件获取视频 /保存视频 基于Python的OpenCV图像处理3 利用MoviePy將影片加入音訊 python判断字符串是否纯数字 通过抛出异常 def is_num_by_except(num): try: int(num) return True except ValueError: print(\"ValueError\", num) 通过isdigit() string.isdigit() 通过正则表达式 re.match(r\"d+$\", a) PIL获取PNG图像的alpha值 # refer: https://www.oschina.net/code/snippet_580365_11452 def is_png_alpha(path): if os.path.splitext(path)[1] in ['.png', '.PNG']: if Image.open(path, 'r').mode == 'RGBA': try: img = Image.open(path) img.load() except: info = '这不是图片格式: 。' + os.path.basename(path) return (False, info) alpha = img.split()[3] arr = numpy.asarray(alpha) count = 0 for i in range(0, img.size[0] - 1): for j in range(0, img.size[1] - 1): if arr[j][i] 10: break if count > 10: info = '有 Alpha 通道，{} 个。'.format(str(count)) #print(info) return (True, info) else: #这张图片约等于没有alpha通道 info = '有开启 Alpha 通道，但图片没有 Alpha 通道。' return (False, info) else: info = '图片没有 Alpha 通道。' return (False, info) else: info = '文件 {} 不是 png 格式。'.format(os.path.basename(path)) return (False, info) # refer: https://www.jianshu.com/p/26f8c106a20d def is_png_transparent(path): if not check_fileMode(path) in ['.png', '.PNG']: info = '文件 {} 不是 png 格式。'.format(os.path.basename(path)) return (False, info) # Open file im = Image.open(path, 'r') # get image scale width, height = im.size #print('Original image size: %sx%s' % (width, height)) # for for w in range(0, width): for h in range(0, height): pixel = im.getpixel((w, h)) if (isinstance(pixel , int)): #\"It's PNG8 info = '是一张 PNG8 图片，包含透明区域。' return (True, info) if (len(pixel) > 3): if (pixel[3] != 255): info = '图片包含透明区域。' return (True, info) else: info = '图片没有透明区域(alpha值)。' return (False, info) info = '图片没有透明区域。' return (False, info) 查看文件的alpha通道 python，使用PIL库对图片进行操作 - 每天1990 - 博客园 PIL 简明教程 - 基本用法 | 始终 python – 如何使用PIL获取PNG图像的alpha值？ - 程序园 Python json json.dumps() 将一个Python数据结构转换为一个JSON编码的字符串 json.loads() 将一个JSON编码的字符串转换为一个Python数据结构 json无空格： dict = {} json.dumps(dict, separators=(',', ':')) 要输出中文需要指定ensure_ascii参数为False： dict = {} json.dumps(dict, ensure_ascii=False) Python - json without whitespaces - Stack Overflow Python json dumps 非标准类型 Python 优雅地 dumps 非标准类型 - 掘金 Python 解析iOS的 p12、mobileprovision文件内容 Python查看ipa UDID和其他基本信息 - 简书 cryptography - Python: reading a pkcs12 certificate with pyOpenSSL.crypto - Stack Overflow Python：用pyOpenSSL.crypto读取pkcs12证书 - 代码日志 那些证书相关的玩意儿(SSL,X.509,PEM,DER,CRT,CER,KEY,CSR,P12等) - guogangj - 博客园 Python异常之后输出异常信息（行号） python2.x捕获异常语法： try: ...some functions... except Exception, e: print(e) python3.x捕获异常语法： try: ...some functions... except Exception as e: print(e) 注意这里 Exception, e 变成了 Exception as e Untitled.py示例代码： import traceback try: form = None form['user'] = 'iHTCboy' except Exception as e: print('str(e):\\t', str(e)) print('repr(e):\\t', repr(e)) print('e.message:\\t', e.message) print('traceback.print_exc():'); traceback.print_exc() print ('traceback.format_exc():\\n{}'.format(traceback.format_exc())) 1、str(e) 返回字符串类型，只给出异常信息，不包括异常信息的类型，如TypeError的异常信息：'NoneType' object does not support item assignment 2、repr(e) 给出较全的异常信息，包括异常信息的类型，如TypeError的异常信息：TypeError(\"'NoneType' object does not support item assignment\") 3、e.message Python2 获得的信息同str(e)，但 Python3 则异常报错： Traceback (most recent call last): File \"Untitled.py\", line 6, in form['user'] = 'iHTCboy' TypeError: 'NoneType' object does not support item assignment During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"Untitled.py\", line 10, in print('e.message:\\t', e.message) AttributeError: 'TypeError' object has no attribute 'message' 4、采用traceback模块 需要导入traceback模块，此时获取的信息最全，与python命令行运行程序出现错误信息一致。使用traceback.print_exc()打印异常信息到标准错误，使用traceback.format_exc()将同样的输出获取为字符串。你可以向这些函数传递各种各样的参数来限制输出，或者重新打印到像文件类型的对象。 Traceback (most recent call last): File \"Untitled.py\", line 6, in form['user'] = 'iHTCboy' TypeError: 'NoneType' object does not support item assignment Python常见的异常类型 NameError：尝试访问一个未申明的变量 >>> v NameError: name 'v' is not defined ZeroDivisionError：除数为0 >>> v = 1/0 ZeroDivisionError: int division or modulo by zero SyntaxError：语法错误 int int SyntaxError: invalid syntax (, line 1) IndexError：索引超出范围 List = [2] >>> List[3] Traceback (most recent call last): File \"\", line 1, in List[3] IndexError: list index out of range KeyError：字典关键字不存在 Dic = {'1':'yes', '2':'no'} >>> Dic['3'] Traceback (most recent call last): File \"\", line 1, in Dic['3'] KeyError: '3' IOError：输入输出错误 >>> f = open('abc') IOError: [Errno 2] No such file or directory: 'abc' AttributeError：访问未知对象属性 >>> class Worker: def Work(): print(\"I am working\") >>> w = Worker() >>> w.a Traceback (most recent call last): File \"\", line 1, in w.a AttributeError: 'Worker' object has no attribute 'a' 8.ValueError：数值错误 >>> int('d') Traceback (most recent call last): File \"\", line 1, in int('d') ValueError: invalid literal for int() with base 10: 'd' TypeError：类型错误 >>> iStr = '22' >>> iVal = 22 >>> obj = iStr + iVal; Traceback (most recent call last): File \"\", line 1, in obj = iStr + iVal; TypeError: Can't convert 'int' object to str implicitly AssertionError：断言错误 >>> assert 1 != 1 Traceback (most recent call last): File \"\", line 1, in assert 1 != 1 AssertionError 11.MemoryError:内存耗尽异常 NotImplementedError：方法没实现引起的异常 class Base(object): def __init__(self): pass def action(self): #抛出异常，说明该接口方法未实现 raise NotImplementedError LookupError：键、值不存在引发的异常 LookupError异常是IndexError、KeyError的基类， 如果你不确定数据类型是字典还是列表时，可以用LookupError捕获此异常 StandardError 标准异常 除StopIteration, GeneratorExit, KeyboardInterrupt 和SystemExit外，其他异常都是StandarError的子类。 错误检测与异常处理区别在于：错误检测是在正常的程序流中，处理不可预见问题的代码，例如一个调用操作未能成功结束。 Python异常处理和异常类型 - Monica的专栏 - CSDN博客 openpyxl怎么将文本单元格变成超链接？ from openpyxl import load_workbook wb = load_workbook('/user/HTC/boy.xlsx') s = wb.get_sheet_by_name('Sheet') s['B4'].hyperlink = 'https://iHTCboy.com' s['B4'].style = 'Hyperlink' wb.save('trial.xlsx') POP3收取邮件 用Python的poplib模块收取邮件分两步：第一步是用POP3协议把邮件获取到本地，第二步是用email模块把原始邮件解析为Message对象，然后，用适当的形式把邮件内容展示给用户即可。 SMTP用于发送邮件，如果要收取邮件呢？ 收取邮件就是编写一个MUA作为客户端，从MDA把邮件获取到用户的电脑或者手机上。收取邮件最常用的协议是POP协议，目前版本号是3，俗称POP3。 Python内置一个poplib模块，实现了POP3协议，可以直接用来收邮件。 注意到POP3协议收取的不是一个已经可以阅读的邮件本身，而是邮件的原始文本，这和SMTP协议很像，SMTP发送的也是经过编码后的一大段文本。 要把POP3收取的文本变成可以阅读的邮件，还需要用email模块提供的各种类来解析原始文本，变成可阅读的邮件对象。 所以，收取邮件分两步： 第一步：用poplib把邮件的原始文本下载到本地； 第二部：用email解析原始文本，还原为邮件对象。 通过POP3下载邮件，POP3协议本身很简单，以下面的代码为例，我们来获取最新的一封邮件内容： import poplib # 输入邮件地址, 口令和POP3服务器地址: email = input('Email: ') password = input('Password: ') pop3_server = input('POP3 server: ') # 连接到POP3服务器: server = poplib.POP3(pop3_server) # 可以打开或关闭调试信息: server.set_debuglevel(1) # 可选:打印POP3服务器的欢迎文字: print(server.getwelcome().decode('utf-8')) # 身份认证: server.user(email) server.pass_(password) # stat()返回邮件数量和占用空间: print('Messages: %s. Size: %s' % server.stat()) # list()返回所有邮件的编号: resp, mails, octets = server.list() # 可以查看返回的列表类似[b'1 82923', b'2 2184', ...] print(mails) # 获取最新一封邮件, 注意索引号从1开始: index = len(mails) resp, lines, octets = server.retr(index) # lines存储了邮件的原始文本的每一行, # 可以获得整个邮件的原始文本: msg_content = b'\\r\\n'.join(lines).decode('utf-8') # 稍后解析出邮件: msg = Parser().parsestr(msg_content) # 可以根据邮件索引号直接从服务器删除邮件: # server.dele(index) # 关闭连接: server.quit() 用POP3获取邮件其实很简单，要获取所有邮件，只需要循环使用retr()把每一封邮件内容拿到即可。真正麻烦的是把邮件的原始内容解析为可以阅读的邮件对象。 解析邮件 解析邮件的过程和上一节构造邮件正好相反，因此，先导入必要的模块： from email.parser import Parser from email.header import decode_header from email.utils import parseaddr import poplib 只需要一行代码就可以把邮件内容解析为Message对象： msg = Parser().parsestr(msg_content) 但是这个Message对象本身可能是一个MIMEMultipart对象，即包含嵌套的其他MIMEBase对象，嵌套可能还不止一层。 所以我们要递归地打印出Message对象的层次结构： # indent用于缩进显示: def print_info(msg, indent=0): if indent == 0: for header in ['From', 'To', 'Subject']: value = msg.get(header, '') if value: if header=='Subject': value = decode_str(value) else: hdr, addr = parseaddr(value) name = decode_str(hdr) value = u'%s ' % (name, addr) print('%s%s: %s' % (' ' * indent, header, value)) if (msg.is_multipart()): parts = msg.get_payload() for n, part in enumerate(parts): print('%spart %s' % (' ' * indent, n)) print('%s--------------------' % (' ' * indent)) print_info(part, indent + 1) else: content_type = msg.get_content_type() if content_type=='text/plain' or content_type=='text/html': content = msg.get_payload(decode=True) charset = guess_charset(msg) if charset: content = content.decode(charset) print('%sText: %s' % (' ' * indent, content + '...')) else: print('%sAttachment: %s' % (' ' * indent, content_type)) 邮件的Subject或者Email中包含的名字都是经过编码后的str，要正常显示，就必须decode： def decode_str(s): value, charset = decode_header(s)[0] if charset: value = value.decode(charset) return value decode_header()返回一个list，因为像Cc、Bcc这样的字段可能包含多个邮件地址，所以解析出来的会有多个元素。上面的代码我们偷了个懒，只取了第一个元素。 文本邮件的内容也是str，还需要检测编码，否则，非UTF-8编码的邮件都无法正常显示： def guess_charset(msg): charset = msg.get_charset() if charset is None: content_type = msg.get('Content-Type', '').lower() pos = content_type.find('charset=') if pos >= 0: charset = content_type[pos + 8:].strip() return charset POP3收取邮件 · Python 3零起点教程 · 看云 Python3读取邮件内容-卫莨-51CTO博客 8.6 Python使用poplib模块收取邮件 python 获取邮件的所有收件人 from email.utils import getaddresses tos = msg.get_all('to', []) ccs = msg.get_all('cc', []) resent_tos = msg.get_all('resent-to', []) resent_ccs = msg.get_all('resent-cc', []) all_recipients = getaddresses(tos + ccs + resent_tos + resent_ccs) 18.1.9. email.utils: Miscellaneous utilities — Python 2.7.17 documentation python 时间对象多加一天、一小时、一分钟 首先看下，datetime的使用 import datetime >>> print datetime.datetime.now() 2017-07-15 15:01:24.619000 格式化时间 ``` print datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\") 2017-07-15 15:01:35 print datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\") 2017-07-15 15:01 print datetime.datetime.now().strftime(\"%Y%m%d\") 20170715 ``` 多加一天 >>> print (datetime.datetime.now()+datetime.timedelta(days=1)).strftime(\"%Y-%m-% d %H:%M:%S\") 2017-07-16 15:12:42 >>> 多加一小时 >>> print (datetime.datetime.now()+datetime.timedelta(hours=1)).strftime(\"%Y-%m- %d %H:%M:%S\") 2017-07-15 16:10:43 >>> 多加一分钟 >>> print (datetime.datetime.now()+datetime.timedelta(minutes=1)).strftime(\"%Y-% m-%d %H:%M:%S\") 2017-07-15 15:12:56 >>> python 当前时间多加一天、一小时、一分钟_翔云-CSDN博客 Python 保存web页面的方法 Python保存.mht格式网页 | X小Mickey'Blog 利用selenium保存静态网页 - 简书 竟用python作出这样的事！定时自动发 QQ 信息 - 知乎 Python中保留两位小数的方法 保留两位小数，并做四舍五入处理 方法一: 使用字符串格式化 >>> a = 12.345 >>> print(\"%.2f\" % a) 12.35 方法二: 使用round内置函数 >>> a = 12.345 >>> round(a, 2) 12.35 方法三: 使用decimal模块 >>> from decimal import Decimal >>> a = 12.345 >>> Decimal(a).quantize(Decimal(\"0.00\")) Decimal('12.35') 仅保留两位小数，无需四舍五入 方法一: 使用序列中切片 >>> a = 12.345 >>> str(a).split('.')[0] + '.' + str(a).split('.')[1][:2] '12.34' 方法二: 使用re模块 >>> import re >>> a = 12.345 >>> re.findall(r\"\\d{1,}?\\.\\d{2}\", str(a)) ['12.34'] Python中保留两位小数的几种方法Python杰瑞的专栏-CSDN博客 python下载文件 一次性下载: import requests image_url = \"https://www.iHTCboy.com/ihtc.png\" r = requests.get(image_url) with open(\"python_logo.png\",'wb') as f: f.write(r.content) 大文件下载： import requests file_url = \"https://www.iHTCboy.com/ihtc.mp4\" r = requests.get(file_url, stream=True) with open(\"python.pdf\", \"wb\") as file: for chunk in r.iter_content(chunk_size=1024): if chunk: file.write(chunk) 注：如果文件比较大的话，那么下载下来的文件先放在内存中，内存还是比较有压力的。所以为了防止内存不够用的现象出现，我们要想办法把下载的文件分块写到磁盘中 python下载文件 ---- requests python 更新 requirements.txt 版本号 # 安装 pip install pur # 运行pur会将软件包更新为当前最新版本 pur -r requirements.txt Pur 不会修改你的环境或者安装的软件包，它只修改你的requirements.txt 文件。 命令行选项 命令 全命令 命令作用 -r --requirement 路径 要更新的requirements.txt 文件；默认情况下，如果存在当前目录，则使用当前目录中的requirements.txt。 -o --output 路径 将更新的软件包输出到这里文件；默认值为覆盖输入 requirements.txt 文件。 -i --interactive 在更新每个软件包之前交互式提示。 -f --force 即使在输入 requirements.txt 文件中没有指定任何版本，也强制更新软件包。 -d --dry-run 输出更改为 STDOUT，而不是覆盖 requirements.txt 文件。 -n --no-recursive 阻止更新嵌套的要求文件。 -s --skip 文本 逗号分隔的软件包列表以跳过更新。 x --only 文本 逗号分隔的软件包列表。仅更新这些软件包。 x --pre 文本 逗号分隔的软件包列表，以允许更新到预发行版本。使用 \"*\" 可将所有软件包更新为预发行版本。默认情况下，软件包仅更新为稳定版本。 -z --nonzero-exit-code 当所有软件包up-to-date时退出，当某些软件包更新时，11退出。 默认值为成功时退出状态零，而失败为非零。 x --version 显示版本和退出。 x --help 显示这里消息并退出。 alanhamlett/pip-update-requirements python3 open()函数文件操作模式 模式 描述 r 打开的文件为只读模式。文件指针位于文件的开头，这是默认模式。 rb 打开仅用二进制格式读取的文件。文件指针位于文件的开头，这是默认模式。 r+ 打开读写文件。文件指针放在文件的开头。 rb+ 以二进制格式打开一个用于读写文件。文件指针放在文件的开头。 w 打开仅供写入的文件。 如果文件存在，则覆盖该文件。 如果文件不存在，则创建一个新文件进行写入。 wb 打开仅用二进制格式写入的文件。如果文件存在，则覆盖该文件。 如果文件不存在，则创建一个新文件进行写入。 w+ 打开写入和取读的文件。如果文件存在，则覆盖现有文件。 如果文件不存在，创建一个新文件进行阅读和写入。 wb+ 打开一个二进制格式的写入和读取文件。 如果文件存在，则覆盖现有文件。 如果文件不存在，创建一个新文件进行阅读和写入。 a 打开一个文件进行追加。 如果文件存在，则文件指针位于文件末尾。也就是说，文件处于追加模式。如果文件不存在，它将创建一个新文件进行写入。 ab 打开一个二进制格式的文件。如果文件存在，则文件指针位于文件末尾。 也就是说，文件处于追加模式。如果文件不存在，它将创建一个新文件进行写入。 a+ 打开一个文件，用于追加和阅读。 如果文件存在，则文件指针位于文件末尾。 文件以附加模式打开。 如果文件不存在，它将创建一个新文件进行阅读和写入。 ab+ 打开一个二进制格式的附加和读取文件。 如果文件存在，则文件指针位于文件末尾。文件以附加模式打开。如果文件不存在，它将创建一个新文件进行读取和写入。 APScheduler 组件： 触发器（trigger）：触发器中包含调度逻辑，每个作业都有自己的触发器来决定下次运行时间。除了它们自己初始配置以外，触发器完全是无状态的。 作业存储器（job store）：存储被调度的作业，默认的作业存储器只是简单地把作业保存在内存中，其他的作业存储器则是将作业保存在数据库中，当作业被保存在一个持久化的作业存储器中的时候，该作业的数据会被序列化，并在加载时被反序列化，需要说明的是，作业存储器不能共享调度器。 执行器（executor）：处理作业的运行，通常通过在作业中提交指定的可调用对象到一个线程或者进程池来进行，当作业完成时，执行器会将通知调度器。 调度器（scheduler）：配置作业存储器和执行器可以在调度器中完成。例如添加、修改、移除作业，根据不同的应用场景，可以选择不同的调度器，可选的将在下一小节展示。 调度器： BlockingScheduler：调用start函数后会阻塞当前线程。当调度器是你应用中唯一要运行的东西时（如上例）使用。 BackgroundScheduler：调用start后主线程不会阻塞。当你不运行任何其他框架时使用，并希望调度器在你应用的后台执行。 AsyncIOScheduler：当你的程序使用了asyncio（一个异步框架）的时候使用。 GeventScheduler：当你的程序使用了gevent（高性能的Python并发框架）的时候使用。 TornadoScheduler：当你的程序基于Tornado（一个web框架）的时候使用。 TwistedScheduler：当你的程序使用了Twisted（一个异步框架）的时候使用 QtScheduler：如果你的应用是一个Qt应用的时候可以使用。 特别参数： coalesce：当由于某种原因导致某个job积攒了好几次没有实际运行（比如说系统挂了5分钟后恢复，有一个任务是每分钟跑一次的，按道理说这5分钟内本来是“计划”运行5次的，但实际没有执行），如果coalesce为True，下次这个job被submit给executor时，只会执行1次，也就是最后这次，如果为False，那么会执行5次（不一定，因为还有其他条件，看后面misfire_grace_time的解释） max_instance: 就是说同一个job同一时间最多有几个实例再跑，比如一个耗时10分钟的job，被指定每分钟运行1次，如果我们max_instance值为5，那么在第6~10分钟上，新的运行实例不会被执行，因为已经有5个实例在跑了 misfire_grace_time：设想和上述coalesce类似的场景，如果一个job本来14:00有一次执行，但是由于某种原因没有被调度上，现在14:01了，这个14:00的运行实例被提交时，会检查它预订运行的时间和当下时间的差值（这里是1分钟），大于我们设置的30秒限制，那么这个运行实例不会被执行。 Python定时任务框架apscheduler_小龙在线-CSDN博客 APScheduler中两种调度器的区别及使用过程中要注意的问题_ybdesire的专栏-CSDN博客 Python进阶 - 定时运行程序 APScheduler_清欢-CSDN博客 Python - APScheduler - 听雨危楼 - 博客园 Django Django: 使用 Q 对象构建复杂的查询语句 多个字段模糊查询， 括号中的下划线是双下划线，双下划线前是字段名，双下划线后可以是icontains或contains,区别是是否大小写敏感，竖线是或的意思 sciencenews = models.Sciencenews.objects.filter(Q(title__icontains=keyword)\\ |Q(content__icontains=keyword)|Q(author__icontains=keyword)) django学习——如何实现简单的搜索功能 Django模糊查询 - CSDN博客 Django 使用jquery提交post请求 Django在处理post请求时出现403错误 原文1：http://www.cnblogs.com/xtt-w/p/6232559.html 解决方法： 在settings.py里面的MIDDLEWARE_CLASSES中去掉“‘django.middleware.csrf.CsrfViewMiddleware’,”。 原文2：http://blog.csdn.net/sherry_rui/article/details/50523725 解决方法： 1.在发送post请求的html页面前加入 {% csrf_token %} 如： {% csrf_token %} 登录 2.在处理post数据的view前加 @csrf_exempt 装饰符，如： from django.views.decorators.csrf import csrf_exempt,csrf_protect @csrf_exempt def profile_delte(request): Django下载文件时，中文文件名问题 解决： from django.utils.encoding import escape_uri_path from django.http import HttpResponse def test(request): file_name = '测试.txt' content = ... response = HttpResponse(content, content_type='application/octet-stream') response['Content-Disposition'] = \"attachment; filename*=utf-8''{}\".format(escape_uri_path(file_name)) return response Django中设置Content-Disposition保存中文命名的文件 - ludaming的回答 - SegmentFault 思否 Django 使用HttpResponse返回图片、使用流响应处理视频 def read_img(request): \"\"\" : 读取图片 :param request: :return: \"\"\" try: data = request.GET file_name = data.get(\"file_name\") imagepath = os.path.join(settings.BASE_DIR, \"static/images/{}\".format(file_name)) # 图片路径 with open(imagepath, 'rb') as f: image_data = f.read() return HttpResponse(image_data, content_type=\"image/png\") except Exception as e: print(e) return HttpResponse(str(e)) Django 中使用流响应处理视频 - 栖迟于一丘 Django 数据库 ORM 常用查询筛选方法总结 __exact 精确等于 like ‘aaa’ __iexact 精确等于 忽略大小写 ilike ‘aaa’ __contains 包含 like ‘%aaa%’ __icontains 包含 忽略大小写 ilike ‘%aaa%’，但是对于sqlite来说，contains的作用效果等同于icontains。 __gt 大于 __gte 大于等于 __lt 小于 __lte 小于等于 __in 存在于一个list范围内 __startswith 以…开头 __istartswith 以…开头 忽略大小写 __endswith 以…结尾 __iendswith 以…结尾，忽略大小写 __range 在…范围内 __year 日期字段的年份 __month 日期字段的月份 __day 日期字段的日 __isnull=True/False __isnull=True 与 __exact=None的区别 数据库时间查询： 2、gte：大于等于某个时间： a=yourobject.objects .filter(youdatetimcolumn__gte=start) 3、lt：小于 a=yourobject.objects .filter(youdatetimcolumn__lt=start) 4、lte：小于等于 a=yourobject.objects .filter(youdatetimcolumn__lte=start) 5、range：查询时间段 start_date = datetime.date(2005, 1, 1) end_date = datetime.date(2005, 3, 31) Entry.objects.filter(pub_date__range=(start_date, end_date)) 6、year：查询某年 Entry.objects.filter(pub_date__year=2005) 7、month：查询某月 Entry.objects.filter(pub_date__month=12) 8、day：某天 Entry.objects.filter(pub_date__day=3) 9、week_day：星期几 Entry.objects.filter(pub_date__week_day=2) 不等于/不包含于 User.objects.filter().exclude(age=10) # 查询年龄不为10的用户 User.objects.filter().exclude(age__in=[10, 20]) # 查询年龄不为在 [10, 20] 的用户 Making queries 执行查询 | Django 文档 | Django django log日志的配置 django开发-log日志的配置 - wyzane - SegmentFault 思否 django 日志logging的配置以及处理-David-51CTO博客 在Django使用Logging製作紀錄檔 - Carson's Tech save@note.youdao.com Logging | Django documentation | Django Django 国际化和本地化 国际化一般简称 i18n，代表 Internationalization 中 i 和 n 有 18 个字母；本地化简称 L10n，表示 Localization 中 l 和 n 中有 10 个字母。 通过_()或ugettext()函数，指定某个变量需要翻译 from django.utils.translation import ugettext as _ from django.http import HttpResponse def my_view(request): output = _(\"Welcome to my site.\") return HttpResponse(output) 首先你要在模版的顶部加载{% load i18n %}, 使用{% trans %}模板标签 {% load i18n %} {% trans \"This is the title.\" %} {% trans myvar %} #提前翻译字符串但是不显示出来 {% trans \"This is the title\" as the_title %} {{ the_title }} blocktrans标签允许你通过使用占位符来标记由文字和可变内容组成的复杂句子进行翻译 {% blocktrans %}This string will have {{ value }} inside.{% endblocktrans %} {% blocktrans with amount=article.price %} That will cost $ {{ amount }}. {% endblocktrans %} {% blocktrans with myvar=value|filter %} This will have {{ myvar }} inside. {% endblocktrans %} 使用 makemessages 命令生成 po 语言文件 python manage.py makemessages -l zh-cn //中文简体 python manage.py makemessages -l en //英文 注：执行命令后，Django会在根目录及其子目录下搜集所有需要翻译的字符串，默认情况下它会搜索.html、.txt和.py文件，然后在根目录的locale/LANG/LC_MESSAGES目录下创建一个django.po文件。 在执行这一步之前，请先通过 xgettext --version 确认自己是否安装了 GNU gettext。GNU gettext 是一个标准 i18n L10n 库，Django 和很多其他语言和库的多语言模块都调用了 GNU gettext。 macOS: $ brew install gettext $ brew link --force gettext ubuntu: $ apt update $ apt install gettext 编译 compilemessages 命令编译 mo 文件，将其编译成对应的*.mo文件，Django在运行时将使用*.mo文件对网站进行国际化翻译 django-admin compilemessages Django将自动搜索所有的.po文件，将它们都翻译成.mo文件。 django Django 国际化和本地化 - 刘江的django教程 Django 多语言教程 (i18n) - 掘金 Django Server Error: port is already in use（Django 启动服务失败，端口已被占用） A more simple solution just type sudo fuser -k 8000/tcp. This should kill all the processes associated with port 8000. EDIT: For osx users you can use sudo lsof -t -i tcp:8000 | xargs kill -9 sudo lsof -t -i tcp:8000 | xargs kill -9 python - Django Server Error: port is already in use - Stack Overflow DateTime compare in django template {% if pub_date|date:\"YmdHis\" != mod_date|date:\"YmdHis\" %} 文章已于 {{ topic.mod_date }} 修改 {% endif %} DateTime compare in django template - Stack Overflow Django User 模型 username password email first_name last_name groups user_permissions is_active 表示用户是否是活跃的 is_staff 可以登录django的admin后台 is_superuser 能够登录admin后台，并拥有所有注册模型的管理权限。 last_login date_joined 扩展 Django User 模型 class Profile(models.Model): user = models.OneToOneField(User, on_delete=models.CASCADE) icon = models.CharField(max_length=1000, blank=True) email = models.CharField(max_length=60, blank=True) mobile = models.CharField(max_length=60, blank=True) def __str__(self): return 'Profile for user {}'.format(self.user.username) @receiver(post_save, sender=User) def create_user_profile(sender, instance, created, **kwargs): if created: Profile.objects.create(user=instance) @receiver(post_save, sender=User) def save_user_profile(sender, instance, created, **kwargs): if not instance.is_superuser: instance.profile.save() # if created: # instance.profile.save() 如何扩展 Django User 模型 - 后端 - 掘金 DjangoWeb开发--增加用户字段 - 简书 Django不区分大小写的登录，混合大小写用户名 - VoidCC Django Model set Null or None blank=True allows you to input nothing (i.e \"\", None) and keep it empty. null=True means the database row is allowed to be NULL. default=None sets the field to None if no other value is given. Django Model Field Default to Null Django 不区分大小写的用户名允许登录 Django 支持不区分大小写筛选运算符iexact： user = User.objects.get(username__iexact=name) 设置 Django ModelAdmin 为只读 重写 get_readonly_fields 方法： class PostAdmin(admin.ModelAdmin): ... def get_readonly_fields(self, request, obj=None): return ['user'] 定义 readonly_fields 属性 class PostAdmin(admin.ModelAdmin): ... readonly_fields = [field.name for field in ModelName._meta.fields] 其它的属性有，禁用添加操作 has_add_permission，禁用修改操作 has_change_permission，禁用删除操作，has_delete_permission 如何在 django admin site 中设置某个 model 只读 - Huang Huang 的博客 The Django admin site | Django documentation | Django Django version >>> import django >>> django.VERSION or python -c \"import django; print(django.get_version())\" python - How to check Django version - Stack Overflow Django REST framework Serializers - Django REST framework中文站点 Django REST framework API 指南 - 掘金 Django Rest Framework - 安装，配置 与 新建 Serialization - LABELNET - CSDN博客 Django Rest Framework API指南 - Fighting蔚 - 博客园 python 全栈开发，Day95(RESTful API介绍,基于Django实现RESTful API,DRF 序列化) - 肖祥 - 博客园 python 全栈开发，Day96(Django REST framework 视图,django logging配置,django-debug-toolbar使用指南) - 肖祥 - 博客园 关闭 Debug 后，静态资源无法显示问题 Django 关闭 Debug 后无法访问静态资源图片等，可以配置nginx做反向代理, 但是对于调试来说操作比较麻烦, 我们只需在命令 python manage.py runserver 0.0.0.0:8000 后加一个参数 --insecure 就可以啦~~ Django设置时区USE_TZ问题 settings 文件内容： LANGUAGE_CODE = 'zh-hans' TIME_ZONE = 'Asia/Shanghai' USE_TZ = True 如果要设为中国时间，也就是北京时间，请赋值：TIME_ZONE = 'Asia/Shanghai'。注意是上海，不是北京，囧！ 当USE_TZ为False时，TIME_ZONE将成为Django存储所有日期和时间数据时，使用的时区。 当USE_TZ为True 时，它是Django显示模板中的时间，解释表单中的日期，使用的时区。所以，通常我们都将USE_TZ同时设置为False！ Time zones | Django documentation 为什么Django设置时区为TIME_ZONE = Asia/Shanghai USE_TZ = True后，存入mysql中的时间只能是UTC时间 - CSDN博客 django 中的USE_TZ设置为true有何影响? - SegmentFault 思否 Django时区详解_数据库 - CSDN博客 django时区问题时间差8小时 - 简书 django 核心配置项 - 刘江的django教程 Django外键（ForeignKey）related_name 的作用 django 默认每个主表的对象都有一个是外键的属性，可以通过它来查询到所有属于主表的子表的信息。这个属性的名称默认是以子表的名称小写加上_set()来表示，默认返回的是一个querydict对象，可以继续的根据情况来查询等操作。 使用最多的还是 related_name，上面的_set()定义比较麻烦的话，你也可以在定义主表的外键的时候，给这个外键用related_name定义好一个名称. 示例：一个老师对应多个学生 class Teacher(models.Model): name = models.CharField(max_length=50) class Student(models.Modle): name = models.CharField(max_length=50) teacher = models.Foreignkey(Teacher, related_name='student_teacher', on_delete=models.CASCADE, default='') 现在想查询一个老师对应的学生有那些？ 方法一_set()： teacher = Teacher.objects.get(id=1) teacher.student_set.all() 方法二related_name： teacher = Teacher.objects.get(id=1) teacher.student_teacher.all() 查询一个学生所对应的老师的信息？ student = Student.objects.get(id=1) student.teacher student.teacher.name Django 数据库查询结果去重 QuerySet 增加方法 .distinct() 当使用distinct()函数的时候，如果不使用order_by()函数做跟随，那么该函数会自动把当前表中的默认排序字段作为DISTINCT的一个列 Django 数据模型 ForeignKey 的 on_delete 属性 假如有一个订单模型，定义了关联用户模型 class Order(models.Model): user= models.ForeignKey(User, on_delete=models.CASCADE) CASCADE：级联删除，当你删除user记录时，与之关联的所有 order 都会被删除。 PROTECT: 保护模式，如果采用该选项，删除的时候，会抛出ProtectedError错误，也就是说，如果有外键关联，就不允许删除，除非先把关联了外键的记录删除掉。举个例子就是想要删除user，那你要把所有关联了该user的order全部删除才可能删user。 SET_NULL: 置空模式，删除的时候，外键字段被设置为空，前提就是要设置为 blank=True, null=True。删除user后，order 记录里面的user_id 就置为null了。 SET_DEFAULT: 置默认值，删除的时候，外键字段设置为默认值，所以定义外键的时候注意加上一个默认值。 SET(): 自定义一个值，该值只能是对应的实体 DO_NOTHING: Django啥事也不做，你要删就删吧，你的外键值我依然给你保留，但是你要是去做关联查询肯定是查不到了，比如 删除 user后，order 里面的 user_id 依然在，只是再也找不到 user_id 对应的是哪个user了，因为你把他删掉了。 Django 数据模型 ForeignKey 的 on_delete 属性的可选值 - FooFish-Python之禅 Django 模板 Django 模板 | 菜鸟教程 Django 模板进阶 - Django 教程 - 自强学堂 Django 重定向 from django.urls import reverse from django.shortcuts import redirect from django.http import HttpResponseRedirect #投票结果查看 def results(request,question_id=1): return HttpResponse(r\"you're looking at the results of question %s.\" % question_id ) #投票功能 def vote(request,question_id): ''' 投票逻辑 ''' #投票完后跳转到结果页面，如下 return redirect(reverse('polls:results', args=[question_id])) url带参数重定向 - 我只是一只小小鸟的个人页面 - OSCHINA Django 几种重定向的方式_orangleliu 笔记本-CSDN博客 Django URL重定向的3种方法详解 - 知乎 Django 模型多个属性设置为唯一 class Meta: unique_together = (\"title\", \"category\") Django class view 增加权限判断 1/定义一个基类，包含一个 as_view 方法，在 as_view 方法中判断用户权限。然后其他 class view 继承这个基类 from django.contrib.auth.decorators import login_required class LoginRequiredMixin(object): @classmethod def as_view(cls, **initkwargs): view = super(LoginRequiredMixin, cls).as_view(**initkwargs) return login_required(view) 2、定义一个基类，包含一个 dispatch 方法，给这个方法加个权限判断的装饰器。然后其他 class view 继承这个基类 from django.contrib.auth.decorators import login_required from django.utils.decorators import method_decorator from django.views.generic import TemplateView class ProtectedView(TemplateView): template_name = 'secret.html' @method_decorator(login_required) def dispatch(self, *args, **kwargs): return super(ProtectedView, self).dispatch(*args, **kwargs) 怎么给 django class view 增加权限判断 - Huang Huang 的博客 Django 中 url 和 path 的区别 urls.py 在1.x的时候都是采用的url方式。如下 url(r'^', include(\"test1.urls\")), 在2.0中，它推荐使用的是path模块。需要引入包 from django.urls import path path('', include(\"test1.urls\")), 这里要注意的是，如果要使用正则，则要引入re_path，from django.urls import path, re_path。 1.x里面的写法是： url(r’^page=(\\d+)&key=(\\w+)$’, views.detail, name=”detail”), 现在的写法 re_path('page=(?P\\d+)&key=(?P\\w+)', views.detail, name=\"detail\"), 关于系统的urls.py里的namespace的问题，1.x中写法 url(r'^', include(\"test1.urls\", namespace='test1')), 2.0 这么写，在项目urls.py中加上 app_name = 'test1' URL调度器 | Django 3.0 文档 | Django django2笔记:路由path语法 | 程序员Barnes的博客 Django logging 日志 日志 | Django 文档 | Django Django搭建个人博客：日志记录 - 杜赛的博客 django进阶之日志功能 - SegmentFault 思否 matplotlib macOS 系统 matplotlib 无法显示中文的问题 方法一：增加字体 下载你想要的字体（以SimHei.ttf字体为例，网上搜索就有啊） 查看matplotlib的字体存放目录与查找matplotlibrc文件路径 import matplotlib matplotlib.matplotlib_fname() 得到类型的地址： /opt/homebrew/lib/python3.9/site-packages/matplotlib/mpl-data/matplotlibrc 打开这个文件编辑， # 去掉# font.family : sans-serif # 去掉#，在冒号后添加 SimHei（根据自己的字段来改） font.sans-serif : SimHei, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif # 去掉#，将True改为False，用来正常显示负号 axes.unicode_minus : False 然后复制下载好的字体文件到目录 /mpl-data/fonts/ttf 下。 命令命令将 matplotlib 的字体缓存删除 cd ~/.matplotlib/ 如果还不生效，重启电脑吧~ 方法二：代码引用字体 from matplotlib.font_manager import FontProperties def getChineseFont(): return FontProperties(fname='/System/Library/Fonts/PingFang.ttc',size=15) plt.title(\"标题\", fontproperties=getChineseFont()) plt.xlabel(\"x坐标\", fontproperties=getChineseFont()) plt.ylabel(\"y坐标)\", fontproperties=getChineseFont()) 解决macOS下matplotlib无法显示中文的问题 Excel openpyxl获取excel中函数公式的结果值 import openpyxl wb= openpyxl.load_workbook('ihtcboy.xlsx',data_only=True) 创建对象时增加 data_only=True 参数就可以读取值。 爬虫 Python Selenium 元素text获取不到内容 li_list = browser.find_elements_by_class_name('myli') for article in li_list: text = article.text text1 = article.get_attribute('innerHTML') text2 = article.get_attribute('innerText') text3 = article.get_attribute('textContent') 第一个 .text 获取有些为空，所以要用下面的3种方法。 项目部署 Fabric Fabric：官方Fabric，兼容 Python 2 & Python 3，但不兼容Fabric 1.x的fabfile； fabric2： 与Fabric相同，仅作为平滑迁移（使用Fabric包安装1.x 版本，使用Fabric2包安装2.x版本，来实现1.x和2.x的共存）； Fabric3：是一个基于Fabric 1.x 的fork，兼容Python2 & Python3，兼容 Fabric1.x 的 fabfile； Welcome to Fabric! — Fabric documentation 欢迎访问 Fabric 中文文档 — Fabric 文档 Python - Fabric简介 - Anliven - 博客园 远程部署神器 Fabric，支持 Python3 - Python之禅 - CSDN博客 python模块fabric踩坑记录 | 淦 python三大神器之fabric（2.0新特性） - 三只松鼠 - 博客园 Fabric 让 Linux 系统部署变得简单 uWSGI 和 Nginx Python/WSGI 应用快速入门 — uWSGI 2.0 文档 使用uWSGI和nginx来设置Django和你的web服务器 — uWSGI 2.0 文档 Linux檔案權限 部署python项目到linux服务器 | 蓝士钦 使用 uWSGI 和 Nginx 部署 Django 项目 - 掘金 基于nginx和uWSGI在Ubuntu上部署Django | WolfcsTech 用Nginx+uwsgi部署Django | 🍃(yuchanns (Atelier)) Django 二级域名配置 - 简书 域名管理 · Python（Django）环境部署与使用指南 · 看云 Django 教程 11: 部署 Django 到生产环境 - 学习 Web 开发 | MDN Day 15 - 部署Web App - 廖雪峰的官方网站 Python Web部署方式总结 - 简书 Nginx, WSGI, Flask之间的关系 - 勰门歪道 | Shane Talk 基于nginx和uWSGI在Ubuntu上部署Django - 简书 Python项目自动化部署最佳实践@搜狐 | the5fire的技术博客 以正确的方式开源 Python 项目 - OSCHINA Systemd 入门教程：命令篇 - 阮一峰的网络日志 Jenkins部署Python项目实战 - 掘金 CentOS 环境下基于 Nginx uwsgi 搭建 Django 站点 - restran - 博客园 第二期 · 阿里云Python+Flask环境搭建 - 知乎 一.阿里云服务器安装部署及第一个Python爬虫代码实现 - 杨秀璋的专栏 - CSDN博客 如何在阿里云上部署 Django 应用程序 - 阿里云新手学堂 Django + Apache 部署 - - SegmentFault 思否 CentOS设定SFTP用户只能访问家目录 - Adairs的个人空间 - OSCHINA Linux 限制SFTP用户只能访问某个目录 - 经验在于积累而不在于年限---dreamboycx - CSDN博客 Linux创建用户只能访问某个目录 - 做点儿扯谈的事儿 - CSDN博客 BasicChroot - Community Help Wiki CentOS 7部署chroot ssh和sftp监牢 - 大别阿郎的个人空间 - OSCHINA 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2024-07-13 22:38:32 更新 "},"Development/R.html":{"url":"Development/R.html","title":"R","keywords":"","body":"[TOC] R 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-09-08 21:59:04 更新 "},"Development/RegularExpression.html":{"url":"Development/RegularExpression.html","title":"RegularExpression","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 正则表达式 字母、数字、特殊字符最少2种组合（不能有中文和空格）6-20位字符 至少一个大小写字母和数字，特殊字符可选的，至少8位 最少八个字符，至少一个大写字母，一个小写字母和一个数字： 大小写字母、数字、特殊符号 四选三 字母、数字、下划线（_）和句点（.）构成，最多255个字 2~64个字符 正则表达式提取时间 过滤空行或者以#开始的行 千位分割符 [TOC] 正则表达式 正则表达式 – 教程 | 菜鸟教程 字母、数字、特殊字符最少2种组合（不能有中文和空格）6-20位字符 (?!.*\\s)(?!^[\\u4E00-\\u9FA5]+$)(?!^[a-zA-Z]+$)(?!^[\\d]+$)(?!^[^\\u4E00-\\u9FA5a-zA-Z\\d]+$)^.{6,16}$ 至少一个大小写字母和数字，特殊字符可选的，至少8位 ^(?=(.*[a-z]){1,})(?=(.*[A-Z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){0,})(?!.*\\s).{8,}$ 最少八个字符，至少一个大写字母，一个小写字母和一个数字： ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$ 大小写字母、数字、特殊符号 四选三 ^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\\\\W_]+$)(?![a-z0-9]+$)(?![a-z\\\\W_]+$)(?![0-9\\\\W_]+$)[a-zA-Z0-9\\\\W_]{8,}$ 字母、数字、下划线（_）和句点（.）构成，最多255个字 ^[a-zA-Z0-9_.]{2,255}$ 2~64个字符 ^[\\s\\S]{2,64}$ 正则表达式：密码必须至少包含八个字符、至少包含一个数字、小写和大写的字母以及特殊字符 - 纯净的天空 正则表达式提取时间 ^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$ 过滤空行或者以#开始的行 grep -Ev \"^$|^#\" /etc/chrony.conf 千位分割符 为了方便阅读，我们通常会在一串长数字中加入“千位分隔符”，即将 1234567890.11 转换成 1,234,567,890.11 。 \\B(?=(?:\\d{3})+(?!\\d)) Python: import re re.sub(r'\\B(?=(?:\\d{3})+(?!\\d))', ',', '1234567890.11') 千位分割符的理解_这个昵称没有被占用吧的博客-CSDN博客 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-08 16:49:38 更新 "},"Development/ReverseEngineering.html":{"url":"Development/ReverseEngineering.html","title":"ReverseEngineering","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 RE（Reverse Engineering，逆向工程） 越狱（Jailbreak） 越狱原理 越狱的保持（Jailbreak Persistence） 1、非完美越狱（Tethered Jailbreaks） 2、完美越狱（Untethered Jailbreaks） 漏洞类型(Exploit Type) 1、Bootrom级别 2、iBoot级别 3、Userland级别 Cydia “AFC2”补丁 Cydia 软件源及插件 Flex AppSync Unified adv-cmds OpenSSH 连接 忘记密码 免密登录 通过USB连接 方法一 方法二 常见错误 使用scp传输文件 scp 命令使用示例 加壳与脱壳 检测是否加壳 脱壳工具 分析工具 Reveal Cycript 实战 Frida 实战 Theos 和 Tweak Tweak及工作原理 Cydia Substrate 破解 绕过 Apple ID 外挂 yacd (Yet Another Code Decrypter) iOS 降级 iOS安全体系结构 macOS AMFI Linux/Unix ELF Python Python 反汇编 软件 010 Editor [TOC] RE（Reverse Engineering，逆向工程） 逆向工程，原名Reverse Engineering，简称RE。 维基百科： 逆向工程，又称反向工程，是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理。 逆向工程 - 维基百科，自由的百科全书 漫谈逆向工程 - PansLabyrinth 越狱（Jailbreak） 越狱不等于盗版安装APP 越狱是要获得设备的完全控制权，拿到所有文件的最高管理权限。在美国越狱苹果设备是合法的，其原因是承认用户对设备拥有完全的所有权。 越狱工具： unc0ver： iOS 11.0 - 14.8 checkra1n：iOS 12.0 - 13.7 and 14.0 Chimera: iOS 12 - 12.5.5 查看支持的系统版本： Can I Jailbreak? - Home iOS系统设备越狱 越狱原理 iPhone 史诗级漏洞 checkm8 攻击原理浅析 Technical analysis of the checkm8 exploit / Digital Security / Habr 越狱的保持（Jailbreak Persistence） 依赖越狱使用的漏洞，越狱的效果可能长期的，也可能在设备关机再开启后消失。为了描述两种不同的越狱，越狱社区把这两种方式叫做 完美越狱（tethered jailbreak）和非完美越狱（untethered jailbreak）。 1、非完美越狱（Tethered Jailbreaks） 非完美越狱是设备重启后就消失的越狱。越狱后的设备每次重启后需要某种方式的重新越狱。通常意味着每次关机再重新开机时需要重新连接到电脑上。由于这个过程中需要USB线缆连接，这就是tethered的意思。这个词tethered也用于不需要USB连接，但需要访问特定网站或执行特定应用程序的重新越狱，如果漏洞是某些提权代码，一个非完美越狱能只由单个漏洞组成。一个例子是limera1n的bootrom漏洞，被目前的大部分iOS4和iOS5越狱使用。另一个例子是iOS的USB内核驱动程序的漏洞。然而，目前没有类似的公开漏洞。 如果没有类似的漏洞可用，进入设备的初始入口可以通过一个应用程序的漏洞来获得很少的权限，如MobileSafari浏览器。然而，单独的这样一个漏洞不能认为是越狱，因为没有附加的内核漏洞，不能禁止所有的安全特性。 所以一个非完美越狱由一个提权代码漏洞组成，或一个非提权代码漏洞结合其他权限提升漏洞。 2、完美越狱（Untethered Jailbreaks） 完美越狱是利用一个设备重启后不会消失的持久漏洞来完成的，完美（untethered）因为设备每次重新启动后不需要重新越狱，所以它是更好的越狱方式。 由于完美越狱需要启动环节的非常特殊地方的漏洞，自然更难完成。过去由于在设备硬件里发现了非常强有力的漏洞，允许在设备的启动环节的早期进行破解，使完美越狱可能实现。 但这些漏洞现在已经消失了，而同样品质的漏洞没有出现。 由于以上原因，完美越狱通常由某种非完美越狱结合附加的允许在设备上保持的漏洞组成。利用开始的非完美越狱来在设备的根目录文件系统上安装附加漏洞。由于首先专有未签名代码必须执行，其次权限要提升以便能对内核打补丁，所以至少需要2个附加的漏洞。 漏洞类型(Exploit Type) 漏洞的存在位置影响你对设备的存取级别。一些允许低级别的硬件存取。另一些受限于沙盒内的许可权限。 1、Bootrom级别 从越狱者的角度看，Bootrom级别的漏洞是最有力的。bootrom在iPhone的硬件内部，它的漏洞不能通过软件更新推送来修复。相反，只能在下一代的硬件版本里修复。在存在limera1n漏洞的情况下，苹果没有发布iPad1或iPhone4的新产品，直到A5处理器的设备，iPad2和iPhone4S发布前，这个漏洞长期存在并为人所知。 Bootrom级别的漏洞不能修复，并且允许对整个启动环节的每个部分进行替换或打补丁（包括内核的启动参数），是最有力的漏洞。由于漏洞在启动环节发生的很早，而且漏洞Payload拥有对硬件的全部读取权限。 如它可以利用AES硬件引擎的GID密码来解密IMG3文件，而IMG3文件允许解密新的iOS更新。 2、iBoot级别 当iBoot里的漏洞达到能提供的特性时，几乎和bootrom里的漏洞一样有力。这些漏洞效果下降是由于iBoot没有固化入硬件，能通过简单的软件升级来修复。 除了这点，iBoot漏洞在启动环节任然很早，能提供给内核启动参数，对内核打补丁，或对硬件直接进行GID密码的AES操作。 3、Userland级别 用户层面级别的越狱是完全基于用户层面进程的漏洞的，像JBME3(http://jailbreakme.com)。这些进程如果是系统进程，就拥有超级用户root权限，如果是用户应用程序，就拥有稍低级别的如mobile用户的权限。不管哪种情况，越狱设备至少需要2个漏洞。第一个漏洞用来完成专有代码执行，第二个漏洞用来使内核的安全措施失效，进行权限提升。 在以前的iOS版本里，只要破解的进程以root超级用户权限运行，代码签名功能就会失效。现在，内核内存崩溃或执行内核代码需要禁止强制代码签名。 和bootrom、iBoot级别漏洞相比，用户层面的漏洞更弱一些。因为即使内核代码执行已经可能了，如GID密码的AES引擎的硬件特性依然不能读取。所以苹果公司对用户层面的漏洞更容易修补；并由于远程用户层面的漏洞能用于iPhone恶意软件的注入，所以苹果公司对这些漏洞经常很快进行修补。 iOS越狱原理详解 - CSDN博客 Cydia Cydia可以理解为越狱之后的AppStore，在Cydia里面可以通过添加源的方式，来获得软件、插件、补丁、皮肤、字体等等。 而Cydia中提供的大部分内容，都是不被苹果官方商店所承认的。而Cydia中也存在收费与免费软件一说。总之我们可以简单理解为，专为越狱用户提供的越狱商店。 Cydia 之父 Jay Freeman（Saurik），起初，Cydia 只是 iPhone OS 1.1 上 Installer.app 的一个开源选择，但在 2008 年 7 月带有 App Store 的 iPhone OS 2.0 推出后，它一跃成为最流行的软件包管理器。 2010 年 9 月，Saurik 的公司宣布收购 Rock Your Phone，即此前仅次于 Cydia 的包管理器软件 Rock.app 的开发商。自此，Cydia Store 成为越狱设备最大的第三方应用提供商。 2018 年 7月，Electra 团队推出了 Cydia 的最后一个版本：Cydia 1.1.30-2。 Cydia Store != Cydia Cydia Store 指代的仅是后端支付系统，“允许用户从 Cydia 的默认存储库购买付费越狱调整，例如BigBoss，MacCiti和ModMyi。它与 Cydia Installer 不同，Cydia Installer 是用户每天与之交互的Cydia应用程序”。 2018年12月14日，Cydia 之父 Jay Freeman（Saurik）于 Reddit 发帖称，考虑在今年年底全面关闭 Cydia Store。早在2017年11月，Cydia 上的两大软件合作来源 ZodTTD&MacCiti 和 ModMyi 相继宣布关闭，Cydia 三大源仅余 BigBoss 一支。 “AFC2”补丁 如果你需要在电脑端访问您设备的根文件系统，则需要安装afc2补丁，对于iOS 7.1 以下越狱设备，请安装Afc2add补丁，对于iOS 7.1 ~iOS 10.3.3 的越狱设备，请安装Apple File Conduit\"2\"补丁。 越狱设备如何安装“AFC2”补丁？越狱教程爱思助手 Cydia 软件源及插件 名字 源地址 备注 雷锋源 http://apt.abcydia.com 蚂蚁源 http://apt.cydia.love A Sileo 蜜蜂源™ https://apt.cydiami.com 嗨客中文源 http://apt.hackcn.net （汉化包大部分出自他手） Acreson’s https://repo.acreson.cn 小苹果 http://apt.cydiabc.top 国内小苹果源，未爆出过安全问题 贴吧 http://apt.cydiaba.cn Netskao http://repo.netskao.com Appsync Unified 插件官方源 https://cydia.akemi.ai/ iCleaner Pro官方源 https://ib-soft.net/cydia/beta/ 此地址为beta版本发布源，目前7.8.0~beta1 已经正式支持 iOS13 Liberity Lite https://ryleyangus.com/repo/ Liberity Lite越狱检测屏蔽插件官方源 FlyJB http://xsf1re.github.io/repo/ FlyJB 越狱检测屏蔽插件官方源 国外知名插件破解网站 https://repo.hackyouriphone.org 国外知名插件破解网站，一些收费插件可以在这找破解版 P佬源 http://pulandres.me/repo/ P佬源，同为国外知名破解资源集散地 HackYouriPhone http://repo.hackyouriphone.org kiiimo http://cydia.kiiimo.org/ frida https://build.frida.re Frida 砸壳应用 CrackerXI http://apt.wxhbts.com/ CrackerXI App脱壳工具 按键精灵 https://apt.mobileanjian.com/ 按键精灵官方源 Flex Flex是John Coates的作品，从推出就被大家视为越狱iOS必装插件之一，至今已经更新到Flex3，支持至最新的系统。通过此插件，你无需太多编程知识，也可以很容易地“操作”系统或App函数，以此来达到修改UI界面和程序功能的目的。 在Flex中你几乎可以修改任何app和自带的系统软件。比如可以修改微信步数、系统UI颜色、修改游戏金币等等。不过免费版的Flex每天只能下载他人分享的脚本两次。 AppSync Unified 安装无签名软件，装修改版软件必备神器。 adv-cmds 用于执行 ps 命令。ps命令是 process status的缩写，使用ps命令可以列出系统当前的进程。 OpenSSH OpenSSH 是 SSH (Secure Shell) 协议的免费开源的实现。SSH 协议可以用来远程控制或者在计算机之间来传送文件。 SSH 是一种网络协议，目的是用于计算机之间的加密登录，由芬兰学者设计SSH协议，将登录信息全部加密，成为了互联网安全的一个基本解决方案，目前成为了Linux的标准配置。 OpenSSH 是一款软件，应用也是非常广泛。 连接 ssh root@[insert IP Address] 默认密码：alpine 更改 root 账号的密码，就终端输入 passwd ： iPhone-HTC:~ root# passwd Changing password for root. New password: 更改 mobile 账号的密码，就终端输入 passwd mobile ： iPhone-HTC:~ root# passwd mobile Changing password for mobile. New password: OpenSSH · Cydia Password · Cydia 忘记密码 iOS 的账号密码存储目录： /private/etc/master.password 对应 root 和 mobile 账号的密码： root:xxxxxxxxxxxxx:0:0::0:0:System Administrator:/var/root:/bin/sh mobile:xxxxxxxxxxxxx:501:501::0:0:Mobile User:/var/mobile:/bin/sh 如果想改回 alpine：smx7MYTQIi2M，即： root:/smx7MYTQIi2M:0:0::0:0:System Administrator:/var/root:/bin/sh mobile:/smx7MYTQIi2M:501:501::0:0:Mobile User:/var/mobile:/bin/sh 如果想改密码为 111111 就可以用 baGYjKhff2jlo。 注：可以在电脑上通过助手工具修改，或者直接用越狱的文件管理app 打开 /private/etc/master.password 文件直接修改。 iOS ssh密码忘记解决办法 - 简书 iOS 越狱机重置ssh密码 - 知乎 免密登录 iOS逆向-设备ssh免密登录 | 继刚的博客 通过USB连接 usbmuxd usbmuxd 是苹果的一个服务，这个服务主要用于在USB协议上实现多路TCP连接，将USB通信抽象为TCP通信。苹果的iTunes、Xcode，都直接或间接地用到了这个服务 方法一 1、通过brew来安装usbmuxd： brew install usbmuxd 2、端口映射： 把 iPhone 的22端口(即SSH端口)映射到 Mac 的10086端口 iproxy 10086 22 3、连接Mac本地的10086端口： ssh -p 10086 root@127.0.0.1 或者： ssh -p 10086 root@localhost 第一次会要求输入密码，出现 ~ root# 就代表连接成功了 mac连接ios设备的方式 | iKiwi 方法二 下载 usbmuxd 1.0.8版本 一定要下载这个 1.0.8 版本，新版本已经不包含这个文件。 在 usbmuxd - A socket daemon to multiplex connections from and to iOS devices 下载1.0.8 版本： usbmuxd-1.0.8.tar.gz 解压文件后，有一个 python-client 文件夹，可以通过 python 来执行映射： python tcprelay.py -t 22:10086 然后就可以 ssh 链接： ssh root@localhost -p 10086 通过USB连接线ssh到iOS中 - iOSRE iOS逆向 | 如何通过usbmuxd实现SSH登录 对 usbmuxd 的一点研究 · Farlanki 使用usbmuxd服务，通过USB连接与PC端、Mac端实现通信，Peertalk的使用 - 简书 常见错误 使用SSH连接设备时，可能会出现“Host key verification failed.”的提示，是因为之前链接过其它设备导致的，需要删除原来的链接信息。 ssh-keygen -f /Users/iHTCboy/.ssh/known_hosts -R 127.0.0.1 或整个文件删除： rm /Users/iHTCboy/.ssh/known_hosts 使用scp传输文件 scp 是 secure copy 的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的，所以速度稍微慢点。 我们需要获得远程服务器上的某个文件，远程服务器既没有配置ftp服务器，没有开启web服务器，也没有做共享，无法通过常规途径获得文件时，只需要通过scp命令便可轻松的达到目的。 我们需要将本机上的文件上传到远程服务器上，远程服务器没有开启ftp服务器或共享，无法通过常规途径上传是，只需要通过scp命令便可以轻松的达到目的。 scp 命令使用示例 从 iOS 复制到 macOS: scp -P10086 root@localhost:/var/mobile/Documents/CrackerXI/xxx.ipa ~/Desktop/ 注：-P 一定要大写字母P，不然就报错 SSH protocol v.1 is no longer supported 。 从 macOS 复制到 iOS: scp -P10086 ~/Desktop/xxx.jpg root@localhost:/var/mobile/Documents/ 可能有用的几个参数: -r: 复制目录。 -v: 和大多数 linux 命令中的 -v 意思一样, 用来显示进度。可以用来查看连接，认证，或是配置错误等。 -C: 使能压缩选项。 -4: 强行使用 IPV4 地址。 -6: 强行使用 IPV6 地址。 加壳与脱壳 iOS端App在上线之前会由苹果商店进行FairPlayDRM数字版权加密保护（称为“加壳”）。要对应用进行分析，就必须先解密（称为“脱壳”），从而得到原始未加密的二进制文件。 检测是否加壳 用otool可以看到二进制文件的信息里有一个cryptid字段，cryptid=1表示已加壳，cryptid=0 表示未加壳。 otool -l MachO | grep crypt 方法2： 用查看 MachO 文件格式的软件打开。在“Load Commands”节点，找到“LC_ENCRYPTION_INFO_64” ，可以看到 “Crypt ID” 的值内容判断。 脱壳工具 脱壳原理：从内存中已解密的数据dump。 CrackerXI：一款全自动脱壳工具，傻瓜式App，支持 iOS 11～iOS 14+，添加 http://cydia.iphonecake.com/ 源或者Cydia搜索名称来下载。 Frida-ios-dump：基于Frida（一个跨平台的轻量级Hook框架）提供的强大功能，通过注入JS实现内存dump，然后利用Python自动复制到macOS生成最终的ipa文件。 Clutch：一款全自动脱壳工具，其原理是把应用运行时的内存数据按照一定格式导出，并重新打包为ipa文件。 dumpdecrypted：开源的，需要先编译、签名，再将其复制到iOS设备中。但非常灵活，效果也很不错。 bfinject：支持iOS 11～iOS 11.4.1。 分析工具 class-dump：一个命令行工具，它利用Objective-C语言的运行时特性将二进制文件中的类、方法及属性等信息导出为头文件。 Reveal：一款强大的UI调试工具，可以调试iOS应用和tvOS应用。它可以在运行时查看App的界面层级关系，还可以实时修改程序界面，不用重新运行程序就可以看到修改之后的效果，免去了每次修改代码后又重新启动的过程。逆向工程里面通常用Reveal来快速定位感兴趣的控件，进而找到控制器，再用Cycript进行事件分析。 Cycript：由Cydia创始人Saurik推出的一款脚本语言，它混合了Objective-C与JavaScript语法解释器，能够探测和修改运行中的应用程序。Cycript主要用于注入目标进程来实现运行时调试，它的优点是重启程序后所有的修改都会失效，对原生程序或代码完全无副作用。越狱环境下，直接在Cydia中搜索“Cycript”安装即可。 FLEXible：FLEX(Flipboard Explorer)是一个iOS应用的内部调试工具。当它加载时，会向目标程序上方添加一个悬浮的工具栏，通过这个工具栏，可以查看和修改视图的层次结构、动态修改类的属性、动态调用实例和方法、动态查看类和框架以及动态修改UI等。与其他调试工具不同，FLEX完全在应用程序内部运行，因此不需要连接到LLDB、Xcode或其他远程调试器，也不需要太多编程知识，仅需手动点几下就能查看很多细节，是一款非常强大的分析工具。FLEXible 是对FLEX的封装，支持iOS 8+ 以上，只需要在Cydia中搜索FLEXible插件即可安装。 Frida：一个跨平台的轻量级Hook框架，支持所有主流操作系统，它可以帮助逆向研究人员对指定的进程进行分析。它主要提供了精简的Python接口和功能丰富的JS接口，除了使用自身的控制台交互以外，还可以利用Python将JS脚本库注入目标进程。使用Frida可以获取进程详细信息、拦截和调用指定函数、注入代码、修改参数、从iOS应用程序中dump类和类方法信息等。Frida源代码托管在GitHub。 Reveal Cydia 安装插件 Reveal2Loader，支持 iOS 14+。 Reveal2Loader · Cydia GitHub - zidaneno5/Reveal2Loader 但是链接到 Mac 调试时，会提示： The operation couldn’t be completed. The app is link against an older version of the Reveal library. You may need to update the Reveal library in your app. 说明当前 macOS Reveal 的 RevealServer.framework 与手机上的 RevealServer.framework 版本不相同，需要更新手机的 RevealServer.framework 才能正常通讯。 解决办法： 用 macOS Reveal 中的 RevealServer.framework 替换 /Library/Frameworks 目录下的 RevealServer.framework。 需要注意的是 Reveal v33 使用的是 RevealServer.xcframework，对应的 iOS 目录是：~/Library/Application\\ Support/Reveal/RevealServer/RevealServer.xcframework/ios-arm64_armv7/RevealServer.framework/。 所以，可以用 macOS 访问设备的 /Library/Frameworks 目录替换，或者用 scp 进行覆盖。 scp -r ~/Library/Application\\ Support/Reveal/RevealServer/RevealServer.xcframework/ios-arm64_armv7/RevealServer.framework/ root@localhost/Library/Frameworks Cycript 实战 cycript -p 进程名称 或： cycript -p 进程ID 注： 取消输入：Ctrl + C 退出：Ctrl + D 取消输入：Command + R 分析视图层次结构 苹果系统中的私有函数在正向开发中是不能使用的，但在逆向分析中可以发挥很大的用途，其中有一个recursiveDescription函数可以用来递归打印任意视图层次结构，再使用.toString()就能输出清晰的格式。 [[UIApp keyWindow] recursiveDescription].toString() 在UIWindow里有一个名为 _autolayoutTrace 的私有函数，该函数的返回值是一个字符串，这个字符串则包含了UIWindow中整个视图的层次结构。 [[UIApp keyWindow] _autolayoutTrace].toString() nextResponder allTargets allControlEvents actionsForTarget: forControlEvent: choose(xxx) dismissViewControllerAnimated: completion: NSHomeDirectory() NSTemporaryDirectory() Cycript Manual iOS文件目录 app目录：/var/containers/Bundle/Application/ 沙盒目录：/var/mobile/Containers/Data/Application/ 获取苹果内购收据： [[NSString alloc] initWithData:[[NSData dataWithContentsOfURL:[[NSBundle mainBundle] appStoreReceiptURL]] base64EncodedDataWithOptions:0] encoding:NSUTF8StringEncoding]; Frida 实战 被控端（iOS端） 在 Cydia 添加软件源：https://build.frida.re/，搜索 “Frida” 进行安装，注意的是下载分为三个插件，for 32-bit/ for A12+ / for pre-A12。安装后，重启SpringBoard，在iOS端看到“frida-server”后台程序，说明安装成功，如下所示： iHTC:~ root# ps -ax | grep frida 25780 ?? 0:00.05 /usr/sbin/frida-server 控制端（macOS端） 推荐使用 python3 安装: pip3 install frida-tools 注：在 macOS 10.15 以上可能会报错，请自行搜索。 1、brew installation of Python 3.6.1: SSL: CERTIFICATE_VERIFY_FAILED certificate verify failed 2、Scraping: SSL: CERTIFICATE_VERIFY_FAILED error for http://en.wikipedia.org Frida 实践 除了主命令 frida 以外，frida-tools 里面还提供了五个实用工具： frida-ls-devices：用于获取可用设备列表 frida-ps：frida-ps与ps命令的功能类似，用于获取进程列表信息 frida-kill：用来结束设备上的某个进程 frida-trace：用于跟踪函数或方法的调用 frida-discover：用于发现程序中内部函数的工具，然后可以使用frida-trace对其进行跟踪。 注：如果这5个命令执行时提示 command not found:，可以用 which frida 查看 frida 所在目录，然后软链接到 ln /xxx/xxx/frida /usr/local/bin/。 公共参数： -U：连接到USB设备。 -D：如果有多个USB设备，可以用该选项指定设备的UDID。 -R/-H：连接到远程frida-server，主要用于远程调试。 frida-ls-devices 示例：： ➜ ~ frida-ls-devices Id Type Name ---------------------------------------- ------ ------------ local local Local System 16b060488c562bfd169d77356bbfeeeb3234e1f4 usb iPhone 19a32eb9495810d5e98825ebd0da0010473e0554 usb iPhone socket remote Local Socket frida-ps 示例： ➜ ~ frida-ps -U -a PID Name Identifier ----- ---------- ----------------------------- 36205 CrackerXI+ com.ipc.crackerxi 39573 Cydia com.saurik.Cydia # Connect Frida to an iPad over USB and list running processes $ frida-ps -U # List running applications $ frida-ps -Ua # List installed applications $ frida-ps -Uai # Connect Frida to the specific device $ frida-ps -D 0216027d1d6d3a03 frida-kill 示例： $ frida-kill -D # List active applications $ frida-ps -D 1d07b5f6a7a72552aca8ab0e6b706f3f3958f63e -a # Connect Frida to the device and kill running process $ frida-kill -D 1d07b5f6a7a72552aca8ab0e6b706f3f3958f63e 5029 # Check if process has been killed $ frida-ps -D 1d07b5f6a7a72552aca8ab0e6b706f3f3958f63e -a frida-trace 示例： # Trace recv* and send* APIs in Safari, insert library names # in logging $ frida-trace --decorate -i \"recv*\" -i \"send*\" Safari # Trace ObjC method calls in Safari $ frida-trace -m \"-[NSView drawRect:]\" Safari # Launch SnapChat on your iPhone and trace crypto API calls $ frida-trace \\ -U \\ -f com.toyopagroup.picaboo \\ -I \"libcommonCrypto*\" # Launch YouTube on your Android device and trace Java methods # with “certificate” in their signature (s), ignoring case (i) # and only searching in user-defined classes (u) $ frida-trace -U \\ -f com.google.android.youtube \\ --runtime=v8 \\ -j '*!*certificate*/isu' # Trace all JNI functions in Samsung FaceService app on Android $ frida-trace -U -i \"Java_*\" com.samsung.faceservice # Trace a Windows process's calls to \"mem*\" functions in msvcrt.dll $ frida-trace -p 1372 -i \"msvcrt.dll!*mem*\" # Trace all functions matching \"*open*\" in the process except # in msvcrt.dll $ frida-trace -p 1372 -i \"*open*\" -x \"msvcrt.dll!*open*\" # Trace an unexported function in libjpeg.so $ frida-trace -p 1372 -a \"libjpeg.so!0x4793c\" frida-ls-devices | Frida frida-ps | Frida frida-kill | Frida frida-trace | Frida Python交互 attach()：附加目标进程 spawn()：启动进程，此时进程处于挂起状态，需要配合resume()才能唤醒。 resume()：唤醒进程 detach()：脱离进程 create_script()：创建一个脚本对象 load()：方法将脚本载入 获取设备信息： import frida # 获取当前 USB 链接的设备 print(frida.get_usb_device()) #输出 >>> Device(id=\"19a32eb9495810d5e98825ebd0da0010473e0554\", name=\"iPhone\", type='usb') 启动 Safari浏览器并打开网站： import frida device = frida.get_usb_device() device.spawn(\"com.apple.mobilesafari\", url=\"https://iHTCboy.com\") 详细API文档： JavaScript API | Frida Frida CodeShare Theos 和 Tweak Theos 是越狱开发的一个工具包, 可以创建Tweak项目，动态的hook第三方程序。 theos/theos: A cross-platform suite of tools for building and deploying software for iOS and other platforms. Theos Tweak及工作原理 Cydia Substrate 是越狱后cydia插件/软件(指theos开发的tweak)运行的基础依赖库。它提供了软件运行公开库，用于动态替换内存的代码。所以首先要安装好 Cydia Substrate。 Cydia Substrate Cydia Substrate有3部分组成： MobileHooker MobileLoader safe mode MobileHooker MobileHooker用来替换系统函数，这个过程也叫Hooking。有如下的API可以使用： IMP MSHookMessage(Class class, SEL selector, IMP replacement, const char* prefix); // prefix should be NULL. void MSHookMessageEx(Class class, SEL selector, IMP replacement, IMP *result); void MSHookFunction(void* function, void* replacement, void** p_original); MSHookMessageEx 用来替换 Objective-C的函数 MSHookFunction 用来替换C/C++函数。 具体用法参见: Cydia Substrate - iPhone Development Wiki MSHookFunction | Cydia Substrate Cydia Substrate MobileLoader MobileLoader 把第3方补丁程序加载进入运行的程序中。 MobileLoader 首先会通过DYLD_INSERT_LIBRARIES 把自己加载进入目标程序，然后它会在 /Library/MobileSubstrate/DynamicLibraries/ 中找到需要加载的动态链接库并加载它们，控制是否加载到目标程序，是通过一个plist文件来控制的。如果需要被加载的动态库的名称叫做foo.dylib，那么这个plist文件就叫做 foo.plist，这个里面有一个字段叫做 filter，里面写明需要hook进的目标程序的 bundle id。 比如，如果只想要foo.dylib加载进入SpringBoard，那么对应的plist文件中的filter就应该这样写： Filter = { Bundles = (com.apple.springboard); };” 示例：Simple code injection using DYLD_INSERT_LIBRARIES Safe mode 当编写的扩展导致 SpringBoard crash 的时候，MobileLoader会捕获这个异常，然后让设备进入安全模式。在安全模式中，所有的第3方扩展都会被禁用。 注：这些 signal 会触发安全模式： SIGTRAP SIGABRT SIGILL SIGBUS SIGSEGV SIGSYS 破解 绕过 Apple ID 忘记 Apple ID 后如何绕过 iOS 激活锁？越狱教程爱思助手 外挂 yacd (Yet Another Code Decrypter) 利用 Psychic Paper 漏洞，可以在 iOS 13.4.1 以下的“未越狱”设备上砸壳并 AirDrop 到 Mac 上。 GitHub - DerekSelander/yacd: Decrypts FairPlay applications on iOS 13.4.1 and lower, no jb required iOS 降级 ECID ECID：Exclusive Chip ID，唯一芯片 ID。 每一台 iPhone 或 iPad 等 iOS 设备，都会有专属独一无二的 16 位芯片唯一识别码，用来验证设备。 SHSH SHSH：Signed Hash，签名散列。 1024 位的 RSA 签名，由苹果根据设备的 ECID 和固件的 Apnonce 随机数（Apnonce 值每次刷机都会变化）生成。在允许执行映像之前，由引导加载程序验证。通常 SHSH 指带有签名的备份文件（“SHSH blobs”）。恢复特定的 iOS 版本需要此签名文件，Apple 仅针对当前可用的 iOS 版本发放签名，不允许安装旧版 iOS。所以，为旧版 iOS 保存 SHSH 文件，就可以使用重播攻击来恢复该旧版本系统。SHSH2 是 iOS9.0 以后的版本。当你刷机的时候，Apple 会连上服务器来验证当前你的刷机版本和 ECID 所产生的 SHSH 和服务器上的是否匹配，如果不匹配，则不能刷机。 SEP SEP：Secure Enclave Processor，安全隔区处理器。 安全隔区处理器为安全隔区提供了主要的计算能力。它有独立的运行系统，每次刷机都会对SEP系统也进行更新，系统与服务器会进行核对，如果降级的 iOS 系统与当前的 SEP 不兼容，那么降级刷机被禁止。 TSS Saver - SHSH Blobs Saver 安全隔区 - Apple 支持 iOS安全体系结构 +————————————————————————————————+ | +————————————————————————————+ | | | +————————————————————————+ | | | | | +————————————————————+ | | | | | | | Data Protection | | | | | | | | Class | | | | Security-Course/ios-security.md - Security-Course macOS 名词 解析 备注 SIP System Integrity Protection，系统完整性保护 OS X El Capitan（2015年9月16日）中引入的Apple macOS操作系统的一项安全功能。它包含许多由内核执行的机制。核心是保护系统拥有的文件和目录，以防止没有特定“权限”的进程修改，即使由root用户或具有root特权的用户执行也是如此。 AMFI Apple Mobile File Integration，苹果手机文件完整性 起源于iOS，它阻止了任何运行未签名代码的尝试。AMFI是内核扩展，最初在iOS中引入。在macOS 10.10 添加到macOS中。就像沙盒一样，它扩展了 MACF（强制性访问控制框架），并且在执行SIP和代码签名方面起着关键作用。 MACF MAC (Mandatory Access Control) Framework，强制访问控制架构 在 Mac OS X 10.5 Leopard（2007年10月26日） 的 SDK 中苹果“错误的”为大家引入了一种新的监控机制 —— Mandatory Access Control Policy Framework。很快苹果公司纠正了这一错误，彻底将这一接口私有化。在文档 QA1574 中苹果明确的指出第三方不应该使用 MAC 机制，它不属于 KPI 的一部分。MACF 是苹果从 TrustedBSD 引入的一项强大的安全特性。用户态的视角非常有局限性，只有内核才能可靠地实施这种安全性。当XNU 调用MAC层验证一个操作时，MAC层调用策略模块，然后策略模块负责进行验证。 PIC / PIE Position Independent Code，地址无关代码。又称 PIE， Position Independent Executables，地址无关可执行文件 在计算机领域中，地址无关代码，又称地址无关可执行文件，是指可在主存储器中任意位置正确地运行，而不受其绝对地址影响的一种机器码。PIC广泛使用于共享库，使得同一个库中的代码能够被加载到不同进程的地址空间中。PIC还用于缺少内存管理单元的计算机系统中， 使得操作系统能够在单一的地址空间中将不同的运行程序隔离开来。 ASLR Address Space Layout Randomization，地址空间布局随机化 这项技术是在 OS X Mountain Lion（2012年7月25日） 引入的。现在已经成为操作系统想要阻止黑客和恶意软件视图注入代码攻击的必备技术。防御代码注入的主要方法是数据执行阻止(Data Execution Prevention，DEP，在Intel 中也称为W^X或XD，在ARM中也称为XN)，DEP能使得黑客注入代码的企图更加困难。 W^X Write XOR execute 苹果芯片会强制内存页面的属性要么可以写，要么可以执行，但不能同时为可以写可执行。特别是像JS那种带有JIT功能语言，经常会分配可写可执行的内存页面，苹果因此提供了一个专门的API（pthread_jit_write_protect_np()）用于JIT来做RW和RX内存页面之间的转换。 KPP Kernel Patch Protection 内核完整性保护 与iOS9一起推出的内核完整性保护又称为“KPP”，防止运行时内核被篡改。当内核载入内存以后，苹果芯片会保护内核的内存页面，以防止其被篡改。 PAC 指针验证 指针验证是利用arm架构的特性，在PC进行跳转的时候对指针进行验证，从而可以有效地防止像ROP（返回导向编程）这样的攻击。苹果在iPhone XS和XR中首次部署了这个机制。目前苹果只是对macOS的内核和系统服务做了PAC的防护，我们自己在Mac上编写的app并没有PAC的防护。 Device isolation 设备内存隔离 在intel架构的Mac上，系统上的设备和驱动的内存空间是共享的，但是在arm64架构的Mac上，不同设备和驱动之间的内存是相互隔离的。 Secure boot 安全启动 新架构的macOS的启动使用了iOS的安全启动模式，苹果芯片会验证每一步加载的固件的签名，以保证其完整性和安全性。同时，在系统安装的时候，用户可以选择是full security（完整安全）模式还是 reduce security（低安全）模式。苹果默认会采用完整安全模式，在完整安全模式下，可以认为这台mac和一台iPhone一样，比如无法降级，无法加载第三方的内核扩展。在低安全模式下，用户可以安装任意版本的macOS以及加载内核扩展，关闭SIP（系统完整性保护）等。 AFC Apple File Conduit，苹果文件连接 运行在iOS设备上的文件传送服务，它允许你通过USB连线存取iPhone的 /var/mobile/Media 的目录里的文件。AFC 服务由 lockdownd 守护进程提供，被命名为 com.apple.afc。 Disabling and Enabling System Integrity Protection | Apple Developer Documentation macOS 开启或关闭 SIP - 少数派 在 macOS 10.15.4 上解锁 Sidecar 需要进行额外步骤 - 知乎 深入解析Mac OS X & iOS 操作系统 学习笔记（十五） - 简书 下一个十年的安全机遇之一：基于Apple Silicon的Mac电脑对安全来说意味着什么？ - 知乎 AMFI Apple Mobile File Integrity（AMFI）起源于iOS，它阻止了任何运行未签名代码的尝试。它似乎已迁移到 macOS Sierra 或更早的版本，可能是因为 Gatekeeper 和2012年的代码签名发生了变化。 它由两个组件组成：守护程序或服务 amfid，从 /usr/libexec/amfid 运行。它很小，只有 51KB 左右，由 /System/Library/LaunchDaemons/com.apple.MobileFileIntegrity.plist 作为根启动守护程序运行。它通常在loginwindow 和 sandbox（相对）之后，syspolicyd 和 trust（依赖它）之前开始。 它的客户端是AppleMobileFileIntegrity扩展名（在 /System/Library/Extensions 中），该扩展名更大，可执行代码为 151 KB。当前版本是1.0.5。 AMFI: checking file integrity on your Mac – The Eclectic Light Company AppleMobileFileIntegrity（.kext），可以使用全名com.apple.driver.AppleMobileFileIntegrity，它是iOS内核扩展，是iOS代码权利模型的基石。它是 Sandbox（com.apple.security.sandbox）的依赖项之一，以及com.apple.kext.AppleMatch（与OS X一样，它负责解析Sandbox语言规则）。 AppleMobileFileIntegrity - The iPhone Wiki Linux/Unix ELF 维基百科： ELF 全称是 Executable and Linkable Format 可执行与可链接格式。常被称为 ELF格式，在计算机科学中，是一种用于可执行文件、目标文件、共享库和核心转储的标准文件格式。 1999年，被86open项目选为x86架构上的类Unix操作系统的二进制文件格式标准，用来取代COFF。因其可扩展性与灵活性，也可应用在其它处理器、计算机系统架构的操作系统上。 Executable and Linkable Format - Wikipedia 深入浅出ELF - PansLabyrinth 深入浅出MachO - PansLabyrinth Python Python 反汇编 Python 是一种解释型语言，而 Python 字节码（Python ByteCode）是一种平台无关的中间代码，由 Python 虚拟机动态(PVM)解释执行，这也是 Python 程序可以跨平台的原因。 开源的 pyc 还原工具: uncompyle6 pycdc 如何破解一个Python虚拟机壳并拿走12300元ETH - PansLabyrinth dis — Disassembler for Python bytecode — Python 3.9.0 documentation 软件 010 Editor 010 Editor 是一款功能强大的跨平台十六进制编辑工具，同时支持Windows、Linux及macOS操作系统，它最大的特点是二进制模板技术，能够方便地分析任何二进制文件格式。 010 Editor - Pro Text/Hex Editor | Edit 160+ Formats 010 Editor - Binary Template Repository - Download Binary Templates 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2024-06-15 21:28:39 更新 "},"Development/Ruby.html":{"url":"Development/Ruby.html","title":"Ruby","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 入门 Ruby执行shell命令的六种方法 ruby 属性和方法打印 cocoapods gem install cocoapods hooks [TOC] 入门 更容易入门的Rails 教程 Ruby执行shell命令的六种方法 Calling shell commands from Ruby Ruby执行shell命令的六种方法 - 技术小黑屋 ruby 属性和方法打印 # 遍历Hash,取出key,value target.instance_variables.each do |value| # 递归调用,打印Hash中的对象,名称为key，层级+1 puts \"#{value}\" end # 获取方法名称列表，并遍历 target.public_methods.each do |method| # 打印方法名称 puts \" ┣ #{method}\" end cocoapods gem install cocoapods error： ERROR: Could not find a valid gem 'cocoapods' (>= 0), here is why: Unable to download data from https://gems.ruby-china.org/ - bad response Not Found 404 (https://gems.ruby-china.org/specs.4.8.gz) 因域名备案问题，.org 域名无法继续提供 RubyGems 镜像服务，我们提供 .com 代替 .org 的域名，其他一切不变！！ 详情访问 https://gems.ruby-china.com 更新方法： gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ --remove https://gems.ruby-china.org/ 查看本地镜像： gem sources -l hooks # Hooks生成的Xcode project 操作前做最后的改动 post_install do |installer| project = installer.pods_project project.targets.each do |target| # 判断是否有source_build_phase方法 if target.public_methods.include?(:source_build_phase) source_files = target.source_build_phase.files source_files.find do |file| #puts \"File: #{file.display_name}\" target_nmae = \"#{target.name}-dummy.m\" if file.display_name == target_nmae #file.file_ref = nil #file.remove_from_project source_files.delete file #删除 xxx-dummy.m 文件引用 puts \"Deleting source file #{target_nmae} from target #{target.name}.\" end end end end end # Hooks生成的Xcode project 操作前做最后的改动 post_install do |installer| project = installer.pods_project project.targets.each do |target| target.build_configurations.each do |config| config.build_settings['CLANG_MODULES_AUTOLINK'] = 'NO' #不自动链接系统库 end #添加libEfnLogin 静态库到 Pods-EfunUniSDK if target.name == 'Pods-iHTCSDK' lib_name = loginModule_lib_name() if lib_name.empty? puts \"【🚫】Pods-HTCModule 导入失败\" else lib_path = \"HTCModule/pod_lib/#{lib_name}\" build_phase = target.frameworks_build_phase framework_group = project.frameworks_group file_ref = framework_group.new_reference(lib_path) file_ref.source_tree = '' build_phase.add_file_reference(file_ref) puts \"【👌】Pods-HTCModule《#{lib_name}》导入完成\" end end end end # 获取 EfunLoginModule 的静态库文件 def loginModule_lib_name() path = Pathname.new(File.dirname(__FILE__)).realpath #当前脚本路径 dir_path = \"#{path}/Pods/HTCModule/pod_lib\" puts \"HTCModule静态库目录：\" puts dir_path if File.exist?(dir_path) Find.find(dir_path) do |path| if File.file?(path) file_name = File.basename(path) if (file_name.start_with? \"libHTCLogin_\" and file_name.end_with? \".a\") return file_name end end end end end user_project = installer.aggregate_targets.first.user_project user_project.targets.each do |target| puts target.name # 判断是否有source_build_phase方法 if target.public_methods.include?(:frameworks_build_phase) lib_nmae = \"libPods-#{target.name}.a\" build_phase = target.frameworks_build_phase framework_group = user_project.frameworks_group build_phase.files_references.each do |file| #puts file.display_name if file.display_name == lib_nmae puts file.display_name build_phase.remove_file_reference(file) framework_group.children.delete(file) puts \"Deleting libraries #{lib_nmae} from target #{target.name}.\" break end end end end CocoaPods Guides - Podfile Syntax Reference v1.8.0.beta.1 Xcodeproj/build_phase.rb at master · CocoaPods/Xcodeproj 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-18 15:09:36 更新 "},"Development/Security.html":{"url":"Development/Security.html","title":"Security","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Security（安全） 计算机安全（Computer Security） 典型漏洞与攻击 典型安全机制 安全概念 认证 数字签名 加解密 RSA RSA 可以用于加解密，也可以用于消息签名。 加解密 签名验签 总结 其它参考 CA 漏洞攻击 UAF (Use After Free) 漏洞 0day（zero-day vulnerability、0-day vulnerability，零日漏洞或零时差漏洞） HIDS AFL 实践 网易云音乐ncm格式分析 CAPTCHA（验证码） 安全问题的事件 安全问题1：违背政策 Sarah Palin的email账号破解 Mat Honan的Apple和Amazon账号破解 Twitter上 @N 账号劫持 2003年Linux后门事件 安全问题2：违背威胁模型/假设 未考虑人的因素 1983年图灵演说 随时间变化的计算假设 所有SSL证书CA都可信？ 假设硬件是可信的 假设密码学中充分的随机性 认为自主开发软件/系统更安全 不上网/隔离就安全了？ 没有电就安全了？ 安全问题3：机制问题（bug） Apple iCloud 口令猜测速率限制 在花旗集团信用卡站点缺失访问控制检查 安卓Java SecureRandom弱点导致比特币盗窃 心脏出血（Heartbleed） Shellshock 缓冲区溢出（buffer overflow） [TOC] Security（安全） 计算机安全（Computer Security） 也称为网络空间安全（cybersecurity）或IT安全，保护信息系统中软件、硬件、信息及服务。 信息安全（InfoSec）：保护信息的机密性，完整性，可用性，不可抵赖等等 网络安全（Network security）：计算机网络及网络可访问资源的安全 网络战（Cyberwarfare）：一国入侵另一国计算机或网络 互联网安全（Internet security）：互联网相关安全，包括浏览器安全以及网络安全等等 移动安全（Mobile security）：移动计算安全，特别是智能手机 Computer security - Wikipedia 典型漏洞与攻击 后门（Backdoor） 拒绝服务（DoS） 直接访问（Direct-access） 窃听（Eavesdropping） 伪装欺骗（Spoofing） 篡改（Tampering） 特权提升（Privilege escalation） 钓鱼（Phishing） 点击劫持（Clickjacking） 社交工程（Social engineering） 木马（Trojan） 僵尸网络（Zombie/botnet） 病毒/蠕虫/恶意软件（virus/worm/malware） 高级持续性威胁（Advanced Persistent Threat） 典型安全机制 认证（Authentication） 授权（Authorization） 访问控制（Access Control） 防火墙（Firewall） 反病毒（Antivirus） 入侵检测/阻止系统（Intrusion detection/prevention system） 移动安全网关（Mobile secure gateway） 沙箱（Sandboxing） 纵深防御（Defense in depth） 设计出安全（Security by design） 安全概念 安全：在敌手出现时实现目标，或者说在敌手出现时，系统可正常工作 安全思维： Policy（策略）：欲达成的目标，例如CIA：机密性（Confidentiality），完整性（Integrity），可用性（Availability） Threat model（威胁模型）：关于敌手能力的假设 Mechianism（机制）：系统中用于实现政策的组件 Resulting goal（结果目标）：在威胁模型下，攻击者无法违反策略 安全是一个否定目标（保证不存在攻击） 难以考虑到攻击者所有可能的攻击方式 真实的威胁模型是开放的 若无法做到完美安全，为什么还要做安全？ 了解系统的安全边界 每个系统可能都有可利用弱点，理解系统能做的和不能做的 管理安全风险 vs. 收益 Security-Course/introduction.md 认证 JSON Web Token 入门教程 - 阮一峰的网络日志 数字签名 加解密 RSA openssl方式生成加密长度1024位密钥: 生成私钥：openssl genrsa -out rsaprivatekey.pem 1024 生成公钥：openssl rsa -in rsaprivatekey.pem -out rsapublickey.pem -pubout 转换格式：openssl pkcs8 -topk8 -in rsaprivatekey.pem -out pkcs8rsaprivate_key.pem -nocrypt [两种方式生成RSA 公钥私钥[| 小人物，大世界-CSDN博客生产rsa](https://blog.csdn.net/li396864285/article/details/79865806) RSA 可以用于加解密，也可以用于消息签名。 RSA 使用一对不同的密钥：公钥和私钥。公钥是公开的，你知道，别人也知道，别人也需要知道；私钥是只能持有者知道，不能泄露了，不然很麻烦。 加解密 A 和 B 通信，A 使用 B 的公钥和 RSA 加密算法对消息进行加密，得到密文，密文扔出去后，只有 B 使用自己的私钥才能解。 B 回复 A，B 使用 A 的公钥和 RSA 加密算法对响应数据进行加密，加密后的密文只有 A 能够解。这就保证了，数据不会被第三方获取。 当然这里面还有一些其他的问题，比如怎样获取对方的公钥，怎样确定获取到的公钥就是对方的公钥而不是中间人伪造的公钥。可以了解下 https 握手的过程，https 主要通过对称加密（比如 AES 等）方式通信，但是对称加密密钥是通过 RSA 加密传输的。 签名验签 RSA 可以用于消息签名，用于消息接收方确认消息发送方身份，防止伪造的消息。 A 将原始数据使用 A 的私钥进行 RSA 签名得到 Sign，原始数据附带签名一起发送给消息接收方，消息接收方 B 使用 A 的公钥、原始数据、Sign 三个要素进行验签过程，也就是使用 A 的公钥和 RSA 算发对 Sign 进行处理，用处理的结果与原始数据进行对比，如果一致，说明是 A 发送的，而且只能是 A 发送的，除非 A 的私钥泄露了。 由于 RSA 算法比较慢，而且原始数据的大小不确定，消息签名的计算和传输可能会造成很大的 cpu 和网络开销，消息签名一般是对原始数据的摘要进行签名，比如 MD5 消息摘要算法（ MD5 长度固定，且不同消息 MD5 冲突的可能性很小），对应的，验签的时候对比的不不是原始数据，而是消息摘要。使用指定的消息摘要进行签名时，签名过程计算较快，而且签名结果长度也相对固定。 总之，加解密和消息签名使用 RSA 时，目的不同，一个是为了防止明文消息被第三方获取（私密性），一个是为了方便消息接收方确认消息没有被篡改（完整性）。 RSA 可以做私钥加密，公钥解密吗？解密的结果还是加密之前的明文吗？ - V2EX 总结 公钥和私钥是对等的，并且可以互换。 用公钥加密的数据必须用私钥解密；用私钥加密的数据必须用公钥解密。 常见的数据加密过程，就是拿事实公钥对数据进行加密，稍后可以用事实私钥进行解密。 常见的数据签名过程，就是拿事实私钥对数据的摘要进行加密，稍后可以用事实公钥进行解密并验证完整性。 私钥文件和公钥文件不是对等的，不能互换。私钥文件中含有额外的参数，可以计算得到公钥，而公钥文件中没有，也无法计算得到私钥。 通常为了兼容性和计算方便，我们使用常见参数密钥，即事实公钥中的密文e为一特定值，通常为65537。这样使得使用了常见参数的事实公钥无法作为事实私钥使用，因为密文e不是安全的。 RSA加密算法中公钥和私钥的一些解惑 其它参考 The Illustrated TLS Connection: Every Byte Explained RSA的公钥和私钥到底哪个才是用来加密和哪个用来解密？ - 知乎 Java使用RSA加密解密签名及校验 - CSDN博客 CA CA（Certificate Authority，证书授权中心、证书授权机构） 机构给网站颁发证书，浏览器则会通过一些加密、哈希算法验证证书是否有效。 证书一般分成三类： DV、OV 、和 EV ，加密效果都是一样的，区别在于： DV（Domain Validation），面向个体用户，安全体系相对较弱，验证方式就是向 whois 信息中的邮箱发送邮件，按照邮件内容进行验证即可通过； OV（Organization Validation），面向企业用户，证书在 DV 证书验证的基础上，还需要公司的授权，CA 通过拨打信息库中公司的电话来确认； EV（Extended Validation），URL 地址栏展示了注册公司的信息，这类证书的申请除了以上两个确认外，需要公司提供金融机构的开户许可证，要求十分严格。 CA 机构是如何保护自己私钥的？ - 知乎 certificates - How do certification authorities store their private root keys? - Information Security Stack Exchange 美国联邦政府为加密模组制定了一份69页的技术标准 FIPS 140-2 揭秘 | 巨头怼巨头，谷歌封杀赛门铁克证书背后的恩怨情仇 漏洞攻击 UAF (Use After Free) 漏洞 uaf 漏洞全称是 use after free，free是指函数是在堆上动态分配空间后不再使用该数据从而被回收。但是由于程序的一些不适当的操作或逻辑，会导致攻击者能够操控已经被释放的区域，从而执行一些 byte codes。 逆向安全系列：Use After Free漏洞浅析 - 安全客，安全资讯平台 uaf漏洞原理浅析 - Weizhou的博客 0day（zero-day vulnerability、0-day vulnerability，零日漏洞或零时差漏洞） 0day：“零日漏洞”(zero-day)又叫零时差攻击，是指被发现后立即被恶意利用的安全漏洞。 通俗地讲，即安全补丁与瑕疵曝光的同一日内，相关的恶意程序就出现。 这种攻击往往具有很大的突发性与破坏性。 由原软件发行公司提供修补程序，但此法通常较慢，因此软件公司通常会在最新的病毒代码中提供回避已知零时差攻击的功能，但无法彻底解决漏洞本身。 在电脑领域中，零日漏洞或零时差漏洞通常是指还没有补丁的安全漏洞，而零日攻击或零时差攻击则是指利用这种漏洞进行的攻击。提供该漏洞细节或者利用程序的人通常是该漏洞的发现者。零日漏洞的利用程序对网络安全具有巨大威胁，因此零日漏洞不但是黑客的最爱，掌握多少零日漏洞也成为评价黑客技术水平的一个重要参数。 零日攻击 - 维基百科，自由的百科全书 HIDS HIDS：Host-based Intrusion Detection System，基于主机的入侵检测系统。是一种入侵检测系统，类似于基于网络的入侵检测系统的运行方式，它能够监视和分析计算系统的内部以及其网络接口上的网络数据包。这是已设计的第一类入侵检测软件，最初的目标系统是很少进行外部交互的大型计算机。 Host-based intrusion detection system - Wikipedia AFL AFL：American Fuzzy Lop，是由安全研究员 Michał Zalewski（@lcamtuf）开发的一款基于覆盖引导（Coverage-guided）的模糊测试工具，它通过记录输入样本的代码覆盖率，从而调整输入样本以提高覆盖率，增加发现漏洞的概率。是一款免费的软件模糊器，它采用遗传算法来有效地增加测试用例的代码覆盖率。到目前为止，它帮助检测了许多主要的自由软件项目中的重大软件错误，包括X.Org Server，PHP，OpenSSL，pngcrush，bash，Firefox，BIND，Qt和SQLite。 american fuzzy lop (fuzzer) - Wikipedia) AFL漏洞挖掘技术漫谈（一）：用AFL开始你的第一次Fuzzing 实践 网易云音乐ncm格式分析 anonymous5l/ncmdump: netease cloud music copyright protection file dump 网易云音乐ncm格式分析以及ncm与mp3格式转换 - chuyaoxin - 博客园 网易云音乐ncm编解码探究记录 - 简书 网易云音乐ncm文件格式解析 | 文章 | BEWINDOWEB CAPTCHA（验证码） AI时代验证码的攻与防 验证码的前世今生（今生篇） 安全问题的事件 以下内容引用来源： Security-Course/introduction.md 安全问题1：违背政策 Sarah Palin的email账号破解 2008年9月，美国共和党副总统候选人莎拉·佩林的雅虎私人电子邮箱遭黑客入侵。黑客可能是一名田纳西州民主党议员正在念大学的儿子戴维·克内尔。[相关报道] 攻击者利用雅虎密码遗忘提示功能和网络搜索引擎：佩林的邮箱密码提示问题包括她的生日，以及她和丈夫托德在何处相识。为副总统候选人的佩林已无太多隐私可言，可在谷歌上轻松找到答案。 FBI发现了攻击者在代理服务器上的踪迹。 政策违背：真正用户需要知道用户名与口令 --> 知道密码提示问题答案 Mat Honan的Apple和Amazon账号破解 2012年一位网站主编Mat Honan的Google，Twitter, Apple账号都被破解。攻击者用这些账号发表种族言论，并删除了其iPhone等设备上数据。[相关报道] Twitter账号：采用Gmail邮箱 Gmail密码重置：发送一个验证链接到备份邮箱。Mat的备份邮箱是Apple的me.com账号 Apple密码重置：需要账单地址（个人住址可以查到），信用卡末4位（未知） Amazon密码重置：提供用户的任意一张信用卡账号（以及用户名，账单地址等）。在一个账号上添加信用卡，不需要密码（电话服务）。登录后，Amazon会显示所有信用卡末4位。 政策违背：邮箱安全-->备份邮箱-->账单地址+信用卡末4位-->Amazon密码-->任意信用卡 Twitter上 @N 账号劫持 2014年，Twitter上的 @N 账号（有人出价$50000）被劫持。账号所有者（受害者）Naoki Hiroshima在尝试夺回账号失败后，将用户名改为@N_is_stolen。Naoki通过与攻击者的邮件交流了解了其攻击过程。[相关报道] @N 账号邮箱是受害者在GoDaddy上个人域名 个人域名被劫持，因而邮件服务器被更改，账号邮箱也就被劫持 GoDaddy账号恢复需要提供信用卡末6位 攻击者打电话给PayPal，获得了信用卡末4位 攻击者打电话给GoDaddy，说信用卡丢了，但记得末4位；GoDaddy让攻击者来回忆前2位，可以一直猜，直到猜对（攻击者只猜了两次就蒙对了） 政策违背：账号安全-->邮箱安全-->域名安全-->信用卡末6位-->信用卡末4位 2003年Linux后门事件 2003年时，Linux采用代码维护系统BitKeeper，提交代码需经过审查。部分开发者为了方便另建立了一个CVS来维护源代码。攻击者在CVS所维护源码中插入如下代码，将无效调用wait4()的进程赋予root权限。 if ((options == (__WCLONE|__WALL)) && (current->uid = 0)) retval = -EINVAL; 不过，由于这个修改未经过审批流程，随后被发现。[相关报道] 政策违背：BitKeeper --> CVS 安全问题2：违背威胁模型/假设 未考虑人的因素 通过邮件/电话的电信诈骗 攻击者通过致电客服来重置密码 胶皮管密码分析 2016年3月，希拉里竞选主席波德斯塔（Podesta）电子邮件泄露。攻击者俄罗斯黑客组织Fancy Bear（奇幻熊）采用鱼叉式网络钓鱼攻击，向波德斯塔发送一封伪造的Gmail警告邮件，其中包含一个链接指向一个伪造的登录页面。同年10月，维基解密公开了泄露的邮件。 1983年图灵演说 Reflections on Trusting Trust by Ken Thompson To what extent should one trust a statement that a program is free of Trojan horses? Perhaps it is more important to trust the people who wrote the software. 在发明C语言过程中，有一个“鸡生蛋，蛋生鸡”问题，即如何用C语言来实现C语言的编译器。 原理上，需要一个程序，能够复制自己，并在每次复制时‘学习’一点新特性，逐渐演化成一个“产生编译器的程序”。 Ken在该程序中植入了一个木马，能够用特定密码来‘通过’Login函数检查。 即使有人发现了木马并更改了代码，但若用有木马的编译器编译，则新编译器中仍有木马！ 随时间变化的计算假设 自80年代中期，MIT Kerberos系统使用56比特DES密钥 但目前2^56已经不够大了，1天之内就能破解 所有SSL证书CA都可信？ 连接SSL支持的站点（HTTPS）需要验证CA办法的证书（身份和公钥的数字签名） 多数浏览器相信上百个CA，任何一个CA被攻破，可伪造任何站点证书 2011年，两个CA，DigiNotar和Comodo，发布了包括google, yahoo等的假证书 2012年，一个CA，Trustwave发布了一个对任意网站都有效的根证书 2015年，埃及MSC Holding使用CNNIC签发的中级证书签发gmail假证书，导致Chrome和Firefox移除的CNNIC根证书 [相关报道] 后面会介绍 CA增强方案 假设硬件是可信的 若NSA要干坏事，则该假设很可能不成立。NSA下属的网络攻击部门TAO(Office of Tailored Access Operations，定制接入行动办公室)掌握大量硬件攻击手段，详见NSA ANT目录 2016年9月，Cisco在一个关于路由器故障报告中提到宇宙辐射可能是原因之一。这类故障称为“Single event upset (单粒子翻转)”。[英文报道]，与[中文报道] 假设密码学中充分的随机性 由于产生密钥或签名时熵不足，研究者发现0.75%的TLS证书共享密钥，获得0.5%的TLS主机和0.03%的SSH主机的RSA私钥，1.03%的SSH主机的DSA私钥，详见Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices (USENIX Security 2012) 认为自主开发软件/系统更安全 XcodeGhost在Apple的Xcode开发环境中注入恶意代码，并感染超过4000个应用，包括微博和网易云音乐。这些应用开发者从百度云和迅雷下载Xcode。尽管软件是自主开发的，但开发系统不是。 不上网/隔离就安全了？ 攻击伊朗核设施的震网蠕虫（Stuxnet）通过U盘传播 -> Windows感染 -> Siemens PCS 7 SCADA工控软件 -> Siemens设备控制器 没有电就安全了？ 金唇 (The Thing，the Great Seal bug))：1945年前苏联在赠送给美国大使馆的一个国徽礼物中安装了窃听器，该窃听器利用外部电磁波来获取能量，并将窃听到的信息发送出去（一种射频技术，是RFID的前身） 安全问题3：机制问题（bug） Apple iCloud 口令猜测速率限制 人们通常采用弱密码，可以通过1K-1M次猜测得到 iCloud有速率限制功能，但iCloud有许多API，其中“Find my iPhone”服务中的API忘了实现速率限制 [详情] 在花旗集团信用卡站点缺失访问控制检查 花旗集团允许信用卡用户来在线访问其信用卡账户（用户名+口令） 账户信息页的URL中包括一些数字，这些数字与账号有关，而服务器不检查用户是否真的已经登录 攻击者尝试不同的数字，来获得不同人的账户信息 错误威胁模型？ 若攻击者通过浏览器访问站点，则系统是安全的 若攻击者自己构造新的URL，则系统不安全 很难说是错误威胁模型，还是bug [详情] 安卓Java SecureRandom弱点导致比特币盗窃 在安卓中许多比特币钱包应用使用Java的SecureRandom API 系统有时忘记给PRNG设定种子 导致用户私钥容易被猜中，攻击者将用户的比特币转给自己 [详情] 心脏出血（Heartbleed） TLS的心跳扩展中，一方（客户端）发送心跳请求，包含一个负载+负载长度，另一方（服务器）用相同内容做应答 CVE-2014-0160: 服务器未检查长度是否正确，过长的长度会导致服务器内存中数据被当做负载传递给客户端 [详情] Shellshock 2014年9月24日公开的Bash shell中一系列安全漏洞，利用处理环境变量中函数定义之后的命令，攻击者可执行任意代码 [详情]) CVE-2014-6271: 环境变量声明中，函数之后命令会被执行 env x='() { :;}; echo vulnerable' bash -c \"echo test\" 有漏洞Bash会输出vulnerable；否则，输出test 缓冲区溢出（buffer overflow） 缓冲区溢出 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-01-20 22:45:44 更新 "},"Development/The-Back-End.html":{"url":"Development/The-Back-End.html","title":"The-Back-End","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 MySQL 安装与配置 Redis nginx nginx location if 的匹配规则 Nginx常用配置 nginx 相关命令 Nginx 开启 debug 模式 Linux 命令 防火墙操作 linux命令后台运行 systemctl命令 网络相关命令 进程 用户 系统 资源 磁盘和分区 查看文件内容(cat/head/tail/more/less/sed/grep) 文件解压缩 查看 .gz 文件 Linux 知识点 GMT、UTC、CST、DST 时间 Jenkins 阿里云（Aliyun） 阿里云CentOS安装了Nginx但是外网访问不到问题处理方法 [TOC] MySQL 安装与配置 安装 MariaDB is shipped in the CentOS repo as of CentOS 7 instead of mysql. if you still want to install mysql you need to add mysql rpm dependency into your yum repo. sudo yum -y install mariadb-server mariadb-devel mariadb sudo systemctl start mariadb.service sudo systemctl enable mariadb.service 配置 登录 mysql -u root -p 创建用户 CREATE USER ocean_monitor IDENTIFIED BY 'ocean_monitor_pwd'; 上面建立的用户可以在任何地方登陆。如果要限制在固定地址登陆，比如 localhost 登陆： CREATE USER ocean_monitor@localhost IDENTIFIED BY 'ocean_monitor_pwd'; 创建数据库 # 使用utf8编码，否则中文会有问题 CREATE DATABASE ocean_monitor character set utf8; 授权 ocean_monitor 用户拥有 ocean_monitor 数据库的所有权限 grant all on ocean_monitor.* to ocean_monitor identified by 'ocean_monitor_pwd'; 如果是限制在 localhost 登录的，则使用 grant all on ocean_monitor.* to ocean_monitor@localhost identified by 'ocean_monitor_pwd'; Redis todo nginx nginx location if 的匹配规则 cation匹配命令 ~ #波浪线表示执行一个正则匹配，区分大小写 ~* #表示执行一个正则匹配，不区分大小写 ^~ #^~表示普通字符匹配，不是正则匹配。如果该选项匹配，只匹配该选项，不匹配别的选项，一般用来匹配目录 = #进行普通字符精确匹配 @ #\"@\" 定义一个命名的 location，使用在内部定向时，例如 error_page, try_files location 优先级 Directives with the = prefix that match the query exactly. If found, searching stops. All remaining directives with conventional strings, longest match first. If this match used the ^~ prefix, searching stops. Regular expressions, in order of definition in the configuration file. If #3 yielded a match, that result is used. Else the match from #2 is used. =前缀的指令严格匹配这个查询。如果找到，停止搜索。 所有剩下的常规字符串，最长的匹配。如果这个匹配使用^前缀，搜索停止。 正则表达式，在配置文件中定义的顺序。 如果第3条规则产生匹配的话，结果被使用。否则，如同从第2条规则被使用。 顺序 no优先级： (location =) > (location 完整路径) > (location ^~ 路径 最长匹配的意思) > (location ~,~* 正则顺序) > (location 部分起始路径) > (/) Nginx配置location、if以及return、rewrite和 try_files 指令 | | Bruce's Blog Nginx配置文件nginx.conf详解 - 雪剑无影 - 博客园 nginx配置location总结及rewrite规则写法 - Sean's Notes - SegmentFault 思否 nginx配置location总结及rewrite规则写法 | Sean's Notes Nginx常用配置 配置文件说明 1、全局配置文件：/etc/nginx/nginx.conf 2、默认配置文件：/etc/nginx/conf.d/default.conf 新增配置目录 #1、新增配置文件夹 sudo mkdir /etc/nginx/server #2、修改默认配置（加载该文件夹下的配置） sudo vi /etc/nginx/nginx.conf #3、在http属性下增加： include /etc/nginx/server/*.conf; 1、反向代理配置 #1、新建/修改配置文件 sudo vi /etc/nginx/server/default.conf #2、配置示例 server { listen 80; #监听80端口 server_name ken.io.local; #监听的域名 location / { #转发或处理 proxy_pass https://ken.io; } error_page 500 502 503 504 /50x.html;#错误页 location = /50x.html { root /usr/share/nginx/html; } } 2、负载均衡配置 upstream serverswitch { server 127.0.0.1:80; server 127.0.0.1:81; } server { listen 80; #监听80端口 server_name ken.io.local; #监听的域名 location / { #转发或处理 proxy_pass https://serverswitch; } error_page 500 502 503 504 /50x.html;#错误页 location = /50x.html { root /usr/share/nginx/html; } } nginx 相关命令 设置为开机启动 #设置nginx开机启动 sudo systemctl enable nginx 启动 nginx 服务 #方法一 nginx #方法二 systemctl start nginx.service #（如果启动失败，可能是Apache等服务占用了80端口，关掉相应服务/修改端口即可） 查看所有启动的nginx进程 ps aux | grep nginx 停止Nginx服务 #方法一 nginx -s stop #方法二 nginx -s quit #方法三 killall nginx 检查nginx配置是否正常 nginx -t 重启nginx服务 sudo nginx -s reload 开放端口 #开放80端口（nginx默认监听80端口） firewall-cmd --add-port=80/tcp --permanent #重载防火墙规则 firewall-cmd --reload 防火墙服务 #1、停止防火墙服务： systemctl stop firewalld #2、设置开机不启动： systemctl disable firewalld #1、开启防火墙服务： systemctl start firewalld Nginx 开启 debug 模式 开启debug模式 vim /etc/nginx/nginx.conf 注释掉原来的 error_log /var/log/nginx/error.log;，新增下面的配置： # error_log /var/log/nginx/error.log; error_log /var/log/nginx/error.log debug; 实时监控错误日志 clear && tail -f /var/log/nginx/error.log Linux 命令 防火墙操作 #1、安装 sudo apt-get install ufw #2、启用|关闭 sudo ufw enable | disbale #2、查看状态 sudo ufw status #3、开放端口 sudo ufw allow 80 sudo ufw allow 20000:20010/tcp #4、关闭端口 sudo ufw delete allow 80 sudo ufw delete allow 20000:20010/tcp #5、指定IP开发所有端口 sudo ufw allow from 192.168.1.1 #6、开放/关闭SMTP sudo ufw allow | deny smtp ## 使用systemctl命令开放防火墙服务不代表防火墙功能开启。 ## 所以建议统一使用ufw enable | disbale来开关防火墙 linux命令后台运行 有两种方式： command & ： 后台运行，你关掉终端会停止运行 nohup command & ： 后台运行，你关掉终端也会继续运行 nohup：父进程是当前终端shell的进程，而一旦父进程退出，则会发送hangup信号给所有子进程，子进程收到hangup以后也会退出。如果我们要在退出shell的时候继续运行进程，则需要使用nohup忽略hangup信号，或者setsid将将父进程设为init进程(进程号为1)。nohup就是不挂起的意思(no hang up) 遇到问题 nohup python flush.py & 这样运行，生成了nohup.out文件，但是内容始终是空的，试了半天也不行。浪费了不少时间。 原因 python的输出又缓冲，导致out.log并不能够马上看到输出。 -u 参数，使得python不启用缓冲。 解决 nohup python -u flush.py > flush.log 2>&1 & python nohup linux 后台运行输出 - SoWhat1412 - CSDN博客 systemctl命令 #开机运行服务： systemctl enable *.service #取消开机运行 systemctl disable *.service #启动服务 systemctl start *.service #停止服务 systemctl stop *.service #重启服务 systemctl restart *.service #重新加载服务配置文件 systemctl reload *.service #查询服务运行状态 systemctl status *.service #显示启动失败的服务 systemctl --failed 网络相关命令 # ifconfig # 查看所有网络接口的属性 # iptables -L # 查看防火墙设置 # route -n # 查看路由表 # netstat -lntp # 查看所有监听端口 # netstat -antp # 查看所有已经建立的连接 # netstat -s # 查看网络统计信息 80端口使用情况 netstat -anp |grep 80 端口占用情况： netstat -ntpl 删除 80 端口占用 sudo fuser -k 80/tcp 进程 # ps -ef # 查看所有进程 # top # 实时显示进程状态 ps aux a = 显示所有用户的进程 u = 显示进程的用户和拥有者 x = 也显示不依附于终端的进程 结束进程 kill - 通过进程 ID 来结束进程 killall - 通过进程名字来结束进程 注意！结束进程 != 杀死进程 所以，kill SIGNAL PID(s)， SIGNAL 参数可以通过命令 kill -l 查看所有信号的列表，不指定型号将发送SIGTERM（15） 终止指定进程。 常用结束进程的信号是： Signal Name Single Value Effect SIGHUP 1 挂起 SIGINT 2 键盘的中断信号（同 Ctrl + C） SIGKILL 9 发出杀死信号 SIGTERM 15 发出终止信号 SIGSTOP 17, 19, 23 停止进程（同 Ctrl + Z） 杀进程 kill -9 PID pgrep 的p表明了这个命令是专门用于进程查询的grep $ pgrep firefox 1827 \"pkill\"命令允许使用扩展的正则表达式和其它匹配方式。 pkill＝pgrep+kill。 pkill -f uwsgi killall同样使用进程名替代PID，并且它会kill掉所有的同名进程。 killall firefox 匹配模式： kill -9 $(ps aux | grep 'process' | grep -v 'grep' | awk '{print $2}') 怎样在 Linux 命令行下杀死一个进程 精通Linux的“kill”命令 用户 # w # 查看活动用户 # id # 查看指定用户信息 # last # 查看用户登录日志 # cut -d: -f1 /etc/passwd # 查看系统所有用户 # cut -d: -f1 /etc/group # 查看系统所有组 # crontab -l # 查看当前用户的计划任务 系统 # uname -a # 查看内核/操作系统/CPU信息 # head -n 1 /etc/issue # 查看操作系统版本 # cat /proc/cpuinfo # 查看CPU信息 # hostname # 查看计算机名 # lspci -tv # 列出所有PCI设备 # lsusb -tv # 列出所有USB设备 # lsmod # 列出加载的内核模块 # env # 查看环境变量 资源 # free -m # 查看内存使用量和交换区使用量 # df -h # 查看各分区使用情况 # du -sh # 查看指定目录的大小 # grep MemTotal /proc/meminfo # 查看内存总量 # grep MemFree /proc/meminfo # 查看空闲内存量 # uptime # 查看系统运行时间、用户数、负载 # cat /proc/loadavg # 查看系统负载 磁盘和分区 # mount | column -t # 查看挂接的分区状态 # fdisk -l # 查看所有分区 # swapon -s # 查看所有交换分区 # hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) # dmesg | grep IDE # 查看启动时IDE设备检测状况 查看文件内容(cat/head/tail/more/less/sed/grep) cat（是一次性显示整个文件的内容）、head（查看前几行）、tail（查看末尾几行） cat filename：打印文件所有内容 tail -n 1000：显示最后1000行 tail -n +1000：从1000行开始显示，显示1000行以后的 head -n 1000：显示前面1000行 结合使用示例： 查看/etc/profile的前10行内容： # head -n 10 /etc/profile 查看/etc/profile的最后5行内容： # tail -n 5 /etc/profile 查看最后1000行的内容：: # cat filename | tail -n 1000 从第3000行开始，显示1000行。即显示3000~3999行内容： # cat filename | tail -n +3000 | head -n 1000 显示1000行到3000行内容： # cat filename| head -n 3000 | tail -n +1000 注：如果想显示行号，用 -n 参数 more、less命令 more 命令和cat的功能一样都是查看文件里的内容，但有所不同的是 more 可以按页来查看文件的内容， 会以一页一页的显示方便使用者逐页阅读，还支持直接跳转行等功能。 less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。 注：如果想显示行号，用 -num 参数 用sed命令 显示1000到300行的内容： # sed -n '1000,3000p' filename 用grep命令 grep -C 5 foo file 显示file文件里匹配foo字串那行以及上下5行 grep -B 5 foo file 显示foo及前5行 grep -A 5 foo file 显示foo及后5行 以上命令，更新使用说明，请使用 h、--help 命令了解更多。 文件解压缩 压缩： tar -zcvf archive-name.tar.gz directory-name #多个目录合并压缩 tar -zcvf my-compressed.tar.gz /path/to/dir1/ /path/to/dir2/ # 使用bzip2压缩： tar -jcvf my-compressed.tar.bz2 /path/to/dir1/ 解压： #当前目录解压 tar -zxvf prog-1-jan-2005.tar.gz #指定目录 tar -zxvf prog-1-jan-2005.tar.gz -C /tmp 更改档案拥有者 命令 : chown [-cfhvR] [--help] [--version] user[:group] file... 功能 : 更改文件或者文件夹的拥有者 参数格式 : 　　 user : 新的档案拥有者的使用者 IDgroup : 新的档案拥有者的使用者群体(group) 　　 -c : 若该档案拥有者确实已经更改，才显示其更改动作 　　 -f : 若该档案拥有者无法被更改也不要显示错误讯息 　　 -h : 只对于连结(link)进行变更，而非该 link 真正指向的档案 　　 -v : 显示拥有者变更的详细资料 　 　-R : 对目前目录下的所有档案与子目录进行相同的拥有者变更(即以递回的方式逐个变更) 例如：chown -R oracle:oinstall /oracle/u01/app/oracle 更改目录拥有者为oracle 修改权限 命令：chmod (change mode) 功能：改变文件的读写和执行权限。有符号法和八进制数字法。 选项：(1)符号法： 命令格式：chmod {u|g|o|a}{+|-|=}{r|w|x} filename u (user) 表示用户本人。 g (group) 表示同组用户。 o (oher) 表示其他用户。 a (all) 表示所有用户。 + 用于给予指定用户的许可权限。 - 用于取消指定用户的许可权限。 = 将所许可的权限赋给文件。 r (read) 读许可，表示可以拷贝该文件或目录的内容。 w (write) 写许可，表示可以修改该文件或目录的内容。 x (execute)执行许可，表示可以执行该文件或进入目录。 (2)八进制数字法： 命令格式：chmod abc file 其中a,b,c各为一个八进制数字，分别表示User、Group、及Other的权限。 4 (100) 表示可读。 2 (010) 表示可写。 1 (001) 表示可执行。 若要rwx属性则4+2+1=7； 若要rw-属性则4+2=6； 若要r-x属性则4+1=5。 例如：# chmod a+rx filename 让所有用户可以读和执行文件filename。 # chmod go-rx filename 取消同组和其他用户的读和执行文件filename的权限。 # chmod 741 filename 让本人可读写执行、同组用户可读、其他用户可执行文件filename。 chmod -R 755 /home/oracle 递归更改目录权限，本人可读写执行、同组用户可读可执行、其他用户可读可执行 修改文件日期 命令：touch 格式：touch filenae 功能：改变文件的日期，不对文件的内容做改动，若文件不存在则建立新文件。 例如：% touch file 链接文件 命令：ln (link) 格式：ln [option] filename linkname ln [option] directory pathname 功能：为文件或目录建立一个链。其中，filename和directory是源文件名和 源目录名；linkname和pathname分别表示与源文件或源目录名相链接的 文件或目录。 选项：-s 为文件或目录建立符号链接。不加-s表示为文件或目录建立硬链接 注释：链接的目地在于，对一个文件或目录赋予两个以上的名字，使其可以出 现在不同的目录中，既可以使文件或目录共享，又可以节省磁盘空间。 例如：% ln -s filename linkname 显示日期 命令：date 例如：% date 显示日历 命令：cal (calendar) 格式：cal [month] year 功能：显示某年内指定的日历 例如：% cal 1998 显示文件头部 命令：head 格式：head [option] filename 功能：显示文件的头部 选项：缺省 显示文件的头10行。 -i 显示文件的开始 i行。 例如：% head filename 显示文件尾部 命令：tail 格式：tail [option] filename 功能：显示文件的尾部 选项：缺省 显示文件的末10行。 -i 显示文件最后 i行。 +i 从文件的第i行开始显示。 例如：% tail filename 显示用户标识 命令：id 格式：id [option] [user] 功能：显示用户标识及用户所属的所有组。 选项：-a 显示用户名、用户标识及用户所属的所有组 注释： 例如：% id username 查看当前登录的用户 命令：users 显示都谁登录到机器上 命令：who 格式：who 功能：显示当前正在系统中的所有用户名字，使用终端设备号，注册时间。 例如：% who 显示当前终端上的用户名 命令：whoami 格式：whoami 功能：显示出当前终端上使用的用户。 例如：% whoami 寻找文件 命令：find 格式：find pathname [option] expression 功能：在所给的路经名下寻找符合表达式相匹配的文件。 选项：-name 表示文件名 -user 用户名，选取该用户所属的文件 -size 按大小查找，以block为单位，一个block是512B -mtime n 按最后一次修改时间查找，选取n天内被修改的文件 -perm 按权限查找 -type 按文件类型查找 -atime 按最后一次访问时间查找 例如：% find ./ -name 'abc' -print 搜索文件中匹配符 命令：grep 格式：grep [option] pattern filenames 功能：逐行搜索所指定的文件或标准输入，并显示匹配模式的每一行。 选项：-i 匹配时忽略大小写 -v 找出模式失配的行 例如：% grep -i 'java*' ./test/run.sh 统计文件字数 命令：wc [option] filename 功能：统计文件中的文件行数、字数和字符数。 选项：-l 统计文件的行数 -w 统计文件的单词数 -c 统计文件的字符数 注释：若缺省文件名则指标准输入 例如：% wc -c ./test/run.sh 显示磁盘空间 命令：df (disk free) 格式：df [option] 功能：显示磁盘空间的使用情况，包括文件系统安装的目录名、块设备名、总 字节数、已用字节数、剩余字节数占用百分比。 选项： -a：显示全部的档案系统和各分割区的磁盘使用情形 -i：显示i -nodes的使用量 -k：大小用k来表示 (默认值) -t：显示某一个档案系统的所有分割区磁盘使用量 -x：显示不是某一个档案系统的所有分割区磁盘使用量 -T：显示每个分割区所属的档案系统名称 -h: 表示使用「Human-readable」的输出，也就是在档案系统大小使用 GB、MB 等易读的格式。 注释： 例如：% df -hi 查询档案或目录的磁盘使用空间 命令：du (disk usage) 格式：du [option] [filename] 功能：以指定的目录下的子目录为单位，显示每个目录内所有档案所占用的磁盘空间大小 选项： -a：显示全部目录和其次目录下的每个档案所占的磁盘空间 -b：大小用bytes来表示 (默认值为k bytes) -c：最后再加上总计 (默认值) -s：只显示各档案大小的总合 -x：只计算同属同一个档案系统的档案 -L：计算所有的档案大小 -h: 表示档案系统大小使用 GB、MB 等易读的格式。 例如：% du -a % du -sh /etc 只显示该目录的总合 % du /etc | sort -nr | more 统计结果用sort 指令进行排序， sort 的参数 -nr 表示要以数字排序法进行反向排序。 显示进程 命令：ps 格式：ps [option] 功能：显示系统中进程的信息。包括进程ID、控制进程终端、执行时间和命令。 选项： -a 显示所有进程信息 -U uidlist 列出这个用户的所有进程 -e 显示当前运行的每一个进程信息 -f 显示一个完整的列表 -x 显示包括没有终端控制的进程状况 。 注释： 例如：% ps -ef % ps -aux 然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。 终止进程 命令：kill 格式：kill [option] pid 功能：向指定的进程送信号或终止进程。kill指令的用途是送一个signal给某一个process， 因为大部份送的都是用来杀掉 process 的 SIGKILL 或 SIGHUP ，因此称为 kill 选项：-9 强行终止进程 注释：pid标示进程号，可由ps命令得到。 例如：% kill -9 pid 你也可以用 kill -l 来察看可代替 signal 号码的数目字。kill 的详细情形请参阅 man kill。 查看自己的IP地址 命令：ifconfig 格式：ifconfig -a 查看路由表 命令：netstat 格式：netstat -rn 远程登录 命令：telnet 格式：telnet hostname 文件传输 命令：ftp (file transfer program) 格式：ftp hostname 功能：网络文件传输及远程操作。 选项：ftp命令： cd [dirname] 进入远程机的目录 lcd [dirname] 设置本地机的目录 dir/ls 显示远程的目录文件 bin 以二进制方式进行传输 asc 以文本文件方式进行传输 get/mget 从远程机取一个或多个文件 put/mput 向远程机送一个或多个文件 prompt 打开或关闭多个文件传送时的交互提示 close 关闭与远程机的连接 quit 退出ftp !/exit ftp登陆状态下，!表示暂时退出ftp状态回到本地目录，exit表示返回ftp状态 注释： 例如：% ftp hostname 查看自己的电子邮件 命令：mailx 格式：mailx 选项： delete 删除 next 下一个 quit 退出 reply 回复 回忆命令 命令：history 格式：history 功能：帮助用户回忆执行过的命令。 选项： 注释： 例如：% history 网上对话 命令：talk 格式：talk username 功能：在网上与另一用户进行对话。 选项： 注释：对话时系统把终端分为上下两部分，上半部显示自己键入信息，下半部 显示对方用户键入的信息。键入delete或Ctrl+C则结束对话。 例如：% talk username 允许或拒绝接受信息 命令：mesg (message) 格式：mesg [n/y] 功能：允许或拒绝其它用户向自己所用的终端发送信息。 选项：n 拒绝其它用户向自己所用的终端写信息 y 允许其它用户向自己所用的终端写信息（缺省值） 注释： 例如：% mesg n 给其他用户写信息 命令：write 格式：write username [ttyname] 功能：给其他用户的终端写信息。 选项： 注释：若对方没有拒绝，两用户可进行交谈，键入EOF或Ctrl+C则结束对话。 例如：write username 创建、修改、删除用户和群组 a. 创建群组： 例如： groupadd oinstall 创建群组名为oinstall的组 groupadd -g 344 dba 创建组号是344的组，此时在/etc/passwd文件中产生一个组ID（GID）是344的项目。 b. 修改群组： groupmod: 该命令用于改变用户组帐号的属性 groupmod –g 新的GID 用户组帐号名 groupmod –n 新组名 原组名：此命令由于改变用户组的名称 c. 删除群组： groupdel 组名：该命令用于删除指定的组帐号 d. 新建用户： 命令： useradd [－d home] [－s shell] [－c comment] [－m [－k template]] [－f inactive] [－e expire ] [－p passwd] [－r] name 主要参数： -c：加上备注文字，备注文字保存在passwd的备注栏中。　 -d：指定用户登入时的启始目录。 -D：变更预设值。 -e：指定账号的有效期限，缺省表示永久有效。 -f：指定在密码过期后多少天即关闭该账号。 -g：指定用户所属的群组。 -G：指定用户所属的附加群组。 -m：自动建立用户的登入目录。 -M：不要自动建立用户的登入目录。 -n：取消建立以用户名称为名的群组。 -r：建立系统账号。 -s：指定用户登入后所使用的shell。 -u：指定用户ID号。 举例： # useradd -g oinstall -G dba oracle 创建Oracle用户 e. 删除用户 命令： userdel 用户名 删除指定的用户帐号 userdel –r 用户名(userdel 用户名;rm 用户名)：删除指定的用户帐号及宿主目录 例：#useradd -g root kkk //把kkk用户加入root组里 f. 修改用户 命令： usermod 修改已有用户的信息 usermod –l 旧用户名 新用户名： 修改用户名 usermod –L 用户名： 用于锁定指定用户账号，使其不能登陆系统 usermod –U 用户名： 对锁定的用户帐号进行解锁 passwd –d 用户名： 使帐号无口令，即用户不需要口令就能登录系统 例：#usermod -l user2 user1 //把用户user2改名为user1 启动、关闭防火墙 永久打开或则关闭 chkconfig iptables on chkconfig iptables off 即时生效：重启后还原 service iptables start service iptables stop 或者： /etc/init.d/iptables start /etc/init.d/iptables stop 启动VSFTP服务即时启动： /etc/init.d/vsftpd start 即时停止： /etc/init.d/vsftpd stop 开机默认VSFTP服务自动启动: 方法一:(常用\\方便) [root@localhost etc]# chkconfig --list|grep vsftpd ( 查看情况) vsftpd 0:off 1:off 2:off 3:off 4:off 5:off 6:off [root@localhost etc]# chkconfig vsftpd on (执行ON设置) 方法二: 修改文件 /etc/rc.local , 把行/usr/local/sbin/vsftpd & 插入文件中，以实现开机自动启动。 vi技巧 a. 进入输入模式 新增 (append) a ：从光标所在位置後面开始新增资料，光标後的资料随新增资料向後移动。 A：从光标所在列最後面的地方开始新增资料。 插入 (insert) i：从光标所在位置前面开始插入资料，光标後的资料随新增资料向後移动。 I ：从光标所在列的第一个非空白字元前面开始插入资料。 开始 (open) o ：在光标所在列下新增一列并进入输入模式。 O: 在光标所在列上方新增一列并进入输入模式。 b. 退出vi 在指令模式下键入:q,:q!,:wq或:x(注意:号），就会退出vi。其中:wq和:x是存盘退出，而:q是直接退出，如果文件已有新的变化，vi会提示你保存文件而:q命令也会失效，这时你可以用:w命令保存文件后再用:q 退出，或用:wq或:x命令退出，如果你不想保存改变后的文件，你就需要用:q!命令，这个命令将不保存文件而直接退出vi。 c. 删除与修改文件的命令： x：删除光标所在字符。 dd ：删除光标所在的列。 r ：修改光标所在字元，r 後接著要修正的字符。 R：进入取替换状态，新增文字会覆盖原先文字，直到按 [ESC] 回到指令模式下为止。 s：删除光标所在字元，并进入输入模式。 S：删除光标所在的列，并进入输入模式。 d. 屏幕翻滚类命令 Ctrl+u: 向文件首翻半屏 Ctrl+d: 向文件尾翻半屏 Ctrl+f: 向文件尾翻一屏 Ctrl＋b: 向文件首翻一屏 nz: 将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。 e. 删除命令 ndw或ndW: 删除光标处开始及其后的n-1个字 do: 删至行首 d$: 删至行尾 ndd: 删除当前行及其后n-1行 x或X: 删除一个字符，x删除光标后的，而X删除光标前的 Ctrl+u: 删除输入方式下所输入的文本 f. 搜索及替换命令 /pattern: 从光标开始处向文件尾搜索pattern ?pattern: 从光标开始处向文件首搜索pattern n: 在同一方向重复上一次搜索命令 N: 在反方向上重复上一次搜索命令 :s/p1/p2/g: 将当前行中所有p1均用p2替代 :n1,n2s/p1/p2/g: 将第n1至n2行中所有p1均用p2替代 :g/p1/s//p2/g: 将文件中所有p1均用p2替换 g. 复制，黏贴 (1) 选定文本块，使用v进入可视模式；移动光标键选定内容 (2) 复制选定块到缓冲区，用y；复制整行，用yy (3) 剪切选定块到缓冲区，用d；剪切整行用dd (4) 粘贴缓冲区中的内容，用p h. 其他 在同一编辑窗打开第二个文件，用:sp [filename] 在多个编辑文件之间切换，用Ctrl+w Linux如何查看进程、杀死进程、启动进程等常用命令 - wojiaopanpan - CSDN博客 查看 .gz 文件 zcat logfile.gz zcat -f logfile.gz //强制查看 zcat logfile.gz | less zcat logfile.gz | more zless logfile.gz zmore logfile.gz zgrep -i keyword_search logfile.gz zdiff logfile1.gz logfile2.gz How To Read And Work On Gzip Compressed Log Files In Linux - It's FOSS Linux 知识点 GMT、UTC、CST、DST 时间 UTC 整个地球分为二十四时区，每个时区都有自己的本地时间。在国际无线电通信场合，为了统一起见，使用一个统一的时间，称为通用协调时（UTC, Universal Time Coordinated）。 GMT 格林威治标准时间（Greenwich Mean Time）指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。(UTC与GMT时间基本相同) CST 中国标准时间（China Standard Time） GMT + 8 = UTC + 8 = CST DST 夏令时（Daylight Saving Time）指在夏天太阳升起的比较早时，将时间拨快一小时，以提早日光的使用。（中国不使用） centos7之关于时间和日期以及时间同步的应用 - Charles.L - 博客园 Jenkins 阿里云（Aliyun） 阿里云CentOS安装了Nginx但是外网访问不到问题处理方法 安装nginx 首先更新系统软件 # yum update 安装nginx 1.安装nginx源 # yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 2.安装nginx # yum install nginx 3.启动nginx # service nginx start Redirecting to /bin/systemctl start nginx.service 4.访问http://你的ip/ 第一步。在服务器上面看一下nginx的状态 /bin/systemctl status nginx.service 结果状态正常。 第二步。curl在服务器上面 尝试你的访问 curl 127.0.0.1 #正常 curl localhost #正常 curl 本机外网IP #不正常（防火墙等等都关闭） 第三步。查阅文档，去阿里云后台查看，原来是新购的服务器都加入和实例安全组。 （OMG）立即去配置。加入你的80端口，立即就能开启了。 安全组应用案例安全组安全_云服务器 ECS-阿里云 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-18 15:09:27 更新 "},"Development/The-Front-End.html":{"url":"Development/The-Front-End.html","title":"The-Front-End","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Front-End（前端） HTML（HyperText Markup Language，超文本标记语言） confirm() 、prompt() 方法 Blob URL encoding 空格符: + or %20? CSS（Cascading Style Sheets，层叠样式表） CSS去除去掉 超链接的下划线 pre 标签自动换行 CSS 属性 z-index JS（JavaScript） ES6 是什么？ GoogleChrome/dialog-polyfill JS获取子节点、父节点和兄弟节点的若干种方式 一、js获取子节点的方式 二、js获取父节点的方式 三、js获取兄弟节点的方式 is(\":checked\")勾选框判断 js判断私有的内网IP JavaScript中Date对象的内置方法格式化时间 js快速获取li所有列表内容 js生成二维码 获取当前页面url及url参数的方法 JS正则表达式 向页面注入JS文件 js浏览器返回上一个页面（刷新） js时间戳转成北京时间格式 js UTC时间转为北京时间 JS 中按地址（引用）传递和按值传递问题 JS 中 Json Web 重排（回流） 重绘 jQuery 抛弃jQuery，拥抱原生JavaScript jQuery 获取元素内文本，但不包括其子元素内的文本值的方法 jQuery 查找全部某种id元素 jQuery 获取页面所有的 Input 勾选框的状态，或未勾选的数量 TS（TypeScript） TypeScript 是什么 Bootstrap Remove default list-style in Bootstrap [TOC] Front-End（前端） HTML（HyperText Markup Language，超文本标记语言） 超文本标记语言是一种用于创建网页的标准标记语言。HTML是一种基础技术，常与CSS、JavaScript一起被众多网站用于设计网页、网页应用程序以及移动应用程序的用户界面。网页浏览器可以读取HTML文件，并将其渲染成可视化网页。HTML描述了一个网站的结构语义随着线索的呈现，使之成为一种标记语言而非编程语言。 confirm() 、prompt() 方法 confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框。 prompt() 显示可提示用户输入的对话框。 var r = confirm(\"Press a button!\"); if (r==true) { alert(\"You pressed OK!\"); } else { alert(\"You pressed Cancel!\"); } var name = prompt(\"请输入您的名字\", \"预设值\") if (name!=null && name!=\"\") { document.write(\"你好，\" + name + \"！今天过得好吗？\") } Blob Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。 最早是数据库直接用Blob来存储二进制数据对象，这样就不用关注存储数据的格式了。在web领域，Blob对象表示一个只读原始数据的类文件对象，虽然是二进制原始数据但是类似文件的对象，因此可以像操作文件对象一样操作Blob对象。 Blob - Web API 接口参考 | MDN 为什么视频网站的视频链接地址是blob？ URL encoding 空格符: + or %20? URL的空格有时被编码成: %20，有时被编码成加号: + W3C 标准规定，表单数据（用于GET或POST）当 Content-Type 为 application/x-www-form-urlencoded 时，它指定+空格，URL中查询参数名和参数值中空格要用加号+替代。所以几乎所有使用该规范的浏览器在表单提交后，URL查询参数中空格都会被编成加号+。 遵循 RFC 2396 标准的应用来说，不接受查询字符串中出现加号 +，认为它是非法字符。所以一个安全的举措是URL中统一使用 %20 来编码空格字符。 URL被编码为 RFC 1738 时其中指定 %20。 URL encoding the space character: + or %20? Percent-encoding - Wikipedia Forms in HTML documents Universal Resource identifiers in WWW RFC 2396 RFC 1738 CSS（Cascading Style Sheets，层叠样式表） CSS 是一种样式表语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。 CSS去除去掉 超链接的下划线 　　 a:hover { color: #4499EE; text-decoration: none; /*CSS下划线效果：无下划线*/ border-bottom: 1px #0099CC dotted /*CSS加一个只有下边的框 边框为虚线*/ } a:link 指正常的未被访问过的链接； a:active 指正在点的链接； a:hover 指鼠标在链接上； a:visited 指已经访问过的链接； text-decoration 是文字修饰效果的意思； none 参数表示超链接文字不显示下划线； underline 参数表示超链接的文字有下划线 pre 标签自动换行 元素可定义预格式化的文本。被包围在 pre 元素中的文本通常会保留空格和换行符。而文本也会呈现为等宽字体。 pre { white-space: pre-wrap; word-wrap: break-word; } 【CSS】Pre 标签 自动换行 - 简书 CSS 属性 z-index 深入理解 CSS 属性 z-index - 知乎 JS（JavaScript） 1996 年 Netscape 创造了 Javascript，微软推出 Jscript，为了统一标准，交由国际标准化组织 ECMA 制定规范（TC39），1997 年 ECMA 发布 262 号标准文件，Ecmascript1.0 发布。 所以：Ecmascript 是一种规范，而 Javascript 是 Ecmascript 的一种超集实现。 ES6 是什么？ 2011 年 Ecmascript5.1 发布，之后开始使用年份来代替版本 2015 年 6 月发布了 Ecmascript2015, 简称 ES2015 2016 年 6 月发布了 Ecmascript2016, 简称 ES2016 2017 年 6 月发布了 Ecmascript2016, 简称 ES2017 所以：ES6 是对 5.1 以后版本的泛指。 GoogleChrome/dialog-polyfill polyfill 仿效一个完整的 ES2015+ 环境，并意图运行于一个应用中而不是一个库/工具。 GoogleChrome/dialog-polyfill dialog element demo 一起来看 HTML 5.2 中新的原生元素 JS获取子节点、父节点和兄弟节点的若干种方式 一、js获取子节点的方式 通过获取dom方式直接获取子节点 其中test的父标签id的值，div为标签的名字。getElementsByTagName是一个方法。返回的是一个数组。在访问的时候要按数组的形式访问。 var a = document.getElementById(\"test\").getElementsByTagName(\"div\"); 通过childNodes获取子节点 使用childNodes获取子节点的时候，childNodes返回的是子节点的集合，是一个数组的格式。他会把换行和空格也当成是节点信息。 var b =document.getElementById(\"test\").childNodes; 为了不显示不必须的换行的空格，我们如果要使用childNodes就必须进行必要的过滤。通过正则表达式式取掉不必要的信息。下面是过滤掉 //去掉换行的空格 for(var i=0; i 通过children来获取子节点 利用children来获取子元素是最方便的，他也会返回出一个数组。对其获取子元素的访问只需按数组的访问形式即可。 var getFirstChild = document.getElementById(\"test\").children[0]; 获取第一个子节点 firstChild来获取第一个子元素，但是在有些情况下我们打印的时候会显示undefined，这是什么情况呢？？其实firstChild和childNodes是一样的，在浏览器解析的时候会把他当换行和空格一起解析，其实你获取的是第一个子节点，只是这个子节点是一个换行或者是一个空格而已。那么不要忘记和childNodes一样处理呀。 var getFirstChild = document.getElementById(\"test\").firstChild; firstElementChild获取第一个子节点 使用firstElementChild来获取第一个子元素的时候，这就没有firstChild的那种情况了。会获取到父元素第一个子元素的节点 这样就能直接显示出来文本信息了。他并不会匹配换行和空格信息。 var getFirstChild = document.getElementById(\"test\").firstElementChild; 获取最后一个子节点 lastChild获取最后一个子节点的方式其实和firstChild是类似的。同样的lastElementChild和firstElementChild也是一样的。不再赘余。 var getLastChildA = document.getElementById(\"test\").lastChild; var getLastChildB = document.getElementById(\"test\").lastElementChild; 二、js获取父节点的方式 parentNode获取父节点 获取的是当前元素的直接父元素。parentNode是w3c的标准。 var p = document.getElementById(\"test\").parentNode; parentElement获取父节点 parentElement和parentNode一样，只是parentElement是ie的标准。 var p1 = document.getElementById(\"test\").parentElement; offsetParent获取所有父节点 一看offset我们就知道是偏移量 其实这个是于位置有关的上下级 ，直接能够获取到所有父亲节点， 这个对应的值是body下的所有节点信息。 var p2 = document.getElementById(\"test\").offsetParent; 三、js获取兄弟节点的方式 通过获取父亲节点再获取子节点来获取兄弟节点 var brother1 = document.getElementById(\"test\").parentNode.children[1]; 获取上一个兄弟节点 在获取前一个兄弟节点的时候可以使用previousSibling和previousElementSibling。他们的区别是previousSibling会匹配字符，包括换行和空格，而不是节点。previousElementSibling则直接匹配节点。 var brother2 = document.getElementById(\"test\").previousElementSibling; var brother3 = document.getElementById(\"test\").previousSibling; 获取下一个兄弟节点 同previousSibling和previousElementSibling，nextSibling和nextElementSibling也是类似的。 var brother4 = document.getElementById(\"test\").nextElementSibling; var brother5 = document.getElementById(\"test\").nextSibling; JS获取子节点、父节点和兄弟节点的若干种方式 - CSDN博客 is(\":checked\")勾选框判断 一种是DOM节点属性，读取它的方法就是 attr() 方法 第二种是HTML元素属性，这种属性你看不到，但是确实存在，而且大部分情况和DOM节点属性对应的值一样。 在jQuery中取得这种值的方法是 prop(); $(\"#checkbox1\").attr(\"checked\") // checked $(\"#checkbox2\").attr(\"checked\") // undefined $(\"#checkbox1\").is(\":checked\") // true $(\"#checkbox1\").prop(\"checked\") //true 从is(\":checked\")说起 - 哎呦大黄 - 博客园 js判断私有的内网IP //by https://blog.csdn.net/u013299635/article/details/78357041 function isInnerIpAddress(ipAddress) { var isInnerIp = false;//默认给定IP不是内网IP var ipNum = getIpNum(ipAddress); /** * 私有IP：A类 10.0.0.0 -10.255.255.255 * B类 172.16.0.0 -172.31.255.255 * C类 192.168.0.0 -192.168.255.255 * D类 127.0.0.0 -127.255.255.255(环回地址) **/ var aBegin = getIpNum(\"10.0.0.0\"); var aEnd = getIpNum(\"10.255.255.255\"); var bBegin = getIpNum(\"172.16.0.0\"); var bEnd = getIpNum(\"172.31.255.255\"); var cBegin = getIpNum(\"192.168.0.0\"); var cEnd = getIpNum(\"192.168.255.255\"); var dBegin = getIpNum(\"127.0.0.0\"); var dEnd = getIpNum(\"127.255.255.255\"); isInnerIp = isInner(ipNum, aBegin, aEnd) || isInner(ipNum, bBegin, bEnd) || isInner(ipNum, cBegin, cEnd) || isInner(ipNum, dBegin, dEnd); return isInnerIp; } function getIpNum(ipAddress) {/*获取IP数*/ var ip = ipAddress.split(\".\"); if (ip.length !== 4) { return 0; //不是ip地扯格式 } var a = parseInt(ip[0]); var b = parseInt(ip[1]); var c = parseInt(ip[2]); var d = parseInt(ip[3]); var ipNum = a * 256 * 256 * 256 + b * 256 * 256 + c * 256 + d; return ipNum; } function isInner(userIp, begin, end){ return (userIp>=begin) && (userIp js-先判断是否是内网IP - 人是活的，规矩是死的 - CSDN博客 JavaScript中Date对象的内置方法格式化时间 var d = new Date(); console.log(d); // 输出：Mon Nov 04 2013 21:50:33 GMT+0800 (中国标准时间) console.log(d.toDateString()); // 日期字符串，输出：Mon Nov 04 2013 console.log(d.toGMTString()); // 格林威治时间，输出：Mon, 04 Nov 2013 14:03:05 GMT console.log(d.toISOString()); // 国际标准组织（ISO）格式，输出：2013-11-04T14:03:05.420Z console.log(d.toJSON()); // 输出：2013-11-04T14:03:05.420Z console.log(d.toLocaleDateString()); // 转换为本地日期格式，视环境而定，输出：2013年11月4日 console.log(d.toLocaleString()); // 转换为本地日期和时间格式，视环境而定，输出：2013年11月4日 下午10:03:05 console.log(d.toLocaleTimeString()); // 转换为本地时间格式，视环境而定，输出：下午10:03:05 console.log(d.toString()); // 转换为字符串，输出：Mon Nov 04 2013 22:03:05 GMT+0800 (中国标准时间) console.log(d.toTimeString()); // 转换为时间字符串，输出：22:03:05 GMT+0800 (中国标准时间) console.log(d.toUTCString()); // 转换为世界时间，输出：Mon, 04 Nov 2013 14:03:05 GMT js date对象的格式化代码-前端开发博客 js快速获取li所有列表内容 var ulElement = document.getElementsByClassName(\"c-issue__articles\")[0]; var liElemnts = ulElement.getElementsByClassName('c-issue__article'); var abc = []; for(let liElement of liElemnts) { let aElements = liElement.getElementsByTagName(\"a\"); let href = aElements[0].getAttribute(\"href\"); let url = 'https://www.objc.io/' + href.slice(0, href.length - 1); abc.push(url); } var s = abc.join(\"\\n\"); console.log(s); js生成二维码 davidshimjs/qrcodejs: Cross-browser QRCode generator for javascript jeromeetienne/jquery-qrcode: qrcode generation standalone (doesn't depend on external services) 获取当前页面url及url参数的方法 window.location 属性 以https://www.ihtcboy.com:1024/n/2/?order=pub_date#comment示例: 属性 作用 示例结果 hash 设置或获取 href 属性中在井号“#”后面的分段。 #comment host 设置或获取 location 或 URL 的 hostname 和 port 号码。（如果是默认80端口的链接，:1024是没有的） www.ihtcboy.com:1024 hostname 设置或获取 location 或 URL 的主机名称部分。 www.ihtcboy.com href 设置或获取整个 URL 为字符串。 https://www.ihtcboy.com:1024/n/2/?order=pub_date origin 协议+域名。ie中获取为undefined https://www.ihtcboy.com:1024 pathname 设置或获取对象指定的文件名或路径。 /n/2/ port 设置或获取与 URL 关联的端口号码。 1024 protocol 设置或获取 URL 的协议部分。 https: search 设置或获取 href 属性中跟在问号后面的部分。 ?order=pub_date window.location.origin polyfill: if (!window.location.origin) { window.location.origin = window.location.protocol + \"//\" + window.location.hostname + (window.location.port ? ':' + window.location.port : ''); } JS正则表达式 JS正则表达式完整教程（略长） - 掘金 JavaScript正则，看这篇就够了 - 掘金 你真的懂JavaScript的正则吗？ - 掘金 向页面注入JS文件 (function() { var hm = document.createElement(\"script\"); hm.src = \"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"; var s = document.getElementsByTagName(\"title\")[0]; s.parentNode.insertBefore(hm, s); })(); js浏览器返回上一个页面（刷新） window.history.go(-1); //返回上一页 window.history.back(); //返回上一页，强行刷新 window.location.reload(); //刷新当前页 window.location.go(-1); //刷新上一页 返回上一页并刷新: $(function(){ $(\"#back\").click(function( window.location.href = document.referrer;//返回上一页并刷新 )) }); js时间戳转成北京时间格式 function time(time = +new Date()) { var date = new Date(time + 8 * 3600 * 1000); // 增加8小时 return date.toJSON().substr(0, 19).replace('T', ' '); } time(); // \"2018-08-09 18:25:54\" Date的‘toJSON’方法返回格林威治时间的JSON格式字符串，实际是使用‘toISOString’方法的结果。字符串形如‘2018-08-09T10:20:54.396Z’，转化为北京时间需要额外增加八个时区，我们需要取字符串前19位，然后把‘T’替换为空格，即是我们需要的时间格式。把时间格式中的‘-’修改为‘.’或者其他符号都是可以： function time(time = +new Date()) { var date = new Date(time + 8 * 3600 * 1000); return date.toJSON().substr(0, 19).replace('T', ' ').replace(/-/g, '.'); } time(); // \"2018.08.09 18:25:54\" 一行js代码实现时间戳转时间格式 - 前端笔记 - SegmentFault 思否 js UTC时间转为北京时间 var utc_datetime = \"2019-03-31T08:02:06Z\"; function utc2beijing(utc_datetime) { // 转为正常的时间格式 年-月-日 时:分:秒 var T_pos = utc_datetime.indexOf('T'); var Z_pos = utc_datetime.indexOf('Z'); var year_month_day = utc_datetime.substr(0,T_pos); var hour_minute_second = utc_datetime.substr(T_pos+1,Z_pos-T_pos-1); var new_datetime = year_month_day+\" \"+hour_minute_second; // 2017-03-31 08:02:06 // 处理成为时间戳 timestamp = new Date(Date.parse(new_datetime)); timestamp = timestamp.getTime(); timestamp = timestamp/1000; // 增加8个小时，北京时间比utc时间多八个时区 var timestamp = timestamp+8*60*60; // 时间戳转为时间 var beijing_datetime = new Date(parseInt(timestamp) * 1000).toLocaleString().replace(/年|月/g, \"-\").replace(/日/g, \" \"); return beijing_datetime; // 2019-03-31 16:02:06 } console.log(utc2beijing(utc_datetime)); js实现UTC时间转为北京时间，时间戳转为时间 - TBHacker - 博客园 JS 中按地址（引用）传递和按值传递问题 JS 中没有按地址（引用）传递，只有按值传递 - youxin - 博客园 JS 中 Json 有意思的JSON.parse（）、JSON.stringify（） - 掘金 Web 重排（回流） Reflow(重排)指的是计算页面布局(Layout)。某个节点Reflow时会重新计算节点的尺寸和位置，而且还有可能触发其后代节点Reflow。在这之后再次触发一次Repaint(重绘)。 当Render Tree中的一部分(或全部)因为元素的尺寸、布局、隐藏等改变而需要重新构建。这就称为回流，每个页面至少需要一次回流，就是页面第一次加载的时候。 在Web页面中，很多状况下会导致回流: * 调整窗口大小 * 改变字体 * 增加或者移除样式表 * 内容变化 * 激活CSS伪类 * 操作CSS属性 * JavaScript操作DOM * 计算offsetWidth和offsetHeight * 设置style属性的值 * CSS3 Animation或Transition 重绘 Repaint(重绘)或者Redraw遍历所有节点，检测节点的可见性、颜色、轮廓等可见的样式属性，然后根据检测的结果更新页面的响应部分。 当 Render Tree 中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格、而不会影响布局的。就是重绘。 将重排和重绘的介绍结合起来，不难发现：重绘(Repaint)不一定会引起回流(Reflow重排)，但回流必将引起重绘(Repaint)。 调研实现高性能动画 | Relign Blog jQuery 维基百科：jQuery是一套跨浏览器的JavaScript库，简化HTML与JavaScript之间的操作。由约翰·雷西格在2006年1月的BarCamp NYC上发布第一个版本。目前由Dave Methvin领导的团队进行开发。 jQuery 抛弃jQuery，拥抱原生JavaScript jQuery 代表着传统的以 DOM 为中心的开发模式，但现在复杂页面开发流行的是以 React 为代表的以数据/状态为中心的开发模式 抛弃jQuery，拥抱原生JavaScript - camsong/blog You-Dont-Need-jQuery/README.zh-CN.md - nefe/You-Dont-Need-jQuery jQuery 获取元素内文本，但不包括其子元素内的文本值的方法 例子： This is some text First span text Second span text 1、jq方法 $(\"#listitem\") .clone() //复制元素 .children() //获取所有子元素 .remove() //删除所有子元素 .end() //回到选择的元素 .text();//获取文本值 2、jq方法 $(\"#listItem\").contents().filter(function(){ return this.nodeType == 3; })[0].nodeValue 3、js方法 document.getElementById(\"listItem\").childNodes[0].nodeValue; jQuery 查找全部某种id元素 包含字符： $(\"*[id*='DiscountType']\").each(function (i, el) { //It'll be an array of elements }); 以字符开关： $(\"*[id^='DiscountType']\").each(function (i, el) { //It'll be an array of elements }); 以字符结尾： $(\"*[id$='DiscountType']\").each(function (i, el) { //It'll be an array of elements }); 如果要选择id不是给定字符串的元素： $(\"*[id!='DiscountType']\").each(function (i, el) { //It'll be an array of elements }); 如果要选择id包含给定单词的元素，则用空格分隔： $(\"*[id~='DiscountType']\").each(function (i, el) { //It'll be an array of elements }); 如果要选择id等于给定字符串或以该字符串后跟连字符开头的元素： $(\"*[id|='DiscountType']\").each(function (i, el) { //It'll be an array of elements }); search - Find all elements on a page whose element ID contains a certain text using jQuery - Stack Overflow jQuery 获取页面所有的 Input 勾选框的状态，或未勾选的数量 var numberOfChecked = $('input:checkbox:checked').length; var totalCheckboxes = $('input:checkbox').length; var numberNotChecked = totalCheckboxes - numberOfChecked; var numberNotChecked = $('input:checkbox:not(\":checked\")').length; checkbox - How to count check-boxes using jQuery? - Stack Overflow TS（TypeScript） TypeScript 是一种开源的编程语言，该语言项目由微软进行维护和管理。TypeScript 不仅包含 JavaScript 的语法，而且还提供了静态类型检查以及使用看起来像基于类的面向对象编程语法操作 Prototype。 TypeScript 是什么 简单的说 TypeScript 是 JavaScript 一个超集，能够编译成 JavaScript 代码 其核心能力是在代码编写过程中提供了类型支持，以及在编译过程中进行类型校验 TypeScript 核心概念梳理 - 阿里云开发者社区 Bootstrap Remove default list-style in Bootstrap To remove the list styles in Bootstrap, use the .list-unstyled class. .list-unstyled { padding-left: 0; list-style: none; } html - unordered is not removing the style on using class unstyled - Stack Overflow 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-12-26 17:27:56 更新 "},"WeLife/":{"url":"WeLife/","title":"WeLife（生活）","keywords":"","body":"WeLife（生活） 热爱工作，热爱生活，热爱生命，生命在于运动！ 记录生活的一些不寻常的“常识”，当然工作也是生活的一部分。 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-25 17:35:10 更新 "},"WeLife/Business.html":{"url":"WeLife/Business.html","title":"Business","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Business（商业） 复利的奇迹 边际效应 爱情中的经济学 [TOC] Business（商业） 复利的奇迹 你选哪个？ 今天一次性给你10亿元； 今天给你1元，接下来连续30天每天都给你前一天2倍的钱。 很多人选了1，可是我告诉你，选2的结果是21.47亿。 这题目告诉我们，不要期望一夜暴富，起点哪怕低到仅有“1元钱”，但只要你每天努力多一点，每天进步一点，就能创造一个意想不到的奇迹。 边际效应 为什么乙成功而甲失败了？ 甲去买烟，烟29元，但他没火柴，跟店员说：顺便送一盒火柴吧。店员没给。 乙去买烟，烟29元，他也没火柴，跟店员说：便宜一毛吧。最后，他用这一毛买了一盒火柴。 爱情中的经济学 男生对女生说：我是最棒的，我保证让你幸福，跟我好吧。——— 这是推销。 男生对女生说：我老爹有3处房子，跟我好，以后都是你的。——— 这是促销。 男生根本不对女生表白，但女生被男生的气质和风度所迷倒。——— 这是营销。 女生不认识男生，但她的所有朋友都对那个男生夸赞不已。——— 这是品牌。 学生：老师，这份报告需要写多长才行？ 老师：文章就象是姑娘的裙子，短得盖不住主题，或是太长就失去吸引力，都是不可取的。——点到为止，剩下的部分自己想像吧。 营销之道亦是如此，过于露骨，会影响品牌价值；过于保守，起不到营销效果。 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-25 18:30:18 更新 "},"WeLife/Culture.html":{"url":"WeLife/Culture.html","title":"Culture","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 ChineseCulture（中华文化） 顺颂商祺 vs 敬颂时祺 vs 此致敬礼 葡萄酒（wine） 按颜色分类 按二氧化碳压力分类 按含糖量分类 按酒体分类 按原料采收方式分类 按酿造方法分类 按饮用分类 其它分类 赤霞珠（Cabernet Sauvignon） 赤霞珠与解百纳是什么关系？ [TOC] ChineseCulture（中华文化） 顺颂商祺 vs 敬颂时祺 vs 此致敬礼 写信给长辈可用“敬请康安”“恭请钧安”等； 写信给老师可用“敬请教安”“恭候诲安”等； 写信给平辈可用“顺颂时祺”“即请近安”等； 写商务信函可用“顺颂商祺”“敬请财安”等； 写信给晚辈可用“顺询近祉”“即问近好”等； 写信给学生可用“顺询课祉”“即问日佳”等。 从被误用的“顺颂商祺”说开去-看点快报 葡萄酒（wine） 葡萄酒的英文“wine”源自于原始日耳曼语*winam，这个单字由拉丁语：vinum借用而来。红酒（Red wine）是葡萄酒的一种叫法。 葡萄酒 - 维基百科 按颜色分类 1、红葡萄酒（Red Wines） 这是一种由红葡萄品种压榨/浸皮后，经带皮发酵而来的葡萄酒。在发酵过程中，酒液可以充分萃取果皮中的颜色和风味物质，呈现紫红、宝石红、石榴红、茶红色甚至红棕色等各种不同程度的颜色，同时带有较为丰富的口感特征。随着陈年时间的增长，其颜色会变浅，呈现石榴红或砖石红色。此外，红葡萄酒的颜色也受酿造品种的影响，一些品种颜色深，酿造出来的葡萄酒颜色会比较深沉，譬如赤霞珠（Cabernet Sauvignon）和西拉（Syrah）。 2、白葡萄酒（White Wines） 通常，白葡萄酒会由白葡萄品种破皮压榨后，经不带皮发酵制成，所以酒液颜色大多浅淡，多为柠檬绿色、柠檬色、金黄色、琥珀色甚至棕色等。有时候，白葡萄酒也可以经红葡萄品种去皮压榨后发酵而来。在酿造白葡萄酒过程中，葡萄在压榨后去除葡萄皮和葡萄籽再进行发酵，这样就可以避免萃取果皮中的色素和单宁。 一般而言，雷司令（Riesling）和灰皮诺（Pinot Gris）等品种酿制的葡萄酒会呈现非常浅的柠檬黄色。而不同酿造工艺也会影响成酒的颜色，以霞多丽（Chardonnay）为例，经过橡木桶陈年的霞多丽葡萄酒会展现更深的金黄色色泽；相反，不经过橡木桶陈酿的霞多丽葡萄酒的颜色比较浅，呈浅柠檬黄色泽。 3、桃红葡萄酒（Rose Wines） 桃红葡萄酒大多由红葡萄品种酿制，由于葡萄浸皮时间短，所萃取的色素有限，因而颜色大多介于红白葡萄酒之间，常呈粉色、三文鱼色甚至橘红色。值得一提的是，一些果皮呈粉色的白葡萄品种也可用来酿制桃红葡萄酒，灰皮诺（Pinot Grigio/Pinot Gris）就是一个例子。 按二氧化碳压力分类 1、静止葡萄酒（Still Wines） 静止葡萄酒（也译作平静葡萄酒）通常指的是在 20℃ 时，二氧化碳压力小于 0.05MPa 的葡萄酒，这种葡萄酒几乎不含二氧化碳，是市面上最常见的一种葡萄酒。 2、起泡酒（Sparkling Wines） 起泡酒和静止酒相对，通常指的是在 20℃ 时，二氧化碳压力大于或等于 0.05MPa 的葡萄酒，其中香槟（Champagne）就是最典型的代表。不过根据起泡程度的不同，起泡酒还可以细分为以下两类： （1）高泡葡萄酒（Sparkling Wines）：在 20℃ 时，经自然发酵产生的二氧化碳压力大于或等于 0.35MPa 的起泡酒。其中，当酒瓶容量小于 250mL 时，二氧化碳压力大于或等于 0.3MPa 的葡萄酒也可称作高泡葡萄酒。 （2）低泡葡萄酒（Semi-Sparkling Wines）：在 20℃ 时，瓶内二氧化碳压力处于 0.05MPa-0.34MPa 之间的葡萄酒。 按含糖量分类 静止酒和起泡酒的含糖量划分标准不完全一致，以下将分别讨论。 1、静止葡萄酒 （1）干型（Dry）：经自然发酵完成后，葡萄中的糖分几乎都转化成了酒精。当葡萄酒中的自然含糖量小于或等于 4g/L 时，即称作干型葡萄酒，也可以理解为不甜的葡萄酒。此外，当总糖与总酸（以酒石酸计）的差值小于或等于 2g/L 时，含糖量最高为 9g/L 的葡萄酒也称作干型葡萄酒。 （2）半干型（Semi-Dry）：含糖量大于前一种葡萄酒，且最高为 12g/L；或者当总糖与总酸（以酒石酸计）的差值小于或等于 2g/L 时，含糖量最高为 18g/L 的葡萄酒。 （3）半甜型（Semi-Sweet）：含糖量大于半干型葡萄酒，且最高不超过 45g/L 的葡萄酒。 （4）甜型（Sweet）：含糖量大于 45g/L 的葡萄酒。 2、起泡酒 谈及起泡酒的甜度时，一般针对的是高泡葡萄酒。 （1）天然高泡葡萄酒（Brut Sparkling Wines）：根据我国国标，这类葡萄酒中糖分含量小于或等于 12g/L，允许差为 3g/L。而在国际标准中，该分类还细分为三种，分别是 Brut Nature（0-3g/L）、Extra Brut（0-6g/L）和 Brut（0-12g/L）。 （2）绝干高泡葡萄酒（Extra-Dry Sparkling Wines）：葡萄酒中含糖量为 12.1-17g/L 的高泡葡萄酒，允许差为 3g/L。 （3）干型高泡葡萄酒（Dry Sparkling Wines）：葡萄酒中含糖量为 17.1-32g/L 的高泡葡萄酒，允许差为 3g/L。 （4）半干型高泡葡萄酒（Semi-Dry Sparkling Wines）：葡萄酒中含糖量为 32.1-50g/L 的高泡葡萄酒。 （5）甜型高泡葡萄酒（Sweet Sparkling Wines）：葡萄酒中含糖量大于 50g/L 的高泡葡萄酒。 按酒体分类 酒体也是葡萄酒分类中的一个常见概念，根据酒体轻重的不同，葡萄酒常分为以下三类： 1、酒体轻盈型（Light-Bodied） 酒体轻盈型红葡萄酒一般颜色较淡，单宁较少，典型代表有黑皮诺（Pinot Noir）和佳美（Gamay）；酒体轻盈型白葡萄酒往往有着激爽的酸度，冰镇后更加清新易饮，灰皮诺、阿尔巴利诺（Albarino）和慕斯卡德（Muscadet）都属于这一类。 2、酒体中等型（Medium-Bodied） 相比前者，酒体中等型葡萄酒往往颜色更深，在舌头上的质感更重，红葡萄酒中的典型代表有梅洛（Merlot）、丹魄（Tempranillo）和桑娇维塞（Sangiovese），白葡萄酒有长相思（Sauvignon Blanc）、白诗南（Chenin Blanc）和特雷比奥罗（Trebbiano）等。 3、酒体饱满型（Full-Bodied） 酒体饱满型红葡萄酒颜色最深，单宁充沛，常见代表有赤霞珠（Cabernet Sauvignon）、西拉（Syrah/Shiraz）和马尔贝克（Malbec）等；酒体饱满型白葡萄酒大多经过了橡木桶的陈酿，因而口感更显厚重，霞多丽（Chardonnay）、维欧尼（Viognier）和赛美蓉（Semillon）都是代表之一。 需注意的是，即使同为饱满型葡萄酒，红白二者的质感还是不同的。也就是说在酒体上，红葡萄酒只能与红葡萄酒相比较，与白葡萄酒是不能相提并论的。 按原料采收方式分类 1、普通葡萄酒（Wines） 这种葡萄酒最为普遍，指的是葡萄自然成熟后采摘下来，并以新鲜葡萄或葡萄汁为原料，经全部或部分发酵酿制而成的含有一定酒精度的发酵酒。 2、晚收酒（Late Harvest Wines） 当葡萄自然成熟后再等上几天（前提是天气允许），葡萄中自然累积的糖分浓度往往会更高，如果这时再来采摘，酿制的葡萄酒往往会更加鲜甜可口。值得一提的是，这种晚收葡萄一般不经贵腐菌感染，也没有结冰，只在树上进行简单风干。 3、贵腐酒（Noble Rot Wines） 先推迟葡萄的采收期，在天气允许的情况下，葡萄果实往往会感染一定的贵腐菌，这在法国苏玳（Sauternes）、德国和匈牙利托卡伊（Tokay）等地较为常见。经贵腐菌感染的葡萄往往糖分浓度极高，酿制的葡萄酒口感甘甜，带有明显的蜂蜜和干果香气。 4、冰酒（Eiswein/Ice Wines） 这种葡萄酒同样是先推迟葡萄的采收期，待气温降到 -7℃ 到 -8℃ 葡萄果实结冰后再来采收，这在德国、奥地利和加拿大较为常见。通常为了保持葡萄酒的鲜美口感，这种葡萄还会带冰压榨。 按酿造方法分类 根据生产过程中采取的特殊酿造工艺，葡萄酒可以分为如下诸多类型。 1、加强葡萄酒（Fortified Wines） 指的是在葡萄酒发酵过程中或发酵完成后加入白兰地（Brandy）等烈酒或酒精强化酒精度后制得的葡萄酒，雪利（Sherry）、波特（Port）和马德拉（Madeira）都是典型代表。 2、加香葡萄酒（Aromatized Wines） 以葡萄酒为基酒，经浸泡芳香植物或加入芳香植物的浸出液等制成的葡萄酒，如味美思（Vermouth）。 3、加气葡萄酒（Carbonated Wines） 酒中所含二氧化碳不是由发酵产生，而是部分或全部由人工添加，从而制成的具有同起泡酒相似物理特征的葡萄酒。 4、无醇葡萄酒（Non-Alcoholic Wines） 又称作“脱醇葡萄酒”，指的是葡萄经发酵、陈酿、去杂和脱醇等特殊工艺制得的葡萄酒，酒精含量非常低，甚至接近于 0%。 按饮用分类 1、餐前酒（Aperitifs） 又叫开胃酒，常在餐前饮用或与开胃菜一同饮用，主要为起泡酒或白葡萄酒。 2、佐餐酒（Table Wines） 通常同正餐一同享用，多为干型葡萄酒，如干红或干白等。 3、餐后酒（Dessert Wines） 西方人习惯在餐后来点甜点，因此餐后酒也多与甜点搭配，常呈甜型。 其它分类 1、年份葡萄酒（Vintage Wines） 这类葡萄酒酒标上标注的年份一般指的是葡萄采摘的年份，不同年份天气状况不同，葡萄品质也不尽相同。尤其在饮用法国波尔多（Bordeaux）葡萄酒时，年份是非常重要的参考依据；而在香槟或一些加强酒中，只有少数优秀年份才会以年份酒的形式推出。 2、品种葡萄酒（Varietal Wines） 除法国等特殊产区外，绝大多数葡萄酒都会在酒标上标注酿酒葡萄名称。根据葡萄品种的不同特征，我们往往可以大致推断葡萄酒的口感风味甚至品质。当然，有时候葡萄酒也会采用不同品种进行混酿，以达到取长补短的效果。 3、产区葡萄酒（Original Wines） 和品种葡萄酒类似，来自特定产区的葡萄酒也往往代表了特定的风格特征。尤其是在一些重风土的产区，葡萄酒能够很明显地反映不同地块的特色。 史上最详细的葡萄酒分类大全 - 知乎 赤霞珠（Cabernet Sauvignon） 卡本内苏维翁（Cabernet Sauvignon，也译作赤霞珠、加本纳，亦有赤珠霞之误称），是一种主要用于酿造葡萄酒的红酿酒葡萄，同白葡萄酒使用的莎当妮一并为世界上最为广泛栽培的葡萄品种 。 卡本内苏维翁属欧亚种，原产法国波尔多。它是由法国西南部在17世纪无意中培育的，其亲本为品丽珠以及长相思。 赤霞珠是高贵的红酒葡萄品种之王，在全世界广为种植。其颗粒小、皮厚、晚熟，酿成的酒色泽深浓。葡萄酒浅嫩时单宁酸味激烈，有藏酿之质。其特点是最能表现黑加仑子味，蜜瓜味、甘草味，酒体结构丰厚结实，酒力强劲。 赤霞珠 - 维基百科，自由的百科全书 赤霞珠与解百纳是什么关系？ 解百纳源自法文Cabernet的音译，也有的地方将它译作“卡本内”。在中国，通常将赤霞珠（Cabernet Sauvignon）、品丽珠（Cabernet Franc）、蛇龙珠（Cabernet Gernischt）三个葡萄品种称为“解百纳”，因为这三种品种的外文名字都以Cabernet 开头。 解百纳是一种传统、古老的酿造工艺，而不是葡萄酒，它的是由赤霞珠、蛇龙珠、品丽珠三株合一的一种配方。 1980年出版的有关葡萄酒的书籍中，有将赤霞珠称为“解百纳”、品丽珠称为“解百难”、“卡门耐特”的说法。解百纳干红实际上已成为中国中高端葡萄酒的代名词。解百纳系列，现在是国产葡萄酒中的主打酒款。 1937年，张裕获得当时 “中华民国实业部商标局”商标注册申请的批准，正式注册了“解百纳”商标，取得了注册证书。（注意，这个年份是中华民国，新中国成立之前的。） 2002年，张裕获准注册解百纳商标。 2010年12月，争议各方在国家工商行政管理总局商标评审委员会调解下，达成调解协议，张裕集团拥有“解百纳”商标，张裕集团许可长城、王朝、威龙三家企业使用“解百纳”商标，其它葡萄酒企业（包括洋葡萄酒）使用“解百纳”商标均属侵权。 解百纳 - 百度百科 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-25 18:13:42 更新 "},"WeLife/Design.html":{"url":"WeLife/Design.html","title":"Design","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Axure RP Axure8.0 新手入门教程 中继器结构与原理详解 Sketch Photoshop StarUML [TOC] Axure RP Axure8.0 新手入门教程 Axure8.0基础教程（1-10）AxureRP8实战手册 Axure原创教程网专业 • 认真 • 原创 • 分享 Axure中文网-交互原型设计软件Axure RP 8.1中文正版支持 中继器结构与原理详解 中继器实现某一行前后插入行的操作 中继器结构与原理详解 Sketch Photoshop StarUML 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-25 18:13:32 更新 "},"WeLife/English.html":{"url":"WeLife/English.html","title":"English","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 名言名句 缩写 招聘的缩写 办公室里各部门的缩写 职位名称缩写 公司名后缀（如 &Co.、Inc.）的含义？ RTFM（Read The Fucking Manual） QPS（Queries Per Second，每秒查询率） i18n（internationalization） FYI（For Your Information） Q1\\Q2\\Q3\\Q4\\H1\\H2\\E NDA（Non-Disclosure Agreement） TOTP（Time-based One-Time Password） 单词 “Status” vs. “state” Three wise monkeys [TOC] 名言名句 To be a better man. Stay hungry. Stay Foolish. Write the Code，Change the World. Talk is cheap, Show me the code! coding every moment and every where. If you want to please everybody, you please nobody. learn something of everything, learn everything of something. Little knowledge is dangerous！ Get yourself ready, wait for opportunities！ 没梦想跟咸鱼有什么区别！ 缩写 招聘的缩写 HR（Human Resource ） 泛指人力资源职业。 JD（Job Description，职位描述） JD（Job Description缩写），在招聘中，最常用到的意思是岗位介绍和工作职责描述。 主要包括工作名称、工作职责、任职条件、工作所要求的技能，工作对个性的要求也可以写在工作说明书中。 工作说明书描述的对象是工作本身，而与从事这项工作的人无关。 其它简写 CV：Curriculum vitae，简历 BD：Business Development：业务拓展，在猎头公司通常指开发新的客户公司。 Executive Search：猎头，指针对高端职位、收费较高的猎头服务。 Headhunter：猎头，比较通俗的说法，香港和台湾公司喜欢用这种说法。 Position：职位，客户公司给猎头的公司的一个position通常叫一个case。 Candidate：候选人，为了客户的职位而搜寻的目标人选。 岗位职级 A （Assistant）的缩写，指助理。助理是职业中最基础的岗位，工作内容是基础的事务性工作。 C（Commissioner）的缩写，指专员。专员比助理专业一些，可以独立操作部分模块工作，但仍然属于比较基础的岗位，还是有不少的事务性的工作。 S（Supervisor ）的缩写，指主管。主管属于初级的管理岗位，手底下有了几个兵，主管岗位不仅要有专业上的知识、解决问题能力、对下属工作指导能力，还需努力学习财务、心理、管理等方面的知识。 M（Manager）的缩写，指经理。经理属于中层的管理人员，不仅对专业知识、工作经验和工具的运用上有较高的要求，还要关心企业的运作、各部门的流程，熟悉人员层次，以便配合公司业务支持其他部门。 D（Director）的缩写，指总监。是一般公司企业部门最高的岗位，负责统筹公司制度和整体人力资源系。 O（Chief Officer）的缩写，指首席官。集团公司才可能设置的部门最高岗位，负责制定集团化经营的公司的战略规划并监督执行，负责建立畅通的沟通渠道和有效的激励机制，全面负责部门的工作。 VP：（Vice President）的缩写，指副总裁。VP直接向总裁汇报工作，往往是一些大型的公司或体系比较健全、完善的公司才会设置的岗位，这个岗位的设置意味着公司的定位从原本孤立的某个支持、执行类部门上升到具有战略高度的部门。 VP：（President）的缩写，指总裁。 人力资源从业者应懂的英语术语缩写 - 知乎 人力资源方面的英文缩写？ - 知乎 办公室里各部门的缩写 HR Department（人资部门） HR 是 human resources 的缩写，字面上是“人力资源”，那掌管人力资源的一些资料、管理等的部门当然就是“人资部”啰！ IT Department（资讯科技部门） IT 是 information technology 的缩写，这个部门涵盖范围很广，内部人员的工作可能涵盖与资讯有关的多层面。 RD Department（研发部） RD 是 research and development 的缩写，负责的是许多软体的改良与开发。 PR Department（公关部门） PR 是 public relations 的缩写，也就是“公共关系”。 其它常见各部门 Customer Service Department 客服部 Marketing Department 行销部 Training Department 培训部 Sales Department 销售部 Administration Department 行政部门 Purchasing Department 采购部门 Accounting Department 会计部门 职位名称缩写 公司高层职位的英文缩写: 1、CEO ： Chief Executive Officer 首席执行官 2、CFO ： Chief Financial Officer 首席财务官 3、COO ： Chief Operated Officer 首席运营官 4、CTO ： Chief Technology Officer 首席技术官 5、CIO ： Chief Information Officer 首席信息官 6、CRO ： Chief Risk Officer 首席风险官 二、其他职位缩写： 1、首席谈判官【CNO】 Chief Negotiation officer 2、首席营运官【COO】 Chief Operation officer 3、公关总监 【CPO】 Chief Public relation officer 4、质量总监 【CQO】 Chief Quality officer 5、销售总监 【CSO】 Chief Sales officer 6、首席技术官【CTO】 Chief Technology officer 7、评估总监 【CVO】 Chief Valuation officer 公司名后缀（如 &Co.、Inc.）的含义？ Corporation ：法人、集团公司、股份有限公司； Inc. ：股份有限公司 (Incorporated）； Co.Ltd. ：Company Limited（有限公司）的简称，意思是有限公司； Company ：公司，商号; 作伴，伴侣； Co.,Ltd. 连在一起为 Company Limited，就是有限责任公司。“.”表缩略，“,”区分前后词。 Ltd. 公司适用于规模较小的企业，设立更灵活，可以是一个人设立，以出资额为限独立承担对公司的责任。有些 Ltd. 是由公众募资的方式设立。 Ltd. 公司三个特点： 公司所得单独缴纳所得税，与股东所得无关； 股东承担与出资额相应的债务责任； 未认购的股本可以随时认购，股份转让可以由买卖双方私人间进行。 Corp. 全拼是 Corporation。Corp. 主要是用于大公司集团的后缀。 Inc. 全拼是 Incorporated，即股份有限公司。 Inc. 考虑的是公司的“法人”性质，以具体的模式保护股东、高管和董事的利益。选择 Inc. 主要是考虑其“有限责任”，股东、董事和成员对债务以及公司义务是不需要承担责任的。 1、Inc. 最适用于大公司的组织结构，而 Ltd. 适用于稍小一些的 2、Inc. 比 Ltd. 的股东人数更多 3、Inc. 的股东和董事不需要考虑公司债务问题，而 Ltd. 没有这样的规定 最常见的就是 Inc.&Co.,Ltd, 这两者的关系通过举个例子其实也会很好理解，一般公司大了些后旗下可能有多家子公司或者产品线，那么旗下的公司或产品就会以 Co.,Ltd 为后缀。 LLC. 全拼是Limited-liability company，即有限责任公司，虽然也是代表有限责任公司，但是 LLC. 适用于小型企业，虽然公司“成员”对公司债务承担有限的责任，但成员可以选择公司收入单独缴纳所得税，还是成员的收入作为公司所得税共同缴纳；在组织框架上比 Ltd. 灵活。 在 Ltd. 中，股东责任限于出资金额。在 LLC 中，成员或多或少要承担公司的债务。Ltd. 公司的税收是以独立实体缴纳，然而 LLC. 就类似于合伙企业或者合伙公司，成员承担公司税收。 LLP 就是 Limited Liability Partnership ，有限责任合伙。 美国公司名后缀（如 &Co.、Inc.）的含义？ - 知乎 RTFM（Read The Fucking Manual） RTFM，是一个英文缩写，意思是：“去读那些他妈的手册”（Read The Fucking Manual），这句话通常用在回复那些只要查阅文件就可以解决，拿出来提问只是浪费别人时间的问题。而为了避免这个缩写单词，因为用了“fuck”（他妈的）这个单词而攻击性、火药味太重，RTFM也被解释成“去读那些愚蠢的手册”（Read The Foolish Manual）；有的时候也解释成“去读那些友善的手册”（Read The Friendly Manual）或“去读那些写得不错的手册”（Read The Fine Manual）。另外，有时候就干脆把“F”拿掉，直接写成RTM（去读手册，Read The Manual）。 RTFM - 维基百科 QPS（Queries Per Second，每秒查询率） 从英文翻译而来 每秒查询数是信息检索系统（例如搜索引擎或数据库）在一秒钟内收到的搜索流量的常用度量。该术语更广泛地用于任何请求-响应系统，更准确地说是每秒调用的请求数。高流量的系统必须看他们的QPS，以便知道什么时候扩展系统以处理更大的负载。 TPS：Transactions Per Second（每秒事务处理量） 即服务器每秒处理的事务数。TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS = CAPS × 每个呼叫平均TPS）。TPS是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。 一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。一般来说，TPS指每秒钟特定实体执行的原子性操作的次数。 狭义上，该术语通常由数据库管理系统供应商和用户社区用于描述每秒钟的数据库操作数。 最近，这个术语被用来描述加密货币的交易速率，例如运行比特币区块链的分布式网络。能够按需伸缩的事务速率的开发是加密货币技术的一个重要研究领域。 Queries per second - Wikipedia 每秒事务处理量 - 维基百科 i18n（internationalization） 国际化的英文：internationalization，简称为i18n，取前后两个字母，18表示中间省略字母的个数。 应用国际化开发主要包括： 文本国际化（包括文本的顺序） 显示的国际化（比如显示日期显示的顺序） FYI（For Your Information） FYI 是英文供您参考 For Your Information 的缩写，中文也可翻译为仅供参考。 FYI常用于电子邮件、即时通讯以及非正式口语和商务口语对话中。FYI的用法至少可以追溯到1941年。1959年《迷离境界》的一集 \"One for the Angels \"中也出现FYI。 在互联网标准中，RFC的一些说明文档也名为FYI。这些说明文档的主题涉及解释 \"为什么要这样做 \"以及对常见操作问题的解答[3]。 FYI - 维基百科 Q1\\Q2\\Q3\\Q4\\H1\\H2\\E Q：英文单词（Quarter）第一个首写字母，中文翻译为：季度。 Q1代表第1季度（1-3月） Q2代表第2季度（4-6月） Q3代表第3季度（7-9月） Q4代表第4季度（10-12月） H：英文单词（Half）第一个首写字母，中文翻译为：半年。 H1代表上半年 Ｈ2代表下半年 E：英文单词（Estimated）第一个首写字母，中文翻译为：预计的。2020E 代表2020年的预测数据。 NDA（Non-Disclosure Agreement） NDA：Non Disclosure Agreement, 即保密协议。 TOTP（Time-based One-Time Password） TOTP：Time-based One-Time Password，基于时间的一次性密码算法 一种根据预共享的密钥与当前时间计算一次性密码的算法。它已被互联网工程任务组接纳为RFC 6238标准，成为主动开放认证（OATH）的基石，并被用于众多多重要素验证系统当中。 TOTP是散列消息认证码（HMAC）当中的一个例子。它结合一个私钥与当前时间戳，使用一个密码散列函数来生成一次性密码。由于网络延迟与时钟不同步可能导致密码接收者不得不尝试多次遇到正确的时间来进行身份验证，时间戳通常以30秒为间隔，从而避免反复尝试。 在特定的多重因素验证应用中，用户验证步骤如下：一位用户在网站或其他服务器上输入用户名和密码，使用运行在本地的智能手机或其他设备中的TOTP生成一个一次性密码提交给服务器，并同时向服务器输入该一次性密码。服务器随即运行TOTP并验证输入的一次性密码。为此，用户设备与服务器中的时钟必须大致同步（服务器一般会接受客户端时间-1区间（也就是延迟了30秒）的时间戳生成的一次性密码）。在此之前，服务器与用户的设备必须通过一个安全的信道共享一个密钥，用于此后所有的身份验证会话。如需要执行更多步骤，用户也可以用TOTP验证服务器。 基于时间的一次性密码算法 - 维基百科 单词 “Status” vs. “state” state 表示一种属性级别的状态，是精确的，客观的，通常可量化的。比如http的readyState：01234精确表示准备就绪，待发送等状态。 status 表示一种宽泛的状态，有时可以翻译成状况。比如http的status code：200 206 404之类表示成功了，出问题了，状态码后面还跟着一个消息，比如 200 OK，也可以是200 qi shi bing bu ok，甚至 200 SOS，这是一种宽泛的状态。 meaning - \"Status\" vs. \"state\" - English Language & Usage Stack Exchange nomenclature - Naming conventions: \"State\" versus \"Status\" - Stack Overflow 程序代码中，怎么区分status和state？ - 知乎 Three wise monkeys 🙈 See-No-Evil Monkey 🙊 Speak-No-Evil Monkey 🙉 Hear-No-Evil Monkey 三猿，又称三不猴，是指三個分別用雙手遮住眼睛、耳朵與嘴巴的猴子雕像，而在世界其他地方則被稱為「Three wise monkeys」，顯示了名為「不見、不聞、不言」（日语：見ざる、聞かざる、言わざる）之睿智的三個祕密。 🙈 See-No-Evil Monkey Emoji Three wise monkeys - Wikipedia 三猿 - 维基百科 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2022-09-12 10:55:50 更新 "},"WeLife/Investment.html":{"url":"WeLife/Investment.html","title":"Investment","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Investment（投资） 股票 术语 以 ST，ST，SST 开头的股票分别代表什么 经济 利率 浮动利率 存款货币银行 风险投资 货币政策 货币政策目标 货币政策传导机制 法定存款准备金政策 再贴现 现金 货币层次 基础货币 货币乘数 超额准备金 货币流通速度 [TOC] Investment（投资） 股票 术语 套牢 ： 预期股价上涨而买入股票，结果股价却下跌，又不甘心将股票卖出，被动等待获利时机的出现。 被套 ： 指投资者买进股票后，股价下跌而卖不出去。如果现在价格下跌比较多，那么就可以说套得很深了或者套牢。 解套 ： 被套牢的股民最希望看到的就是股价止跌上升（反弹），并且能升至原先买入价之上（收复失地），即解套。 利多 ： 对于多头有利，能刺激股价上 涨的各种因素和消息，如：银行利率降低，公司经营状况好转等。 利空 ： 对空头有利，能促使股价下跌的因素和信息，如：银根抽紧，利率上升，经济衰退，公司经营状况恶化等。 牛市 ： 股市前景乐观，股票价格持续上涨的行情。 熊市 ： 前途暗淡，股票普遍持续下跌的行情。 多头 ： 投资人预期未来价格上涨，以目前价格买入一定数量的股票等价格上 涨后，高价卖出，从而赚取差价利润的交易行为，特点为先买后卖的交易行为。 空头 ： 预期未来行情下跌，将手中股票按目 前价格卖出，待行情下跌后买进， 获得差价利润。其特点为先卖后买的交易行为。 反弹 ： 股票价格在下跌趋势中因下跌过快而回升的价格调整现象。回升幅度 一般小于下跌幅度。 盘整 ： 通常指价格变动幅度较小，比较稳定，最高价与最低价之差不超过 2% 的行情。 死空头 ： 总是认为股市情况不好，不能买入股票，股票会大幅下跌的投资者。 死多头 ： 总是看好股市，总拿着股票，即使是被套得很深，也对股市充满信心的投资者。 多翻空 ： 多头确信股价已涨到顶峰，因而大批卖出手中股票成为空头。 空翻多 ： 空头确信股价已跌到尽头，于是大量买入股票而成为多头。 短多 ： 短线多头交易，长则两三天短则一两天，操作依据是预期股价短期看好。 斩仓(割肉) ： 在买入股票后，股价下跌，投资者为避免损失扩大而低价(赔本) 卖出股票的行为。 坐轿 ： 预期股价将会大涨，或者知道有庄家在炒作而先期买进股票，让别人去抬股价，等股价大涨后卖出股票，自己可以不费多大力气就能赚大钱。 抬轿 ： 认为目前股价处于低位，上升空间很大，于是认为，买进是坐轿，殊不知自己买进的并不低价，不见得就能赚钱，其结果是在替别人抬轿子。 多杀多 ： 普遍认为股价要上涨，于是纷纷买进，然而股价未能如期上涨时， 竞相卖出，而造成股价大幅下跌。 热门股 ： 交易量大、换手率高、流通性强的股票，特点是价格变动幅度较大， 与冷门股相对。 对敲 ： 是股票投资者(庄家或大的机构投资者)的一种交易手法。具体操作方法为在多家营业部同时开户，以拉锯方式在各营业部之间报价交易，以达到操纵股价的目的。 筹码 ： 投资人手中持有的一定数量的股票。 踏空 ： 投资者因看淡后市，卖出股票后，该股价却一路上扬，或未能及时买入，因而未能赚得利润。 跳水 ： 指股价迅速下滑，幅度很大，超过前一交易日的最低价很多。 诱多 ： 股价盘旋已久，下跌可能性渐大， \"空头\"大都已卖出股票后，突然\"空方\"将股票拉高，误使\"多方\"以为股价会向上突破，纷纷加码，结果\"空头\"由高价惯压而下，使\"多头误入陷阱\"而\"套牢\"，称为\"诱多\"。 诱空 ： 即\"主力多头\"买进股票后，再故意将股价做软，使\"空头\"误信股价将大跌，故纷纷抛出股票错过获利机会，形成误入\"多头\"的陷阱，称为\"诱空\"。 骗线 ： 利用技术分析的划线原理，在想出货的时候，先造成有利的线路，使依靠技术分析的人误以为会涨而买进，谓之\"骗线\"。 阴跌 ： 指股价进一步退两步，缓慢下滑的情况，如阴雨连绵，长期不止。 停板 ： 因股票价格波动超过一定限度而停做交易。其中因股票价格上涨超过 一定限度而停做交易叫涨停板，其中因股票价格下跌超过一定限度而停做交易叫跌停板。目前国内规定A股涨跌幅度为10%；ST股为5%。 洗盘 ： 是主力操纵股市，故意压低股价的一种手段，具体做法是，为了拉高股价获利出货，先有意制造卖压，迫使低价买进者卖出股票，以减轻拉升压力，通过这种方法可以使股价容易拉高。 平仓 ： 投资者在股票市场上卖出股票的行为。 换手率 ： 即某股票成交的股数与其上市流通股总数之比。它说明该股票交易活跃程度，尤其当新股上市时，更应注意这个指标。 现手 ： 当前某一股票的成交量。 平开 ： 某股票的当日开盘价与前一交易日收盘价持平的情况称为开平盘，或平开。 低开 ： 某股票的当日开盘价低于前一交易日收盘价的情况称为低开。 高开 ： 某股票的当日开盘价高于前一交易日收盘价的情况称为高开。 内盘 ： 以买入价成交的交易，买入成交数量统计加入内盘。 外盘 ： 以卖出价成交的交易。卖出量统计加入外盘。内盘，外盘这两个数据大体可以用来判断买卖力量的强弱。若外盘数量大于内盘，则表现买方力量较强，若内盘数量大于外盘则说明卖方力量较强。 均价 ： 指现在时刻买卖股票的平均价格。若当前股价在均价之上，说明在此之前买的股票都处于盈利状态。 填权 ： 股票除权后的除权价不一定等同于除权日的理论开盘价，当股票实际开盘价交易高于这一理论价格时，就是填权。 多头陷阱 ： 即为多头设置的陷阱，通常发生在指数或股价屡创新高，并迅速突破原来的指数区且达到新高点，随后迅速滑落跌破以前的支撑位，结果使在高位买进的投资者严重被套。 空头陷阱 ： 通常出现在指数或股价从高位区以高成交量跌至一个新的低点区，并造成向下突破的假象，使恐慌抛盘涌出后迅速回升至原先的密集成交区，并向上突破原压力线，使在低点卖出者踏空。 溢价发行 ： 指股票或债券发行时以高于其票面余额的价格发行的方式。 场内交易 ： 在证券交易所内进行的证券买卖活动。 场外交易 ： 在交易所以外市场进行的证券交易总称，也称为\"柜台市场\"、\"第三市场\"或\"第四市场\"。 收盘价 ： 证券交易所每个营业日闭市前的最后一笔交易价格为该证券收盘价。 散户 ： 通常指投资额较少，资金数量达不到证券交易所要求的中户标准，常被称为散户。(目前进入中户有些地方是50万资金，有些地方是30万资金)。 建仓 ： 投资者开始买入看涨的股票。 市价总额(总市值) ： 指在某特定的时间内，交易所挂牌交易全部证券(以总股本计)按当时价格计算的证券总值。可以反映该证券市场的规模大小，由于它是以各证券的发行量为权数的，所以当发行量大的证券(流通量不一定大)价格变动时对总市值影响就大。这也是股市中庄家经常通过拉抬大盘股来影响股指的一个重要原因。 实多 ： 指资金实力雄厚、持股时间长，不做见跌就买见涨就卖，只图眼前一点小利的投资者。 浮多 ： 与实多相对，指资金较弱、持股时间短、见涨就卖见跌就买、只图眼前利益的小投资者。 卖压 ： 在股市上大量抛出股票，使股价迅速下跌。 买压 ： 买股票的人很多，而卖股票的人却很少。 回档 ： 在多头市场上，股价涨势强劲，但因过快而出现回跌，称回档。 护盘 ： 股市低落、人气不足时，机构投资大户大量购进股票，防止股市继续 下滑的行为。 惯压 ： 用大量股票将股价大幅度压低，以便低成本大量买进。 盘档 ： 一是当天股价波动幅度很小，最高与最低价之间不超过2%；二是行 情进入整理，上下波动幅度也不大，持续时间在半个月以上。 抢帽子 ： 指当天先低价买进，等股价上升后再卖出相同种类和相同数量的股票或当天先卖出股票，然后再以低价买进相同数量和相同种类的股票，以获取差价利益。 跳空与补空 ： 股市受强烈的利多或利空消息影响，开盘价高于或低于前一交 易日的收盘价，股价走势出现缺口，称之为跳空；在股价之后的走势中，将跳空的缺口补回，称之为补空。 委比 ： 是衡量一段时间内场内买、卖盘强弱的技术指标。它的计算公式为：委比=（委买手数－委卖手数）/（委买手数+委卖手数）×100%。从公式中可以看出，“委比”的取值范围从－100%至+100%。若“委比”为正值，说明场内买盘较强，且数值越大，买盘就越强劲。反之，若“委比”为负值，则说明市道较弱。上述公式中的“委买手数”是指即时向下三档的委托买入的总手数，“委卖手数”是指即时向上三档的委托卖出总手数。如：某股即时最高买入委托报价及委托量为 15. 00元、130手，向下两档分别为14. 99元、150手，14. 98元、205手；最低卖出委托报价及委托量分别为15. 01元、270 手，向上两档分别为15. 02元、475手，15. 03元、655手，则此时的即时委比为－48. 54%。显然，此时场内抛压很大。通过“委比”指标，投资者可以及时了解场内的即时买卖盘强弱情况。 以 ST，*ST，S*ST 开头的股票分别代表什么 *ST ： 公司经营连续三年亏损，退市预警。ST` ： 公司经营连续二年亏损，特别处里。S*ST` ： 公司经营连续三年亏损，退市预警+还没有完成股改。SST` ： 公司经营连续二年亏损，特别处里+还没有完成股改。S ： 还没有完成股改 经济 读懂货币政策必知的 17 个专业术语： 利率 亦称“利息率”，指一定时期内利息额与本金额的比率。利率一般有年利率、月利率和日利率三种表现形式。年利率按本金的百分之几表示，在中国称为 “分”；月利率按本金的干分之几表示，在中国称为 “厘”；日利率按本金的万分之几表示在中国称为 “毫”。 利率公式为：利率=利息额/本金额 浮动利率 银行等金融机构规定的以基准利率为中心在一定幅度内上下浮动的利率。有利率上浮和利率下浮两种情况。高于基准利率而低于最高幅度为利率上浮，低于基准利率而高于最低幅度为利率下浮。浮动利率已成为中国利率体系的重要组成部分。 存款货币银行 亦称 “存款银行”，是 IMF 对于接受活期存款并可以创造存款货币的金融机构的统称。存款货币银行是唯一被允许开办多种存款业务的银行（包括活期存款、定期存款和储蓄存款），故称 “存款银行”。它通过吸收存款、发放货款和办理结算而创造存款货币，这是区别于其他银行的主要特征。 风险投资 风险投资分为广义和狭义两类。 广义风险投资：是指各种具有潜在高收益但同时又存在极大的不确定性从而可能遭受损失的资本投资，包括高科技项目、高负债企业、严重亏损的公司、高风险证券等等； 狭义风险投资：是指投资于开发高新技术项目的行为，包括对高科技产业的研究投资、开发投资、项目建设投资、产品生产投资、市场建设投资等等。 货币政策 货币当局为实现一定的宏观经济目标而采取的各种控制和调节货币供应量或信用方针、政策和措施的总和。包括宏观经济目标、政策工具、操作目标、中介目标及货币政策操作技巧等内容。 货币政策目标 指货币政策制定者期望货币政策运行的结果，对宏观经济总体目标所能发挥的实际效应，一般包括充分就业、稳定物价、经济增长和国际收支平衡四项目标。事实上，许多国家只是将四项目标其中一项作为主要目标。比如，1990 年，新西兰率先提出，货币政策应当以控制通货膨胀为唯一目标，其后，有美国、英国、加拿大、澳大利亚等十几个国家也采用了以反通胀为目标的货币政策。 货币政策传导机制 货币政策从政策手段到操作目标，再到中间目标，最后到最终目标发挥作用的途径和传导过程的机能。货币政策分为制定和执行两个过程，制定过程从确定最终目标开始，依次确定中介目标、操作目标、政策手段。执行过程则正好相反，首先从操作政策手段开始，通过政策手段直接作用于操作目标，进而影响中间目标，最后实现最终目标。 法定存款准备金政策 按照银行法的规定，商业银行必须将其吸收的存款按照一定比率存入央行的存款。法定存款准备金是商业银行存款准备总额的最主要的构成部分，这项准备金一般是不准动用的。商业银行在央行的存款超过法定存款准备金以外的部分，是超额准备金。法定存款准备率、贴现率和公开市场业务是现代各国央行进行宏观调控的三大政策工具，而法定存款准备率通常被认为是货币政策的“最猛烈”的工具。 再贴现 央行对商业银行放款的形式之ー。商业银行将已贴现的未到期票据，向央行再行贴现，以筹措资金的行为。再贴现的利率称为再贴现率，由央行公布。再贴现原来主要作为商业银行弥补短期资金不足，应付客户提存需要，确保银行安全性的一种措施，后来逐渐发展成为央行货币政策的工具，央行通过变更贴现率控制商业银行的放款规模，从而调控货币供应量。 现金 亦称 “通货”。政府授权发行的不兑现的银行券和辅币。是一国的法偿货币。现金是央行提供基础货币的主要形式。 货币层次 根据货币的流动性的原则，以存款及其信用工具转换为现金所需时间和成本作为标准，对货币划分的层次。 央行为了便于进行宏观经济运行监测和货币政策操作，按照不同的统计口径确定不同的货币供应量。我国的具体层次是： MO = 现金 M1 = 现金 + 活期存款（一般不包括官方机构和外国银行在商业银行的存款） M2 = M1 + 准货币 + 可转让存单 (其中 “准货币”指活期存款以外的一切公私存款) M3 = M2 + CD + 长于隔夜的限期回购协议和欧洲美元； M4 = M3 + 定期存款 + 私人部门持有的建房互助协会的股份 (M4 是英国英格兰银行公布的一个货币口径) L = M3 + 非银行公众持有的储蓄券 + 短期国库券 + 商业票据 + 银行承兑票据。 基础货币 亦称 “货币基数”、“货币基础”、“强力货币” 或 “高能货币”。经过商业银行的存贷款业务而能扩张或收缩货币供应量的货币。西方国家的基础货币包括商业银行存入央行的存款准备金（包括法定准备金和超额准备金）与社会公众所持有的现金之和。央行通过调节基础货币的数量就能数倍扩张或收缩货币供应量，因此，基础货币构成市场货币供应量的基础。因其是一种活动力强大的货币，具有高能量，故亦称之为 “强力货币” 或 “高能货币”。 货币乘数 央行提供的基础货币与货币供应量扩张关系的数量表现。即央行扩大或缩小一定数量的基础货币之后，能使货币供应总量扩大或缩小的比值。亦称基础货币的扩张倍数。基本计算公式是：Ms=Bm 超额准备金 商业银行或存款机构在货币当局规定必须缴纳的法定准备金之外，保留的一部分准备金。商业银行保留超额准备金主要是解决意外的大额提现、结清存款或避免错过更好的投资机会。超额准备金的变动将影响到货币乘数大小，在基础货币供应量不变的情况下，它制约着银行体系创造货币的能力。 货币流通速度 同一单位的货币在一定时期内充当流通的次数。它是定商品流通过程中所需要货币量的重要因素之ー，并且能在一定程度上弥补流通中货币数量的不足。 现实中对货币流通速度测定，主要根据不同层次货币与相应商品的流通，确定各层次货币的流通速度，如以商品零售额与现金余额的比值，测定这时期现金的流通速度；以国民生产总值与 M1 或 M2 的比值，测定 M1 或 M2 的流通速度。 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-25 18:13:16 更新 "},"WeLife/LifeStyle.html":{"url":"WeLife/LifeStyle.html","title":"LifeStyle","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Life Style（生活方式） 关于饮食 关于运动 关于生理 关于爱人 关于幸福 [TOC] Life Style（生活方式） 关于饮食 在牛奶和豆浆之间，选择后者 觉得还可以再吃半碗饭时，离开餐桌 即使身体不感到饥渴，每天也要至少饮用 4 杯水 多喝酸奶 远离烟酒 在食谱里添加杂粮和蔬菜 饮绿茶胜过红茶 重视早餐多过晚餐 控制盐的用量 起床后先刷牙，再喝水 不喝久煮的火锅汤 一早一晚，两个苹果可以有效改善便秘 饭前吃水果胜过饭后 每周至少吃一次鱼 远离可乐等碳酸饮料 睡前可以来一杯红葡萄酒 关于运动 多享受早晨 8-9 点的阳光 慢跑快走 热水泡脚可有效预防静脉曲张 精神极度疲倦时，不适宜以运动减压，休息更重要 冬季少做户外运动 10 层以下，不乘坐电梯 站着看电视 每天运动半小时，而非周末运动 3 小时 经常散步 睡半硬的床铺更有利于颈椎健康 运动后休息半小时再入浴 关于生理 不翘二郎腿，以免压迫神经 去年的衣服要进行曝晒后才可以穿 不要总吃剩饭剩菜 头发不要洗的太勤，2-3 天一次即可 午休一定要躺着睡，不能超过 40 分钟 关于爱人 不要因为过度关心子女，而忽视爱人的感受 与爱人的感情，也需要用心经营 发生矛盾，各自退一步 偶尔制造一点惊喜 不要忘了爱人的生日 关于幸福 珍惜现在所拥有的一切 人活着就是一种心情，把握今天，设置明天，储存永远 只要用心感受，幸福就会永远存在 知足便是幸福 有家人陪伴，有朋友关心，有健康的身体，这就是世界上最幸福的事了 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-25 18:13:08 更新 "},"WeLife/Management.html":{"url":"WeLife/Management.html","title":"Management","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Management（管理） 技术管理知识树 员工管理 1、分工 2、标准 3、体制 4、表率 5、竞争 6、沟通 7、指导 8、锻炼 危机管理假设 [TOC] Management（管理） 技术管理知识树 项目 知识树 软件开发 基础知识开发知识软件设计业务软件工程 部门运营 招聘/解聘组织协调激励绩效评估教练/辅导员工成长预算决策政治 项目管理 对事务的管理：整合管理范围管理进度管理成本管理质量管理风险管理采购管理对人的管理：人力源管理沟通管理干系人管理 人际沟通 DISC即兴沟通关键对话非暴力沟通反馈倾听心理学 产品知识 产品知识新产品开发产品管理 公司知识 产品/服务核心竞争力愿景/价值观/发展历程等 行业知识 行业趋势行业特性行业规律竞争对手竞品 通用技能 PPT演讲讲授写作英语 商务 推销谈判项目跟踪合同 通识 历史美食旅游...... 自我能力提升 逻辑思维问题分析与決策时间管理个人知识管理目标管理 员工管理 1、分工 管理的首要工作就是科学分工。只有每个员工都明确自己的岗位职责，不会产生推委、扯皮等不良现象。如果公司象一个庞大的机器，那么每个员工就是一个个零件，只有他们爱岗敬业，公司的机器才能得以良性运转。公司是发展的，管理者应当根据实际动态情况对人员数量和分工及时做出相应调整。否则，队伍中就会出现“不拉马的士兵”。如果队伍中有人滥竽充数，给企业带来的不仅仅是工资的损失，而且会导致其他人员的心理不平衡，最终导致公司工作效率整体下降。 2、标准 工作标准是员工的行为指南和考核依据。缺乏工作标准，往往导致员工的努力方向与公司整体发展方向不统一，造成大量的人力和物力资源浪费。因为缺乏参照物，时间久了员工容易形成自满情绪，导致工作懈怠。制定工作标准尽量做到数字化，要与考核联系起来，注意可操作性。 3、体制 管理的真谛在 “理” 不在 “管”。管理者的主要职责就是建立像 “轮流分粥，分者后取” 那样合理的游戏规则，让每个员工按照游戏规则自我管理。游戏规则要兼顾公司利益和个人利益，并且要让个人利益与公司整体利益统一起来。贵任、权利和利益是管理平台的三根支柱，缺一不可。缺乏责任，公司就会产生腐败，进而衰退；缺乏权利，管理者的执行就变成废纸；缺乏利益，员工就会积极性下降，消极怠工。只有管理者把 “责、权、利” 的平台搭建好，员工才能 “八仙过海，各显其能”。 4、表率 正人先正己，做事先做人。管理者要想管好下属必须以身作则。示范的力量是惊人的。不但要勇于替下属承担责任，而且要事事为先、严格要求自己，做到 “己所不欲，勿施于人。一旦通过表率树立起在员工中的威望，将会上下同心，大大提高团队的整体战斗力。得人心者得天下，做下属敬佩的领导将使管理事半功倍。 5、竞争 流水不腐，户枢不蠹。人天生有种惰性，没有争就会固步自封，躺在功劳簿上睡大觉。 森林时梅花鹿竟争对手就是狼，时刻让梅花鹿清楚狼的位置和同伴的位置。跑在前面的梅花鹿可以得到更好的食物，跑在最后的梅花鹿就成了狼的食物。按照市场规则，给予 “头鹿” 奖励，给予让 “末鹿” 被市场淘汰。 6、沟通 我们经常犯这样的错误：在手下还没有来得及讲完自己的事情前，就按照我们的经验大加评论和指挥。反过头来想一下，如果你不是领导，你还会这么做吗？打断手下的语言，一方面容易做出片面的决策，另方面使员工缺乏被尊重的感觉。时间久了，手下将再也没有兴趣向上级反馈真实的信息。反馈信息系统被切断，领导就成了 “孤家寡人”，在決策上就成了 “睁眼瞎”。与手下保持畅通的信息交流，将会使你的管理如鱼得水，以便及时纠正管理中的错误，制定更加切实可行的方案和制度。 7、指导 提高员工素质和能力是提高管理水准的有效方式。学习有利于提高团队执行力，便于增强团队凝聚力。手把手的现场指导可以及时纠正员工的错误，是提高员工素质的重要形式之一。但是指导必须注重技巧，就象勘弥大师那样要保护员工的热情。管理者必须避免教训式指导，应当语重心长的激励员工提高自身业务素质。除了现场指导外，还可以综合运用培训、交流会、内部刊物、业务竞赛等多种形式，激发员工不断提高自身素质和业务水平，形成一个积极向上的学习型团队。 8、锻炼 每个人都希望用自己的能力来证明自身价值，手下也不例外。给他们更大的空间去施展自己的才华，是对他们最大的尊重和支持。 不要害怕他们失败，给予适当的扶持和指点，放开你手中的“雄鹰”，让他们翱翔于更宽阔的天空。是个猴子就给他们座山折腾折腾，是条龙就给他们条大江大河扑腾扑腾。他们的成长，将为你的工作带来更大的贡献。他们的成长，将促使你更进一步。 危机管理假设 1、假设问题本身要比表现出来的更糟糕。 2、假设这个世界上并不存在秘密，每个人最终都会知道一切事情的真相。 3、假设你和自己的组织对危机的处理将被别人以最敌对的态度描述出来。 4、假设在危机处理过程中，有关的人和事会产生变化。 5、假设你的组织将从危机中挺过来！而且会因为经历了考验而变得更强大。 《赢》杰克·韦尔奇 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-11 23:02:11 更新 "},"WeLife/Office.html":{"url":"WeLife/Office.html","title":"Office","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Office（办公） Excel Excel VBA [TOC] Office（办公） Excel Excel VBA 7 分钟入门 Excel VBA，从此打开新世界的大门 - 简书 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-25 18:30:28 更新 "},"WeLife/Product.html":{"url":"WeLife/Product.html","title":"Product","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 Product（产品） 4W1H - 重定向用户模型 广告投放营销漏斗转化模型 用户特征 [TOC] Product（产品） 4W1H - 重定向用户模型 Who（属性） When（时间） Where（来源） What（行为） How（质量） Who（属性） 性别 年龄 地区 行业 收入 兴趣爱好 用户等级 --- 通会员、高级VIP等 其它 CRM 数据 When（时间） 第一次 当前行为 最近一次 最近一次距离当前的时间间隔 在线时长/停留时间 频率 其它 Where（来源） 网络硬广 网络软文 邮件营销 EDM 搜索引擎SEM/SEO --- 搜索关键词进入 社交媒体 --- 微博、微信等 直接输入URL/直接打开APP 线下二维码 其它 What（行为） 看到广告 点击广告 访问/浏览 --- 浏览记录/轨迹、站内搜索词 跳出 转化 --- 注册、下载、购买、其它 How（质量） 访问深度 行为次数 订单金额 其它 广告投放营销漏斗转化模型 展示量：产品曝光提高品牌认知（曝光是广告投放的首要任务 点击量：吸引目标用户关注，进一步了解 访问量：激发购买欲望,说服用户购买/行动 咨询量：激发购买欲望,说服用户购买/行动 成交(ROI)：获取收益 用户特征 基本信息： 性别、年龄、住址 会员特征：等级、生命周期 信用特征：虚拟号段、黑/白名单、风控信息 渠道特征：终端类型、设备厂商、短信渠道 行为特征：购物偏好、价格敏感、消费等级 业务类特征：广告曝光媒体、广告点击日期 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2020-10-25 18:13:03 更新 "},"WeLife/RuleOfThumb.html":{"url":"WeLife/RuleOfThumb.html","title":"RuleOfThumb","keywords":"","body":"TreeviewCopyright © iHTCboy all right reserved, powered by aleen42 工作 任务Smart原则 SWOT分析模型（SWOT Analysis） 硬技能 & 软技能 职业发展 --- 阶段 强大者的习惯 职场情商 工作9经验 8种职业人脉 交流表达 演讲要点 会这样说话少奋斗30年？ 采访技巧 (Interviewing tips) 学习 SQ3R 学习法 面试求职 STAR原则 注意肢体语言和口头表达方式 如何正确自我介绍？ 自我介绍：表达有效信息 检验简历效果 面试问题 面试官的问题 [TOC] Rule of thumb：经验之谈，经验法则 工作 任务Smart原则 在撰写任务描述的时候，请一定按照目标管理中的 smart 原则 S 代表具体( Specific )，描述不能笼统； M 代表可度量( Measurable )，指任务可数量化或者行为化； A 代表可实现( Attainable )，指任务在付出努力的情况下可以实现，避免设立过高或过低的目标。 R 代表相关性( Relevant ），指任务与其它目标相关联； T 代表有时限( Time-bound )，注重完成绩效指标的特定期限。 SWOT分析模型（SWOT Analysis） SWOT分析来自于麦肯锡咨询公司，将对企业内外部条件各方面内容进行综合和概括，进而分析组织的优劣势、面临的机会和威胁的一种方法。 通过SWOT分析，可以帮助企业把资源和行动聚集在自己的强项和有最多机会的地方；并让企业的战略变得明朗。 优势（Strengths） 劣势（Weaknesses） 机会（Opportunities） 威胁（Threats） 硬技能 & 软技能 硬技能 专业的知识技能 丰富的行业经验 分析解决问题的能力 看家本领，立足之本 软技能 学习能力 自驱力 积极主动 沟通能力 换位思考 团队意识 产品意识 思考力 加速度，助推器 职业发展 --- 阶段 初入职场 登堂入室 诱惑浮躁 潜心钻研 独当一面 领域专家 强大者的习惯 微笑 气质纯朴 不向朋友借钱 背后说别人好话 听到某人说别人坏话时只微笑 过去的事不让人全知道 尊敬不喜欢你的人 对事无情，对人有情 多做自我批评 为别人喝彩 感恩 学会聆听 说话时常用我们开头 少说话 喜欢自己 职场情商 1、把看不的人看顺； 2、把看不起的人看起； 3、把不想做的事做好； 4、把想不通的事想通； 5、把快骂出的话收回； 6、把咽不下气的咽下； 7、把想放纵的心收住； 你不需每时每刻这样做，但这样多做几回，你就会：1、情商高了。2、职位升了。3、工资涨了。4、人爽了。 工作9经验 1、不要停留在心灵的舒适区域； 2、不要把好像、大概、晚些时候、或者、说不定之类的话放在嘴边； 3、不要拖延工作； 4、不要认为理论上可以实施就大功告成了； 5、不要让别人等你； 6、不要认为细节不重要； 7、不要表现得消极； 8、不要把改善工作能力仅寄托在公司培训上； 9、不要推卸责任。 8种职业人脉 1、媒体联络人 2、旅行社 3、律师 4、人オ市场/猎头公司/银行 5、医生/护士/养生专家 6、名人 7、保险/金融/理财专家 8、维修人员 交流表达 演讲要点 演示比语言亮 图片比文字好 播视频不插话 数字量化力量 会这样说话少奋斗30年？ 普通表达 高水平表达 你不行 你很有潜力 随便 听你的 我没空 我有急事 我不会喝酒 我比较擅长倒酒 我不知道 我马上查 你太傻 你很有想法 真丑 真可爱 你有什么事 有什么可以帮到你 听懂了吗 我说清楚了吗 采访技巧 (Interviewing tips) 创造安全的空间 (Create a safe space) 避免假设 (Avoid assumptions) 不断问为什么 (Constantly ask \"why?\") 有同理心 (Have empathy) 创造安全的空间 (Create a safe space)。确保这里是进行公开交流的安全场所，不会影响他们。 避免假设 (Avoid assumptions)。您可以在那里获得见识并帮助改善他们的工作生活，有时，您可能会下意识地发现细节，因为他们会告诉您他们的故事，而不要承担任何责任。当事情变得模糊时，请始终要求坦诚清晰，您会惊讶于您推断出的会超出预期。而且不要忘记问为什么，继续提出清晰透明的问题。 不断问为什么 (Constantly ask \"why?\")。请记住，大多数员工被困当前的工作流程中，对于他们来说，可能不那么怎么容易意识到问题的存在，更无法想象他们以后拥有该应用时的场景。 有同理心 (Have empathy)。您必须始终对您采访的员工有同理心，您可以在那里获得解决问题所需的所有信息，并允许他们推动设计过程，尽力去感受他们的痛苦。我曾经采访过一家大型运输公司的一名员工，他说，在那家公司工作30多年以来，这是他第一次真正感到自己的知识和经验将用于改善世界各地同事的工作。 Create custom apps for employees - WWDC 2020 - Apple Developer 学习 SQ3R 学习法 S（Survey）检查：检查书的目录和每章的总结，有个总体的看法。 Q（Question）问题：记录所有的问题。 R（Read）阅读：阅读全书。 R（Recite）复述：总结，做笔记，用自己的话来描述。 R（Review）回顾：重读，扩展笔记，与同事讨论。 面试求职 STAR原则 STAR原则是结构化面试当中非常重要的一个理论。 Situation（情景） Task（任务） Action（行动） Result（结果） S 背景：在什么背景下开展工作或项目 T 任务：给你个人安排的任务、目标是什么 A 动作：你个人进行了哪些工作 R 结果：你的工作给项目带来了什么 举例 问题：请讲出一件你通过学习尽快胜任新的工作任务的事。 追问： 这件事发生在什么时候？ -------- S 你要从事的工作任务是什么？ -------- T 接到任务后你怎么办？ -------- A 你用了多长时间获得完成该任务所必须的知识？ -------- 深层次了解员工学习能力等 你在这个过程中遇见困难了吗？ -------- 了解坚韧性，以及处理事件的灵活性 你最后完成任务的情况如何？ -------- R 注意肢体语言和口头表达方式 精气神 打起精神：切忌驼背、窝在椅子里、眼神飘忽； 不要紧张：切忌抖脚、抓脑袋、呼吸急促； 不要激动：切忌说到高兴之处摇头晃脑、指点江山； 轻松大方：不要皱眉头、面无表情； 尊重面试官，注意礼貌； 洗头/理发，换干净衣服。 口头表达 不要临时想答案：提前准备可能会被问到的问题，遇到不理解的及时询问； 不卑不亢：回答问题声音明亮，意见不同时，不要和面试官激烈争辩； 回答突出：思考能力、学习能力等； 注意口头禅。 如何正确自我介绍？ 回答提示：一般人回答这个问题过于平常，只说姓名、年、爱好、工作经验，这些在简历上都有，其实，企业最希望知道的是求职者能否胜任工作！ 包括： 最强的技能 最深入研究的知识域 个性中最积极的部分 做过的最成功的事 主要的成就等， 这些都可以和学习无关，也可以和学习有关，但要突出积极的个性和做事的能力，说得合情合理企业才会相信。 自我介绍：表达有效信息 一般说法 学生：我来自...学校...专业，做过...研究项目、参加过...竟赛，名次...。实习过...次，负责过... 职场人：我上家公司是...，岗位是...。公司的主要业务是...，我平时主要解决...问题。我主要负责... 讨喜说法 我在上家公司做...方面的工作，曾经处理过...问题，我用...方式优化，达到了...好的效果。经常使用...语言，喜欢研究...技术，关注...领域（与面试公司匹配）。其他的工作还有... 另外...方面的工作（与应聘岗位匹配）我也很喜欢，平时也看阿里、腾讯、美团等大厂的技术文章，去 Github 学习... 检验简历效果 要检验你简历优化的效果，有如下3种方法： 1）设想自己是HR或研发部门的程序员，根据招聘需求来评估简历 2）请他人担任简历筛选人员，让他根据招聘信息来评估你的简历 3）选取一些公司的职位，优化简历，投递实验 前两种方法比较容易理解，也容易践行。第3种方法，实际上是把检验效果这个动作融入到了求职过程中。为避免你不合格的简历被心仪的公司刷掉，失去再次投递的机会，建议将你感兴趣的公司分成3类： 1）A类，最想去，这类公司就是自己的理想目标 2）B类，想去，公司有几点吸引自己的地方 3）C类，一般想去，可以试试看 然后按照C、B、A的顺序投递简历。这样做的好处是： 1）检验简历优化水平 2）积累面试经验 3）了解行业、产品、薪酬等信息 4）可能发现意外的机会——也许你开始不很想去的公司，了解后特别想去 第3）种方法可能会额外增加有些公司的招聘成本 --— 因为你即便拿到了Offer也不会去。所以，如何做，要不要这么做，遵循你的内心选择。 来源：《程序员的成长课》安晓辉 | 6.7 检验简历优化效果 面试问题 详细介绍自己做过的最有成就感的一个顶目 最近在读什么哪本书？ 是否有过创业经历或者有过类似的想法？ 是否参与过开源项目，收获是什么？ 你技术上的优势是什么？弱势是什么？ 技术薄弱点有计划加强？怎么加强？ 未来规划是什么 面试官的问题 你想考察候选人的哪些方面？这是面试前需要想清楚的，决定了你问的问题。 你想考察的方面有没有一个评定标准？这是面试前需要想清楚的，决定了问题的答案。 候选人的回答跟答案的差别是什么？这是面试后需要梳理的，决定了候选人的分数。 招人面试的技巧 - iOSRE 由 iHTCboy 通过 GitHub 以 知识共享 署名-相同方式共享 4.0协议 发布 Copyright © iHTCboy.com all right reserved，powered by Gitbook 2021-01-11 18:07:47 更新 "}}